{"version":3,"file":"brain-browser.js","sources":["../../src/activation/relu.ts","../../src/activation/sigmoid.ts","../../src/activation/tanh.ts","../../src/activation/leaky-relu.ts","../../src/cross-validate.ts","../../src/utilities/kernel.ts","../../src/estimator/mean-squared-error.ts","../../src/layer/base-layer.ts","../../src/utilities/zeros.ts","../../src/utilities/zeros-2d.ts","../../src/utilities/zeros-3d.ts","../../src/layer/activation.ts","../../src/layer/filter.ts","../../src/layer/internal.ts","../../src/layer/modifier.ts","../../src/layer/operator.ts","../../src/layer/target.ts","../../src/layer/types.ts","../../src/lookup.ts","../../src/praxis/base-praxis.ts","../../src/praxis/arthur-deviation-biases.ts","../../src/praxis/arthur-deviation-weights.ts","../../src/praxis/momentum-root-mean-squared-propagation.ts","../../src/utilities/traverse-layers-from.ts","../../src/utilities/flatten-layers.ts","../../src/utilities/layer-size.ts","../../src/layer/add.ts","../../src/utilities/random-weight.ts","../../src/utilities/random.ts","../../src/utilities/randos.ts","../../src/layer/random.ts","../../src/layer/multiply.ts","../../src/layer/sigmoid.ts","../../src/layer/arthur-feed-forward.ts","../../src/utilities/layer-setup.ts","../../src/utilities/values.ts","../../src/layer/convolution.ts","../../src/layer/dropout.ts","../../src/layer/feed-forward.ts","../../src/layer/fully-connected.ts","../../src/layer/negative.ts","../../src/layer/multiply-element.ts","../../src/utilities/ones.ts","../../src/layer/ones.ts","../../src/layer/tanh.ts","../../src/layer/zeros.ts","../../src/layer/gru.ts","../../src/layer/input.ts","../../src/layer/leaky-relu.ts","../../src/layer/lstm-cell.ts","../../src/layer/output.ts","../../src/layer/pool.ts","../../src/layer/recurrent-input.ts","../../src/layer/recurrent-zeros.ts","../../src/layer/relu.ts","../../src/layer/rnn-cell.ts","../../src/layer/regression.ts","../../src/layer/soft-max.ts","../../src/layer/svm.ts","../../src/layer/transpose.ts","../../src/layer/index.ts","../../src/utilities/layer-from-json.ts","../../src/utilities/lookup-table.ts","../../src/feed-forward.ts","../../src/likely.ts","../node_modules/thaw.js/browser.js","../../src/utilities/cast.ts","../../src/utilities/max.ts","../../src/utilities/mse.ts","../../src/neural-network.ts","../../src/neural-network-gpu.ts","../../src/layer/recurrent-connection.ts","../../src/recurrent.ts","../../src/recurrent/matrix/index.ts","../../src/recurrent/matrix/random-matrix.ts","../../src/utilities/data-formatter.ts","../../src/recurrent/matrix/copy.ts","../../src/recurrent/matrix/add.ts","../../src/recurrent/matrix/add-b.ts","../../src/recurrent/matrix/all-ones.ts","../../src/recurrent/matrix/clone-negative.ts","../../src/recurrent/matrix/multiply.ts","../../src/recurrent/matrix/multiply-b.ts","../../src/recurrent/matrix/multiply-element.ts","../../src/recurrent/matrix/multiply-element-b.ts","../../src/recurrent/matrix/relu.ts","../../src/recurrent/matrix/relu-b.ts","../../src/recurrent/matrix/row-pluck.ts","../../src/recurrent/matrix/row-pluck-b.ts","../../src/recurrent/matrix/sigmoid.ts","../../src/recurrent/matrix/sigmoid-b.ts","../../src/recurrent/matrix/softmax.ts","../../src/recurrent/matrix/tanh.ts","../../src/recurrent/matrix/tanh-b.ts","../../src/recurrent/matrix/equation.ts","../../src/recurrent/matrix/max-i.ts","../../src/recurrent/matrix/sample-i.ts","../../src/recurrent/rnn.ts","../../src/recurrent/gru.ts","../../src/utilities/array-lookup-table.ts","../../src/recurrent/rnn-time-step.ts","../../src/recurrent/gru-time-step.ts","../../src/recurrent/lstm.ts","../../src/recurrent/lstm-time-step.ts","../../src/utilities/range.ts","../../src/utilities/to-array.ts","../../src/utilities/to-svg.ts","../../src/browser-index.ts"],"sourcesContent":["/**\n * Relu Activation, aka Rectified Linear Unit Activation\n * @description https://en.wikipedia.org/wiki/Rectifier_(neural_networks)\n */\nexport function activate(weight: number): number {\n  return Math.max(0, weight);\n}\n\n/**\n * Relu derivative\n */\nexport function measure(weight: number, delta: number): number {\n  if (weight <= 0) {\n    return 0;\n  }\n  return delta;\n}\n","/**\n * sigmoid activation\n */\nexport function activate(value: number): number {\n  return 1 / (1 + Math.exp(-value));\n}\n\n/**\n * sigmoid derivative\n */\nexport function measure(weight: number, error: number): number {\n  return weight * (1 - weight) * error;\n}\n","/**\n * Hyperbolic tan\n */\nexport function activate(weight: number): number {\n  return Math.tanh(weight);\n}\n\n/**\n * @description grad for z = tanh(x) is (1 - z^2)\n */\nexport function measure(weight: number, error: number): number {\n  return (1 - weight * weight) * error;\n}\n","/**\n * Leaky Relu Activation, aka Leaky Rectified Linear Unit Activation\n * @description https://en.wikipedia.org/wiki/Rectifier_(neural_networks)\n */\nexport function activate(weight: number): number {\n  return weight > 0 ? weight : 0.01 * weight;\n}\n\n/**\n * Leaky Relu derivative\n */\nexport function measure(weight: number, error: number): number {\n  return weight > 0 ? error : 0.01 * error;\n}\n","import {\n  INeuralNetworkBinaryTestResult,\n  INeuralNetworkState,\n  INeuralNetworkTestResult,\n} from './neural-network-types';\n\nexport type InitClassifier<\n  TrainOptsType,\n  JsonType,\n  DatumType\n> = () => IClassifier<TrainOptsType, JsonType, DatumType>;\n\nexport interface IClassifier<TrainOptsType, JsonType, DatumType> {\n  trainOpts: TrainOptsType;\n  toJSON: () => JsonType;\n  fromJSON: (json: JsonType) => this;\n  train: (\n    data: DatumType[],\n    options?: Partial<TrainOptsType>\n  ) => INeuralNetworkState;\n  test: (\n    data: DatumType[]\n  ) => INeuralNetworkTestResult | INeuralNetworkBinaryTestResult;\n  initialize: () => void;\n}\n\nexport type ICrossValidateJSON<JsonType> =\n  | ICrossValidateStats<JsonType>\n  | ICrossValidateBinaryStats<JsonType>;\n\nexport interface ICrossValidateStatsAverages {\n  trainTime: number;\n  testTime: number;\n  iterations: number;\n  error: number;\n}\n\nexport interface ICrossValidateStats<JsonType> {\n  avgs: ICrossValidateStatsAverages;\n  stats: ICrossValidateStatsResultStats;\n  sets: Array<ICrossValidationTestPartitionResults<JsonType>>;\n}\n\nexport interface ICrossValidateBinaryStats<NetworkType> {\n  avgs: ICrossValidateStatsAverages;\n  stats: ICrossValidateStatsResultBinaryStats;\n  sets: Array<ICrossValidationTestPartitionBinaryResults<NetworkType>>;\n}\n\nexport interface ICrossValidateStatsResultStats {\n  total: number;\n  testSize: number;\n  trainSize: number;\n}\n\nexport interface ICrossValidateStatsResultBinaryStats\n  extends ICrossValidateStatsResultStats {\n  total: number;\n  truePos: number;\n  trueNeg: number;\n  falsePos: number;\n  falseNeg: number;\n  precision: number;\n  recall: number;\n  accuracy: number;\n}\n\nexport interface ICrossValidationTestPartitionResults<JsonType>\n  extends INeuralNetworkTestResult {\n  trainTime: number;\n  testTime: number;\n  iterations: number;\n  network: JsonType;\n  total: number;\n}\n\nexport type ICrossValidationTestPartitionBinaryResults<\n  JsonType\n> = INeuralNetworkBinaryTestResult &\n  ICrossValidationTestPartitionResults<JsonType>;\n\nexport default class CrossValidate<\n  InitClassifierType extends InitClassifier<\n    ReturnType<InitClassifierType>['trainOpts'],\n    ReturnType<ReturnType<InitClassifierType>['toJSON']>,\n    Parameters<ReturnType<InitClassifierType>['train']>[0][0]\n  >\n> {\n  initClassifier: InitClassifierType;\n  json: ICrossValidateJSON<\n    ReturnType<ReturnType<InitClassifierType>['toJSON']>\n  > = {\n    avgs: {\n      error: 0,\n      iterations: 0,\n      testTime: 0,\n      trainTime: 0,\n    },\n    stats: {\n      total: 0,\n      testSize: 0,\n      trainSize: 0,\n    },\n    sets: [],\n  };\n\n  constructor(initClassifier: InitClassifierType) {\n    this.initClassifier = initClassifier;\n  }\n\n  testPartition(\n    trainOpts: Parameters<ReturnType<InitClassifierType>['train']>[1],\n    trainSet: Parameters<ReturnType<InitClassifierType>['train']>[0],\n    testSet: Parameters<ReturnType<InitClassifierType>['train']>[0]\n  ):\n    | ICrossValidationTestPartitionResults<\n        ReturnType<ReturnType<InitClassifierType>['toJSON']>\n      >\n    | ICrossValidationTestPartitionBinaryResults<\n        ReturnType<ReturnType<InitClassifierType>['toJSON']>\n      > {\n    const classifier = this.initClassifier();\n    const beginTrain = Date.now();\n    const trainingStats = classifier.train(trainSet, trainOpts);\n    const beginTest = Date.now();\n    const testStats:\n      | INeuralNetworkTestResult\n      | INeuralNetworkBinaryTestResult = classifier.test(testSet);\n    const endTest = Date.now();\n    return {\n      ...testStats,\n      trainTime: beginTest - beginTrain,\n      testTime: endTest - beginTest,\n      iterations: trainingStats.iterations,\n      error: trainingStats.error,\n      total: testStats.total,\n      network: (classifier as {\n        toJSON: () => ReturnType<ReturnType<InitClassifierType>['toJSON']>;\n      }).toJSON(),\n    };\n  }\n\n  /**\n   * Randomize array element order in-place.\n   * Using Durstenfeld shuffle algorithm.\n   * source: http://stackoverflow.com/a/12646864/1324039\n   */\n  shuffleArray<K>(array: K[]): K[] {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    return array;\n  }\n\n  static isBinaryStats = (\n    stats: ICrossValidateStatsResultStats | ICrossValidateStatsResultBinaryStats\n  ): stats is ICrossValidateStatsResultBinaryStats => {\n    return (\n      (stats as ICrossValidateStatsResultBinaryStats).accuracy !== undefined\n    );\n  };\n\n  static isBinaryResults = <JsonType>(\n    stats: ICrossValidateStats<JsonType> | ICrossValidateBinaryStats<JsonType>\n  ): stats is ICrossValidateBinaryStats<JsonType> =>\n    (stats as ICrossValidateBinaryStats<JsonType>).stats.accuracy !== undefined;\n\n  static isBinaryPartitionResults = <JsonType>(\n    stats:\n      | ICrossValidationTestPartitionResults<JsonType>\n      | ICrossValidationTestPartitionBinaryResults<JsonType>\n  ): stats is ICrossValidationTestPartitionBinaryResults<JsonType> =>\n    (stats as ICrossValidationTestPartitionBinaryResults<JsonType>).accuracy !==\n    undefined;\n\n  train(\n    data: Array<Parameters<ReturnType<InitClassifierType>['train']>[0][0]>,\n    trainOpts: Partial<\n      Parameters<ReturnType<InitClassifierType>['train']>[1]\n    > = {},\n    k = 4\n  ): ICrossValidateStats<ReturnType<InitClassifierType>['toJSON']> {\n    if (data.length < k) {\n      throw new Error(\n        `Training set size is too small for ${data.length} k folds of ${k}`\n      );\n    }\n    this.shuffleArray<unknown>(data);\n    const size = data.length / k;\n\n    const avgs: ICrossValidateStatsAverages = {\n      trainTime: 0,\n      testTime: 0,\n      iterations: 0,\n      error: 0,\n    };\n\n    const stats:\n      | ICrossValidateStatsResultStats\n      | ICrossValidateStatsResultBinaryStats = {\n      total: 0,\n      testSize: 0,\n      trainSize: 0,\n    };\n\n    const binaryStats: ICrossValidateStatsResultBinaryStats = {\n      total: 0,\n      testSize: 0,\n      trainSize: 0,\n      truePos: 0,\n      trueNeg: 0,\n      falsePos: 0,\n      falseNeg: 0,\n      precision: 0,\n      recall: 0,\n      accuracy: 0,\n    };\n\n    const results = [];\n    let isBinary = null;\n\n    for (let i = 0; i < k; i++) {\n      const dclone = data.slice(0);\n      const testSet = dclone.splice(i * size, size);\n      const trainSet = dclone;\n      const result = this.testPartition(trainOpts, trainSet, testSet);\n\n      if (isBinary === null) {\n        isBinary =\n          result.hasOwnProperty('falseNeg') &&\n          result.hasOwnProperty('falsePos') &&\n          result.hasOwnProperty('trueNeg') &&\n          result.hasOwnProperty('truePos');\n        if (isBinary) {\n          Object.assign(stats, binaryStats);\n        }\n      }\n\n      avgs.iterations += result.iterations;\n      avgs.testTime += result.testTime;\n      avgs.trainTime += result.trainTime;\n      avgs.error += result.error;\n      stats.total += result.total;\n      if (\n        CrossValidate.isBinaryStats(stats) &&\n        CrossValidate.isBinaryPartitionResults(result)\n      ) {\n        stats.accuracy += result.accuracy;\n        stats.falseNeg += result.falseNeg;\n        stats.falsePos += result.falsePos;\n        stats.precision += result.precision;\n        stats.recall += result.recall;\n        stats.trueNeg += result.trueNeg;\n        stats.truePos += result.truePos;\n      }\n\n      results.push(result);\n    }\n    avgs.error /= k;\n    avgs.iterations /= k;\n    avgs.testTime /= k;\n    avgs.trainTime /= k;\n\n    if (CrossValidate.isBinaryStats(stats)) {\n      stats.precision = stats.truePos / (stats.truePos + stats.falsePos);\n      stats.recall = stats.truePos / (stats.truePos + stats.falseNeg);\n      stats.accuracy = (stats.trueNeg + stats.truePos) / stats.total;\n    }\n\n    stats.testSize = size;\n    stats.trainSize = data.length - size;\n\n    this.json = {\n      avgs: avgs,\n      stats: stats,\n      sets: results,\n    };\n    return this.json;\n  }\n\n  toNeuralNetwork(): ReturnType<InitClassifierType> {\n    return this.fromJSON(this.json);\n  }\n\n  toJSON(): ICrossValidateJSON<\n    ReturnType<ReturnType<InitClassifierType>['toJSON']>\n  > | null {\n    return this.json;\n  }\n\n  fromJSON(\n    crossValidateJson: ICrossValidateJSON<\n      ReturnType<ReturnType<InitClassifierType>['toJSON']>\n    >\n  ): ReturnType<InitClassifierType> {\n    const winningJSON:\n      | ICrossValidationTestPartitionResults<\n          ReturnType<ReturnType<InitClassifierType>['toJSON']>\n        >\n      | ICrossValidationTestPartitionBinaryResults<\n          ReturnType<ReturnType<InitClassifierType>['toJSON']>\n        > = (crossValidateJson as ICrossValidateStats<\n      ReturnType<ReturnType<InitClassifierType>['toJSON']>\n    >).sets.reduce((prev, cur) => (prev.error < cur.error ? prev : cur));\n    return (this.initClassifier() as ReturnType<InitClassifierType>).fromJSON(\n      winningJSON.network\n    );\n  }\n}\n","import {\n  GPU,\n  IConstantsThis,\n  IGPUKernelSettings,\n  IKernelMapRunShortcut,\n  IKernelRunShortcut,\n  Input,\n  ISubKernelObject,\n  KernelFunction,\n  KernelOutput,\n  OutputDimensions,\n  Texture,\n  ThreadFunction,\n  ThreadKernelVariable,\n} from 'gpu.js';\n\nlet gpuInstance: GPU | null = null;\n\n/**\n * Sets up the gpu.js instance\n */\nexport function setup(value: GPU): void {\n  gpuInstance = value;\n}\n\n/**\n * Destroys any existing gpu.js instance\n */\nexport function teardown(): void {\n  if (gpuInstance !== null) {\n    gpuInstance.destroy().catch(console.log);\n  }\n  gpuInstance = null;\n}\n\nexport function makeKernel<\n  ArgTypes extends ThreadKernelVariable[] = ThreadKernelVariable[],\n  ConstantsTypes extends IConstantsThis = IConstantsThis\n>(\n  fn: KernelFunction<ArgTypes, ConstantsTypes>,\n  settings: IGPUKernelSettings\n): IKernelRunShortcut {\n  let _gpuInstance: GPU = gpuInstance as GPU;\n  if (_gpuInstance === null) {\n    _gpuInstance = new GPU({ mode: 'gpu' });\n    setup(_gpuInstance);\n  }\n\n  return _gpuInstance\n    .createKernel<ArgTypes, ConstantsTypes>(fn, settings)\n    .setPipeline(true);\n}\n\nexport function makeKernelMap<\n  ArgTypes extends ThreadKernelVariable[],\n  ConstantsTypes extends IConstantsThis\n>(\n  map: ISubKernelObject,\n  fn: ThreadFunction<ArgTypes, ConstantsTypes>,\n  settings: IGPUKernelSettings\n): IKernelMapRunShortcut<ISubKernelObject> {\n  let _gpuInstance: GPU = gpuInstance as GPU;\n  if (_gpuInstance === null) {\n    _gpuInstance = new GPU({ mode: 'gpu' });\n    setup(_gpuInstance);\n  }\n\n  return _gpuInstance\n    .createKernelMap<ArgTypes, ConstantsTypes>(map, fn, settings)\n    .setPipeline(true);\n}\n\n/**\n * Compiles a function into a gpu.js dev mode kernel\n */\n// export function makeDevKernel(\n//   fn: ThreadFunction,\n//   settings: makeKernelSettings\n// ): IKernelRunShortcut {\n//   if ('map' in settings) {\n//     throw new Error('map kernels are not supported by dev kernels');\n//   }\n//   const gpu = new GPU({ mode: 'dev' });\n//   return gpu.createKernel(fn, settings);\n// }\n\nexport function kernelInput(value: number[], size: OutputDimensions): Input {\n  return new Input(value, size);\n}\n\n/**\n * Deletes a gpu.js texture and frees VRAM\n */\nexport function release(possibleTexture: KernelOutput | Input): void {\n  if (possibleTexture instanceof Texture) {\n    possibleTexture.delete();\n  }\n}\n\n/**\n * Cleans ie sets all elements to 0 of a Texture or a js array\n */\nexport function clear(value: KernelOutput): void {\n  if (value instanceof Texture) {\n    value.clear();\n    return;\n  }\n\n  // array\n  if (Array.isArray(value)) {\n    if (typeof value[0] === 'number') {\n      (value as number[]).fill(0);\n    } else if (typeof value[0][0] === 'number') {\n      for (let x = 0; x < value.length; x++) {\n        (value[x] as number[]).fill(0);\n      }\n      return;\n    } else if (typeof value[0][0][0] === 'number') {\n      // cube\n      for (let y = 0; y < value.length; y++) {\n        const row: number[][] = value[y] as number[][];\n        for (let x = 0; x < row.length; x++) {\n          row[x].fill(0);\n        }\n      }\n      return;\n    }\n  }\n  throw new Error('unhandled value');\n}\n\n/**\n * Clones a value\n */\nexport function clone(value: KernelOutput): KernelOutput {\n  if (value instanceof Texture) {\n    return value.clone();\n  }\n  if (value instanceof Float32Array) {\n    return value.slice(0);\n  }\n  if (Array.isArray(value)) {\n    if (typeof value[0] === 'number') {\n      return value.slice(0);\n    } else if (typeof value[0][0] === 'number') {\n      const matrix = new Array(value.length);\n      for (let x = 0; x < value.length; x++) {\n        matrix[x] = (value[x] as Float32Array).slice(0);\n      }\n      return matrix;\n    } else if (typeof value[0][0][0] === 'number') {\n      const cube = new Array(value.length);\n      for (let y = 0; y < value.length; y++) {\n        const row = value[y] as number[][];\n        const matrix = new Array(row.length);\n        for (let x = 0; x < row.length; x++) {\n          matrix[x] = row[x].slice(0);\n        }\n      }\n      return cube;\n    }\n  }\n  throw new Error('unhandled value');\n}\n","import { IKernelRunShortcut, IKernelFunctionThis } from 'gpu.js';\nimport { makeKernel } from '../utilities/kernel';\n\ninterface mse2dThis extends IKernelFunctionThis {\n  constants: { height: number; width: number; length: number };\n}\n\n/**\n * 2D Mean Squared Error\n */\nexport function mse2d(\n  this: mse2dThis,\n  errors: Array<[number, number]>\n): number {\n  let sum = 0;\n  for (let y = 0; y < this.constants.height; y++) {\n    for (let x = 0; x < this.constants.width; x++) {\n      sum += errors[y][x] ** 2;\n    }\n  }\n  return sum / this.constants.length;\n}\n\nexport class MeanSquaredError {\n  /** Calculate the mean squared error given an array of errors */\n  calculate: IKernelRunShortcut;\n  /** Returns the sum of absolute values of previuous error and previous layer errors */\n  addAbsolute: IKernelRunShortcut;\n  /** Adds two erros */\n  add: IKernelRunShortcut;\n  /** Returns the ratio of sum of errors and length (ie the average) */\n  divide: IKernelRunShortcut;\n\n  constructor({ width, height }: { width: number; height: number }) {\n    this.calculate = makeKernel(mse2d, {\n      output: [1],\n      constants: {\n        width,\n        height,\n        length: width * height,\n      },\n      immutable: true,\n    });\n\n    this.addAbsolute = makeKernel(\n      function (prevError: number[], prevLayerErrors: number[][]) {\n        return prevError[0] + Math.abs(prevLayerErrors[0][0]);\n      },\n      {\n        output: [1],\n        immutable: true,\n      }\n    );\n\n    this.add = makeKernel(\n      function (value1: number[], value2: number[]) {\n        return value1[0] + value2[0];\n      },\n      {\n        output: [1],\n        immutable: true,\n      }\n    );\n\n    this.divide = makeKernel(\n      function (length: number, mseSum: number[]) {\n        const value = mseSum[0];\n        if (value > 0) {\n          return value / length;\n        }\n        return 0;\n      },\n      {\n        output: [1],\n        immutable: true,\n      }\n    );\n  }\n}\n","import {\n  IKernelRunShortcut,\n  Input,\n  Kernel,\n  KernelOutput,\n  Texture,\n  TextureArrayOutput,\n} from 'gpu.js';\nimport { IPraxis, IPraxisSettings } from '../praxis/base-praxis';\nimport { clear, release } from '../utilities/kernel';\n\nexport interface ILayerJSON {\n  width?: number;\n  height?: number;\n  depth?: number;\n  weights?: number[] | number[][] | number[][][] | null;\n  type: string;\n  inputLayerIndex?: number;\n  inputLayer1Index?: number;\n  inputLayer2Index?: number;\n  praxisOpts?: Partial<IPraxisSettings> | null;\n}\n\nexport interface ILayer {\n  width: number;\n  height: number;\n  depth: number;\n  weights: KernelOutput | Input;\n  deltas: KernelOutput;\n  praxis: IPraxis | null;\n  errors?: KernelOutput | null;\n  setupKernels: (training?: boolean) => void;\n  predictKernel: IKernelRunShortcut | null;\n  compareKernel: IKernelRunShortcut | null;\n  settings: Partial<ILayerSettings>;\n  reuseKernels: (layer: ILayer) => void;\n  predict: (inputs?: KernelOutput) => void;\n  compare: (targetValues?: KernelOutput) => void;\n  learn: ((learningRate?: number) => void) | ((learningRate: number) => void);\n  toJSON: () => Partial<ILayerJSON>;\n  inputLayer?: ILayer;\n  inputLayer1?: ILayer;\n  inputLayer2?: ILayer;\n  index?: number;\n  id?: string;\n}\n\nexport interface ILayerSettings {\n  width?: number | null;\n  height?: number | null;\n  depth?: number | null;\n  weights?: KernelOutput | null;\n  deltas?: KernelOutput | null;\n  id?: string;\n  praxis?: IPraxis | null;\n  praxisOpts?: Partial<IPraxisSettings> | null;\n  initPraxis?:\n    | ((layerTemplate: ILayer, settings?: IPraxisSettings) => IPraxis)\n    | null;\n}\n\nexport const baseLayerDefaultSettings: ILayerSettings = {\n  width: 1,\n  height: 1,\n  depth: null,\n  weights: null,\n  deltas: null,\n  praxis: null,\n  praxisOpts: null,\n};\n\nexport type BaseLayerType = new (settings?: Partial<ILayerSettings>) => ILayer;\n\nexport class BaseLayer implements ILayer {\n  praxis: IPraxis | null = null;\n  predictKernel: IKernelRunShortcut | null = null;\n  compareKernel: IKernelRunShortcut | null = null;\n  settings: Partial<ILayerSettings>;\n\n  get width(): number {\n    return this.settings.width ?? 0;\n  }\n\n  get height(): number {\n    return this.settings.height ?? 0;\n  }\n\n  get depth(): number {\n    return this.settings.depth ?? 0;\n  }\n\n  get weights(): KernelOutput | Input {\n    return this.settings.weights as KernelOutput;\n  }\n\n  set weights(weights: KernelOutput | Input) {\n    this.settings.weights = weights as KernelOutput;\n  }\n\n  get deltas(): KernelOutput {\n    return this.settings.deltas as KernelOutput;\n  }\n\n  set deltas(deltas: KernelOutput) {\n    this.settings.deltas = deltas;\n  }\n\n  get id(): string {\n    return this.settings.id ?? '';\n  }\n\n  set id(title: string) {\n    this.settings.id = title;\n  }\n\n  constructor(settings?: Partial<ILayerSettings>) {\n    if (settings) {\n      this.settings = { ...baseLayerDefaultSettings, ...settings };\n    } else {\n      this.settings = { ...baseLayerDefaultSettings };\n    }\n    this.setupPraxis();\n  }\n\n  setupPraxis(): void {\n    const { initPraxis, praxis, praxisOpts } = this.settings;\n    if (!this.praxis) {\n      if (initPraxis) {\n        if (praxisOpts) {\n          this.praxis = initPraxis(this, praxisOpts);\n        } else {\n          this.praxis = initPraxis(this);\n        }\n      } else if (praxis) {\n        this.praxis = praxis;\n      }\n    }\n  }\n\n  /*\n  get weights() {\n    return this._weights;\n  }\n\n  set weights(value) {\n    if (value) {\n      if (value.dimensions) {\n        if (value.dimensions[0] !== this.width) {\n          throw new Error(`${this.constructor.name}.weights being set with improper value width`);\n        }\n        if (value.dimensions[1] !== this.height) {\n          throw new Error(`${this.constructor.name}.weights being set with improper value height`);\n        }\n      } else {\n        if (value[0].length !== this.width) {\n          throw new Error(`${this.constructor.name}.weights being set with improper value width`);\n        }\n        if (value.length !== this.height) {\n          throw new Error(`${this.constructor.name}.weights being set with improper value height`);\n        }\n      }\n    }\n    this._weights = value;\n  }\n\n  get deltas() {\n    return this._deltas;\n  }\n\n  set deltas(value) {\n    if (value) {\n      if (value.dimensions) {\n        if (value.dimensions[0] !== this.width) {\n          throw new Error(`${this.constructor.name}.deltas being set with improper value width`);\n        }\n        if (value.dimensions[1] !== this.height) {\n          throw new Error(`${this.constructor.name}.deltas being set with improper value height`);\n        }\n      } else {\n        if (value[0].length !== this.width) {\n          throw new Error(`${this.constructor.name}.deltas being set with improper value width`);\n        }\n        if (value.length !== this.height) {\n          throw new Error(`${this.constructor.name}.deltas being set with improper value height`);\n        }\n      }\n    }\n    this._deltas = value;\n  } */\n\n  validate(): void {\n    if (Number.isNaN(this.height)) {\n      throw new Error(`${this.constructor.name} layer height is not a number`);\n    }\n    if (Number.isNaN(this.width)) {\n      throw new Error(`${this.constructor.name} layer width is not a number`);\n    }\n    if (this.height < 1) {\n      throw new Error(`${this.constructor.name} layer height is less than 1`);\n    }\n    if (this.width < 1) {\n      throw new Error(`${this.constructor.name} layer width is less than 1`);\n    }\n  }\n\n  setupKernels(isTraining?: boolean): void {}\n\n  reuseKernels(layer: ILayer): void {\n    if (layer.width !== this.width) {\n      throw new Error(\n        `${this.constructor.name} kernel width mismatch ${layer.width} is not ${this.width}`\n      );\n    }\n    if (layer.height !== this.height) {\n      throw new Error(\n        `${this.constructor.name} kernel width mismatch ${layer.height} is not ${this.height}`\n      );\n    }\n    if (layer.hasOwnProperty('predictKernel') && layer.predictKernel !== null) {\n      if (!(layer.predictKernel as Kernel).immutable) {\n        throw new Error(\n          `${layer.constructor.name}.predictKernel is not reusable, set kernel.immutable = true`\n        );\n      }\n      this.predictKernel = layer.predictKernel;\n    }\n    if (layer.hasOwnProperty('compareKernel') && layer.compareKernel !== null) {\n      if (!(layer.compareKernel as Kernel).immutable) {\n        throw new Error(\n          `${layer.constructor.name}.compareKernel is not reusable, set kernel.immutable = true`\n        );\n      }\n      this.compareKernel = layer.compareKernel;\n    }\n    this.praxis = layer.praxis;\n  }\n\n  predict(inputs?: KernelOutput): void {}\n\n  compare(targetValues?: KernelOutput): void {}\n\n  learn(learningRate?: number): void {\n    // TODO: do we need to release here?\n    const { weights: oldWeights } = this;\n    if (!this.praxis) throw new Error('this.praxis not defined');\n    this.weights = this.praxis.run(this, learningRate as number);\n    release(oldWeights);\n    clear(this.deltas);\n  }\n\n  toArray(): TextureArrayOutput {\n    return Array.isArray(this.weights)\n      ? this.weights\n      : (this.weights as Texture).toArray();\n  }\n\n  toJSON(): Partial<ILayerJSON> {\n    return BaseLayer.toJSON(this);\n  }\n\n  static toJSON(layer: ILayer): Partial<ILayerJSON> {\n    const { weights } = layer;\n    return {\n      width: layer.width,\n      height: layer.height,\n      depth: layer.depth,\n      weights: toUntypedArray(\n        (weights && weights instanceof Texture\n          ? weights.toArray()\n          : weights) as\n          | Float32Array\n          | Float32Array[]\n          | Float32Array[][]\n          | number[]\n          | number[][]\n          | number[][][]\n          | null\n      ),\n      type: layer.constructor.name,\n      praxisOpts: layer.praxis ? layer.praxis.toJSON() : null,\n    };\n  }\n}\n\nfunction toUntypedArray(\n  weights:\n    | Float32Array\n    | Float32Array[]\n    | Float32Array[][]\n    | number[]\n    | number[][]\n    | number[][][]\n    | null\n): number[][][] | number[][] | number[] | null {\n  if (weights === null) return null;\n  if (Array.isArray(weights)) {\n    if (typeof weights[0] === 'number') {\n      return weights as number[];\n    } else if (Array.isArray(weights[0]) && typeof weights[0][0] === 'number') {\n      return weights as number[][];\n    } else if (\n      Array.isArray(weights[0][0]) &&\n      typeof weights[0][0][0] === 'number'\n    ) {\n      return weights as number[][][];\n    } else if (weights[0] instanceof Float32Array) {\n      const matrix = weights as Float32Array[];\n      return matrix.map((row: Float32Array) => {\n        return Array.from(row);\n      });\n    } else if (weights[0][0] instanceof Float32Array) {\n      const cube = weights as Float32Array[][];\n      return cube.map((matrix: Float32Array[]): number[][] => {\n        return matrix.map((row: Float32Array): number[] => {\n          return Array.from(row);\n        });\n      });\n    }\n  } else if (weights) {\n    return Array.from(weights);\n  }\n  throw new Error('unexpected value');\n}\n","/**\n * Returns an array of zeros\n */\nexport function zeros(size: number): Float32Array {\n  return new Float32Array(size);\n}\n","import { zeros } from './zeros';\n\n/**\n * Returns a 2D tensor(matrix) of zeros\n */\nexport function zeros2D(width: number, height: number): Float32Array[] {\n  const result: Float32Array[] = new Array(height);\n  for (let y = 0; y < height; y++) {\n    result[y] = zeros(width);\n  }\n  return result;\n}\n","import { zeros2D } from './zeros-2d';\n\n/**\n * Returns a 3D tensor of arrays\n */\nexport function zeros3D(\n  width: number,\n  height: number,\n  depth: number\n): Float32Array[][] {\n  const result: Float32Array[][] = new Array(depth);\n  for (let z = 0; z < depth; z++) {\n    result[z] = zeros2D(width, height);\n  }\n  return result;\n}\n","import { BaseLayer, ILayerSettings, ILayer } from './base-layer';\nimport { zeros2D } from '../utilities/zeros-2d';\nimport { zeros3D } from '../utilities/zeros-3d';\n\nexport type ActivationType = new (\n  inputLayer: ILayer,\n  settings: Partial<ILayerSettings>\n) => ILayer;\n\nexport class Activation extends BaseLayer {\n  inputLayer: ILayer;\n\n  get width(): number {\n    return this.inputLayer.width;\n  }\n\n  get height(): number {\n    return this.inputLayer.height;\n  }\n\n  get depth(): number {\n    return this.inputLayer.depth;\n  }\n\n  constructor(inputLayer: ILayer, settings?: Partial<ILayerSettings>) {\n    super(settings);\n    this.inputLayer = inputLayer;\n    const { width, height, depth } = this;\n    this.predictKernel = null;\n    this.compareKernel = null;\n    this.validate();\n    if (depth > 0) {\n      this.weights = zeros3D(width, height, depth);\n      this.deltas = zeros3D(width, height, depth);\n    } else if (height > 0) {\n      this.weights = zeros2D(width, height);\n      this.deltas = zeros2D(width, height);\n    }\n    this.setupPraxis();\n  }\n}\n","import { KernelOutput } from 'gpu.js';\nimport { BaseLayer, ILayer, ILayerSettings } from './base-layer';\n\nexport interface IFilterSettings extends ILayerSettings {\n  filterCount: number;\n  filterWidth: number;\n  filterHeight: number;\n  filters?: KernelOutput;\n  filterDeltas?: KernelOutput;\n}\n\nexport type FilterType = new (\n  settings: Partial<IFilterSettings>,\n  inputLayer: ILayer\n) => ILayer;\n\nexport class Filter extends BaseLayer {\n  get width(): number {\n    return this.inputLayer.width;\n  }\n\n  get height(): number {\n    return this.inputLayer.height;\n  }\n\n  get depth(): number {\n    return this.inputLayer.depth;\n  }\n\n  get filterCount(): number {\n    return this.settings.filterCount as number;\n  }\n\n  get filterWidth(): number {\n    return this.settings.filterWidth as number;\n  }\n\n  get filterHeight(): number {\n    return this.settings.filterHeight as number;\n  }\n\n  get filters(): KernelOutput {\n    return this.settings.filters;\n  }\n\n  set filters(filters: KernelOutput) {\n    this.settings.filters = filters;\n  }\n\n  get filterDeltas(): KernelOutput {\n    return this.settings.filterDeltas;\n  }\n\n  set filterDeltas(filterDeltas: KernelOutput) {\n    this.settings.filterDeltas = filterDeltas;\n  }\n\n  settings: Partial<IFilterSettings>;\n  inputLayer: ILayer;\n  constructor(settings: Partial<IFilterSettings>, inputLayer: ILayer) {\n    super();\n    this.settings = settings;\n    this.inputLayer = inputLayer;\n  }\n}\n","import { BaseLayer, ILayer, ILayerJSON, ILayerSettings } from './base-layer';\nimport { IKernelRunShortcut, Input, KernelOutput } from 'gpu.js';\nimport { IPraxis } from '../praxis/base-praxis';\n\nexport type InternalType = new (settings: Partial<ILayerSettings>) => ILayer;\n\nexport abstract class Internal implements ILayer {\n  abstract settings: ILayerSettings;\n  abstract predict(inputs?: KernelOutput): void;\n  abstract compare(targetValues?: KernelOutput): void;\n  abstract learn(learningRate?: number): void;\n  abstract setupKernels(training?: boolean): void;\n  predictKernel: IKernelRunShortcut | null = null;\n  compareKernel: IKernelRunShortcut | null = null;\n  praxis: IPraxis | null = null;\n\n  get width(): number {\n    return this.settings.width as number;\n  }\n\n  get height(): number {\n    return this.settings.height as number;\n  }\n\n  get depth(): number {\n    return this.settings.depth as number;\n  }\n\n  get weights(): KernelOutput | Input {\n    return this.settings.weights as KernelOutput;\n  }\n\n  set weights(weights: KernelOutput | Input) {\n    this.settings.weights = weights as KernelOutput;\n  }\n\n  get deltas(): KernelOutput {\n    return this.settings.deltas as KernelOutput;\n  }\n\n  set deltas(deltas: KernelOutput) {\n    this.settings.deltas = deltas;\n  }\n\n  toJSON(): Partial<ILayerJSON> {\n    return BaseLayer.toJSON(this);\n  }\n\n  abstract reuseKernels(layer: ILayer): void;\n}\n","import { BaseLayer, ILayer, ILayerSettings } from './base-layer';\n\nexport type ModifierType = new (\n  inputLayer: ILayer,\n  settings?: Partial<ILayerSettings>\n) => ILayer;\n\nexport class Modifier extends BaseLayer {\n  inputLayer: ILayer;\n  constructor(inputLayer: ILayer, settings?: Partial<ILayerSettings>) {\n    super({\n      ...settings,\n      width: inputLayer.width,\n      height: inputLayer.height,\n      depth: inputLayer.depth,\n    });\n    this.inputLayer = inputLayer;\n  }\n\n  validate(): void {\n    super.validate();\n\n    if (this.width !== this.inputLayer.width) {\n      throw new Error(\n        `width of ${this.width} does not match inputLayer.width of ${this.inputLayer.width}`\n      );\n    }\n\n    if (this.height !== this.inputLayer.height) {\n      throw new Error(\n        `height of ${this.height} does not match inputLayer.height of ${this.inputLayer.height}`\n      );\n    }\n\n    if (this.depth !== (this.inputLayer.depth ?? 0)) {\n      throw new Error(\n        `depth of ${this.depth} does not match inputLayer.depth of ${this.inputLayer.depth}`\n      );\n    }\n  }\n}\n","import { BaseLayer, ILayerSettings, ILayer } from './base-layer';\nimport { zeros2D } from '../utilities/zeros-2d';\n\nexport type OperatorType = new (\n  inputLayer1: ILayer,\n  inputLayer2: ILayer,\n  settings?: Partial<ILayerSettings>\n) => ILayer;\n\nexport abstract class Operator extends BaseLayer {\n  inputLayer1: ILayer;\n  inputLayer2: ILayer;\n  constructor(\n    inputLayer1: ILayer,\n    inputLayer2: ILayer,\n    settings?: Partial<ILayerSettings>\n  ) {\n    super(settings);\n    this.inputLayer1 = inputLayer1;\n    this.inputLayer2 = inputLayer2;\n    this.validate();\n    this.weights = zeros2D(this.width, this.height);\n    this.deltas = zeros2D(this.width, this.height);\n    this.setupPraxis();\n  }\n}\n","import { IKernelFunctionThis, IKernelRunShortcut, KernelOutput } from 'gpu.js';\n\nimport { makeKernel, release, clone, clear } from '../utilities/kernel';\nimport { zeros } from '../utilities/zeros';\nimport { zeros2D } from '../utilities/zeros-2d';\nimport { BaseLayer, ILayer, ILayerSettings } from './base-layer';\n\nexport function compare1D(\n  this: IKernelFunctionThis,\n  weights: number[][],\n  targetValues: number[]\n): number {\n  return weights[this.thread.y][this.thread.x] - targetValues[this.thread.x];\n}\n\nexport function compare2D(\n  this: IKernelFunctionThis,\n  weights: number[][],\n  targetValues: number[][]\n): number {\n  return (\n    weights[this.thread.y][this.thread.x] -\n    targetValues[this.thread.y][this.thread.x]\n  );\n}\n\nexport type TargetType = new (\n  settings: Partial<ILayerSettings>,\n  inputLayer: ILayer\n) => ILayer;\n\nexport class Target extends BaseLayer {\n  errors: KernelOutput;\n  inputLayer: ILayer;\n  constructor(settings: Partial<ILayerSettings>, inputLayer: ILayer) {\n    super(settings);\n    this.inputLayer = inputLayer;\n    this.validate();\n    if (this.depth) {\n      throw new Error('Target layer not implemented for depth');\n    } else if (this.height) {\n      this.weights = zeros2D(this.width, this.height);\n      this.deltas = zeros2D(this.width, this.height);\n      this.errors = zeros2D(this.width, this.height);\n    } else {\n      this.weights = zeros(this.width);\n      this.deltas = zeros(this.width);\n      this.errors = zeros(this.width);\n    }\n  }\n\n  setupKernels(): void {\n    if (this.width === 1) {\n      this.compareKernel = makeKernel(compare1D, {\n        output: [this.width, this.height],\n        immutable: true,\n      });\n    } else {\n      this.compareKernel = makeKernel(compare2D, {\n        output: [this.width, this.height],\n        immutable: true,\n      });\n    }\n  }\n\n  predict(): void {\n    // TODO: should we clone here?\n    // NOTE: this looks like it shouldn't be, but the weights are immutable, and this is where they are reused.\n    release(this.weights);\n    this.weights = clone(this.inputLayer.weights as KernelOutput);\n    clear(this.deltas);\n  }\n\n  compare(targetValues: KernelOutput): void {\n    // this is where weights attach to deltas\n    // deltas will be zero on learn, so save it in error for comparing to mse later\n    release(this.deltas);\n    release(this.errors);\n    release(this.inputLayer.deltas);\n    this.deltas = (this.compareKernel as IKernelRunShortcut)(\n      this.weights,\n      targetValues\n    );\n    this.inputLayer.deltas = clone(this.deltas);\n    this.errors = clone(this.deltas);\n  }\n\n  setupPraxis(): void {}\n}\n\nexport function target(settings: ILayerSettings, inputLayer: ILayer): Target {\n  return new Target(settings, inputLayer);\n}\n","import { BaseLayer, ILayer, ILayerSettings } from './base-layer';\n\nexport { Activation } from './activation';\nexport { Filter } from './filter';\nexport { Internal } from './internal';\nexport { Modifier } from './modifier';\nexport { Operator } from './operator';\nexport { Target } from './target';\n\n// eslint-disable-next-line @typescript-eslint/no-extraneous-class\nexport class InternalModel {}\n\nexport type EntryPointType = new (settings: Partial<ILayerSettings>) => ILayer;\n// eslint-disable-next-line @typescript-eslint/no-extraneous-class\nexport class EntryPoint extends BaseLayer {}\n\n// eslint-disable-next-line @typescript-eslint/no-extraneous-class\nexport class Model extends BaseLayer {}\n","import { KernelOutput } from 'gpu.js';\n\nexport interface INumberHash {\n  [character: string]: number;\n}\n\nexport interface INumberArray {\n  length: number;\n  buffer?: ArrayBuffer;\n  [index: number]: number;\n}\n\nexport type InputOutputValue = INumberArray | Partial<INumberHash>;\n\nexport interface ITrainingDatum {\n  input: InputOutputValue | InputOutputValue[] | KernelOutput;\n  output: InputOutputValue | InputOutputValue[] | KernelOutput;\n}\n\nexport type FormattableData =\n  | number\n  | ITrainingDatum\n  | InputOutputValue\n  | InputOutputValue[];\n\n/* Functions for turning sparse hashes into arrays and vice versa */\nexport const lookup = {\n  /**\n   * Performs `[{a: 1}, {b: 6, c: 7}] -> {a: 0, b: 1, c: 2}`\n   * @param {Object} hashes\n   * @returns {Object}\n   */\n  toTable(hashes: INumberHash[]): INumberHash {\n    const hash = hashes.reduce((memo, hash) => {\n      return Object.assign(memo, hash);\n    }, {});\n\n    return lookup.toHash(hash);\n  },\n\n  /**\n   * Performs `[{a: 1}, {b: 6, c: 7}] -> {a: 0, b: 1, c: 2}`\n   */\n  toTable2D(objects2D: INumberHash[][]): INumberHash {\n    const table: INumberHash = {};\n    let valueIndex = 0;\n    for (let i = 0; i < objects2D.length; i++) {\n      const objects = objects2D[i];\n      for (let j = 0; j < objects.length; j++) {\n        const object = objects[j];\n        for (const p in object) {\n          if (object.hasOwnProperty(p) && !table.hasOwnProperty(p)) {\n            table[p] = valueIndex++;\n          }\n        }\n      }\n    }\n    return table;\n  },\n\n  toInputTable2D(\n    data: Array<{ input: Array<{ [key: string]: number }> }>\n  ): INumberHash {\n    const table: INumberHash = {};\n    let tableIndex = 0;\n    for (let dataIndex = 0; dataIndex < data.length; dataIndex++) {\n      const input = data[dataIndex].input;\n      for (let i = 0; i < input.length; i++) {\n        const object = input[i];\n        for (const p in object) {\n          if (!object.hasOwnProperty(p)) continue;\n          if (!table.hasOwnProperty(p)) {\n            table[p] = tableIndex++;\n          }\n        }\n      }\n    }\n    return table;\n  },\n\n  toOutputTable2D(\n    data: Array<{ output: Array<{ [key: string]: number }> }>\n  ): INumberHash {\n    const table: INumberHash = {};\n    let tableIndex = 0;\n    for (let dataIndex = 0; dataIndex < data.length; dataIndex++) {\n      const output = data[dataIndex].output;\n      for (let i = 0; i < output.length; i++) {\n        const object = output[i];\n        for (const p in object) {\n          if (!object.hasOwnProperty(p)) continue;\n          if (!table.hasOwnProperty(p)) {\n            table[p] = tableIndex++;\n          }\n        }\n      }\n    }\n    return table;\n  },\n\n  /**\n   * performs `{a: 6, b: 7} -> {a: 0, b: 1}`\n   */\n  toHash(hash: INumberHash): INumberHash {\n    const lookup: INumberHash = {};\n    let index = 0;\n    const keys = Object.keys(hash);\n    for (let i = 0; i < keys.length; i++) {\n      lookup[keys[i]] = index++;\n    }\n    return lookup;\n  },\n\n  /**\n   * performs `{a: 0, b: 1}, {a: 6} -> [6, 0]`\n   */\n  toArray(\n    lookup: INumberHash,\n    object: INumberHash,\n    arrayLength: number\n  ): Float32Array {\n    const result = new Float32Array(arrayLength);\n    for (const p in lookup) {\n      if (!lookup.hasOwnProperty(p)) continue;\n      result[lookup[p]] = object.hasOwnProperty(p) ? object[p] : 0;\n    }\n    return result;\n  },\n\n  toArrayShort(lookup: INumberHash, object: INumberHash): Float32Array {\n    const result = [];\n    for (const p in lookup) {\n      if (!lookup.hasOwnProperty(p)) continue;\n      if (!object.hasOwnProperty(p)) break;\n      result[lookup[p]] = object[p];\n    }\n    return Float32Array.from(result);\n  },\n\n  toArrays(\n    lookup: INumberHash,\n    objects: INumberHash[],\n    arrayLength: number\n  ): Float32Array[] {\n    const result = [];\n    for (let i = 0; i < objects.length; i++) {\n      result.push(this.toArray(lookup, objects[i], arrayLength));\n    }\n    return result;\n  },\n\n  /**\n   * performs `{a: 0, b: 1}, [6, 7] -> {a: 6, b: 7}`\n   * @param {Object} lookup\n   * @param {Array} array\n   * @returns {Object}\n   */\n  toObject(lookup: INumberHash, array: number[] | Float32Array): INumberHash {\n    const object: INumberHash = {};\n    for (const p in lookup) {\n      if (!lookup.hasOwnProperty(p)) continue;\n      object[p] = array[lookup[p]];\n    }\n    return object;\n  },\n\n  toObjectPartial(\n    lookup: INumberHash,\n    array: number[] | Float32Array,\n    offset = 0,\n    limit = 0\n  ): INumberHash {\n    const object: INumberHash = {};\n    let i = 0;\n    for (const p in lookup) {\n      if (!lookup.hasOwnProperty(p)) continue;\n      if (offset > 0) {\n        if (i++ < offset) continue;\n      }\n      if (limit > 0) {\n        if (i++ >= limit) continue;\n      }\n      object[p] = array[lookup[p] - offset];\n    }\n    return object;\n  },\n\n  dataShape(data: FormattableData[] | FormattableData): string[] {\n    const shape = [];\n    let lastData;\n    if (data.hasOwnProperty('input')) {\n      shape.push('datum');\n      lastData = (data as ITrainingDatum).input;\n    } else if (Array.isArray(data)) {\n      if (\n        (data as ITrainingDatum[])[0] &&\n        (data as ITrainingDatum[])[0].input\n      ) {\n        shape.push('array', 'datum');\n        lastData = (data as ITrainingDatum[])[0].input;\n      } else if (Array.isArray(data[0])) {\n        shape.push('array');\n        lastData = data[0];\n      } else {\n        lastData = data as\n          | InputOutputValue\n          | InputOutputValue[]\n          | InputOutputValue[][];\n      }\n    } else {\n      lastData = data as\n        | InputOutputValue\n        | InputOutputValue[]\n        | InputOutputValue[][];\n    }\n\n    let p;\n    while (lastData) {\n      p = Object.keys(lastData)[0];\n      if (\n        Array.isArray(lastData) ||\n        typeof (lastData as Float32Array).buffer === 'object'\n      ) {\n        shape.push('array');\n        const possibleNumber:\n          | number\n          | INumberArray = (lastData as INumberArray[])[parseInt(p)];\n        if (typeof possibleNumber === 'number') {\n          shape.push('number');\n          break;\n        } else {\n          lastData = possibleNumber;\n        }\n      } else if (\n        typeof lastData === 'object' &&\n        typeof (lastData as Float32Array).buffer !== 'object'\n      ) {\n        shape.push('object');\n        const possibleNumber: number | INumberHash = (lastData as INumberHash)[\n          p\n        ];\n        if (typeof possibleNumber === 'number') {\n          shape.push('number');\n          break;\n        } else {\n          lastData = possibleNumber;\n        }\n      } else {\n        throw new Error('unhandled signature');\n      }\n    }\n    return shape;\n  },\n\n  addKeys(value: number[] | INumberHash, table: INumberHash): INumberHash {\n    if (Array.isArray(value)) return table;\n    let i = Object.keys(table).length;\n    for (const p in value) {\n      if (!value.hasOwnProperty(p)) continue;\n      if (table.hasOwnProperty(p)) continue;\n      table[p] = i++;\n    }\n    return table;\n  },\n};\n","import { ILayer } from '../layer';\nimport { IKernelRunShortcut, KernelOutput } from 'gpu.js';\n\nexport interface ILayerTemplate {\n  width: number;\n  height: number;\n  depth: number;\n}\n\nexport interface IPraxisJSON {\n  width: number;\n  height: number;\n  depth: number;\n}\n\nexport interface IPraxisSettings {\n  width?: number;\n  height?: number;\n  depth?: number;\n  kernel?: IKernelRunShortcut | null;\n}\n\nexport interface IPraxis {\n  layerTemplate: ILayerTemplate | null;\n  kernel: IKernelRunShortcut | null;\n  settings: Partial<IPraxisSettings>;\n  setupKernels: () => void;\n  width: number;\n  height: number;\n  depth: number;\n  run:\n    | ((layer: ILayer, learningRate: number) => KernelOutput)\n    | ((layer: ILayer, learningRate?: number) => KernelOutput);\n  toJSON: () => Partial<IPraxisSettings>;\n}\n\nexport abstract class BasePraxis implements IPraxis {\n  layerTemplate: ILayerTemplate;\n  kernel: IKernelRunShortcut | null;\n  settings: Partial<IPraxisSettings>;\n\n  get width(): number {\n    return this.layerTemplate.width;\n  }\n\n  get height(): number {\n    return this.layerTemplate.height;\n  }\n\n  get depth(): number {\n    return this.layerTemplate.depth;\n  }\n\n  constructor(\n    layerTemplate: ILayerTemplate,\n    settings: Partial<IPraxisSettings> = {}\n  ) {\n    this.layerTemplate = layerTemplate;\n    this.settings = { ...settings };\n    this.kernel = null;\n  }\n\n  setupKernels(): void {}\n\n  reuseKernels(praxis: IPraxis): void {\n    if (praxis.width !== this.width) {\n      throw new Error(\n        `${this.constructor.name} kernel width mismatch ${praxis.width} is not ${this.width}`\n      );\n    }\n    if (praxis.height !== this.height) {\n      throw new Error(\n        `${this.constructor.name} kernel width mismatch ${praxis.height} is not ${this.height}`\n      );\n    }\n    if (praxis.hasOwnProperty('kernel')) {\n      this.kernel = praxis.kernel;\n    }\n  }\n\n  abstract run(layer: ILayer, learningRate?: number): KernelOutput;\n\n  toJSON(): Partial<IPraxisSettings> {\n    return { ...this.settings };\n  }\n}\n","import { makeKernel } from '../utilities/kernel';\nimport { BasePraxis, IPraxisSettings } from './base-praxis';\nimport { ILayer } from '../layer/base-layer';\nimport { IKernelFunctionThis, IKernelRunShortcut, KernelOutput } from 'gpu.js';\n\nexport interface IUpdateThis extends IKernelFunctionThis {\n  constants: {\n    learningRate: number;\n  };\n}\n\nexport function update(\n  this: IUpdateThis,\n  weights: number[][],\n  deltas: number[][]\n): number {\n  return (\n    weights[this.thread.y][this.thread.x] +\n    this.constants.learningRate * deltas[this.thread.y][this.thread.x]\n  );\n}\n\nexport interface IArthurDeviationBiasesSettings extends IPraxisSettings {\n  learningRate?: number;\n}\n\nexport const defaultSettings = {\n  learningRate: 0.3,\n};\n\nexport class ArthurDeviationBiases extends BasePraxis {\n  settings: IArthurDeviationBiasesSettings;\n  kernel: IKernelRunShortcut | null;\n  constructor(layer: ILayer, settings?: IArthurDeviationBiasesSettings) {\n    super(layer);\n    this.settings = { ...defaultSettings, ...settings };\n    this.kernel = null;\n  }\n\n  run(layer: ILayer): KernelOutput {\n    return (this.kernel as IKernelRunShortcut)(layer.weights, layer.deltas);\n  }\n\n  setupKernels(): void {\n    this.kernel = makeKernel(update, {\n      output: [this.width, this.height],\n      constants: {\n        learningRate: this.settings.learningRate,\n      },\n    });\n  }\n}\n\nexport function arthurDeviationBiases(\n  layer: ILayer,\n  settings?: Partial<IArthurDeviationBiasesSettings>\n): ArthurDeviationBiases {\n  return new ArthurDeviationBiases(layer, settings);\n}\n","import { makeKernelMap } from '../utilities/kernel';\nimport { zeros2D } from '../utilities/zeros-2d';\nimport { BasePraxis, IPraxisSettings } from './base-praxis';\nimport { ILayer } from '../layer/base-layer';\nimport {\n  IConstantsThis,\n  IKernelFunctionThis,\n  IKernelMapRunShortcut,\n  ISubKernelObject,\n  ISubKernelsResults,\n  KernelOutput,\n} from 'gpu.js';\n\nexport function updateChange(value: number): number {\n  return value;\n}\n\nexport interface IUpdateConstants extends IConstantsThis {\n  learningRate: number;\n  momentum: number;\n}\n\nexport function update(\n  this: IKernelFunctionThis<IUpdateConstants>,\n  changes: number[][],\n  weights: number[][],\n  incomingWeights: number[][],\n  inputDeltas: number[][]\n): number {\n  const lastChange: number = changes[this.thread.y][this.thread.x];\n  const inputDelta: number = inputDeltas[this.thread.y][0];\n  const weight: number = weights[this.thread.y][this.thread.x];\n  const incoming: number = incomingWeights[this.thread.x][0];\n\n  const change =\n    this.constants.learningRate * inputDelta * incoming +\n    this.constants.momentum * lastChange;\n  updateChange(change);\n  return weight + change;\n}\n\nexport interface IArthurDeviationWeightsSettings extends IPraxisSettings {\n  learningRate?: number;\n  momentum?: number;\n  weightsLayer?: ILayer | null;\n  incomingLayer?: ILayer | null;\n  deltaLayer?: ILayer | null;\n}\n\nexport interface IKernelMapResults extends ISubKernelsResults {\n  changes: KernelOutput;\n}\n\nexport const defaultSettings: IArthurDeviationWeightsSettings = {\n  learningRate: 0.3,\n  momentum: 0.1,\n  weightsLayer: null,\n  incomingLayer: null,\n  deltaLayer: null,\n};\n\nexport class ArthurDeviationWeights extends BasePraxis {\n  changes: KernelOutput;\n  kernelMap: IKernelMapRunShortcut<ISubKernelObject> | null = null;\n  settings: IArthurDeviationWeightsSettings;\n  get learningRate(): number {\n    return this.settings.learningRate as number;\n  }\n\n  get momentum(): number {\n    return this.settings.momentum as number;\n  }\n\n  get weightsLayer(): ILayer {\n    return this.settings.weightsLayer as ILayer;\n  }\n\n  set weightsLayer(layer: ILayer) {\n    this.settings.weightsLayer = layer;\n  }\n\n  get deltaLayer(): ILayer {\n    return this.settings.deltaLayer as ILayer;\n  }\n\n  set deltaLayer(layer: ILayer) {\n    this.settings.deltaLayer = layer;\n  }\n\n  get incomingLayer(): ILayer {\n    return this.settings.incomingLayer as ILayer;\n  }\n\n  set incomingLayer(layer: ILayer) {\n    this.settings.incomingLayer = layer;\n  }\n\n  constructor(layer: ILayer, settings?: IArthurDeviationWeightsSettings) {\n    super(layer);\n    this.settings = { ...defaultSettings, ...settings };\n    this.changes = zeros2D(layer.width, layer.height);\n  }\n\n  run(): KernelOutput {\n    const output = (this.kernelMap as IKernelMapRunShortcut<IKernelMapResults>)(\n      this.changes,\n      this.weightsLayer.weights,\n      this.incomingLayer.weights,\n      this.deltaLayer.deltas\n    );\n    this.changes = output.changes;\n    return output.result;\n  }\n\n  setupKernels(): void {\n    this.kernelMap = makeKernelMap<Parameters<typeof update>, IUpdateConstants>(\n      {\n        changes: updateChange,\n      },\n      update,\n      {\n        output: [this.width, this.height],\n        constants: {\n          learningRate: this.learningRate,\n          momentum: this.momentum,\n        },\n      }\n    );\n  }\n}\n\nexport function arthurDeviationWeights(\n  layer: ILayer,\n  settings?: Partial<IArthurDeviationWeightsSettings>\n): ArthurDeviationWeights {\n  return new ArthurDeviationWeights(layer, settings);\n}\n","import { BasePraxis, ILayerTemplate, IPraxisSettings } from './base-praxis';\n\nimport { makeKernelMap, release } from '../utilities/kernel';\nimport { zeros2D } from '../utilities/zeros-2d';\nimport {\n  IConstantsThis,\n  IKernelFunctionThis,\n  IKernelMapRunShortcut,\n  ISubKernelObject,\n  KernelOutput,\n} from 'gpu.js';\nimport { ILayer } from '../layer';\n\nexport function getMomentum(\n  delta: number,\n  decay: number,\n  previousMomentum: number\n): number {\n  return previousMomentum * decay + (1 - decay) * delta * delta;\n}\n\nexport function clipByValue(value: number, max: number, min: number): number {\n  if (value > max) {\n    return max;\n  }\n  if (value < min) {\n    return min;\n  }\n  return value;\n}\n\ninterface IUpdate extends IConstantsThis {\n  clipValue: number;\n  decayRate: number;\n  smoothEps: number;\n  regularizationStrength: number;\n}\n/**\n * @description Momentum Root Mean Square Propagation Function\n */\nexport function update(\n  this: IKernelFunctionThis<IUpdate>,\n  weights: number[][],\n  deltas: number[][],\n  previousMomenta: number[][]\n): number {\n  const delta = deltas[this.thread.y][this.thread.x];\n  const clippedDelta = clipByValue(\n    delta,\n    this.constants.clipValue,\n    -this.constants.clipValue\n  );\n  const weight = weights[this.thread.y][this.thread.x];\n  const previousMomentum = previousMomenta[this.thread.y][this.thread.x];\n  const momentum = getMomentum(\n    delta,\n    this.constants.decayRate,\n    previousMomentum\n  );\n  return (\n    weight +\n    (-this.constants.learningRate * clippedDelta) /\n      Math.sqrt(momentum + this.constants.smoothEps) -\n    this.constants.regularizationStrength * weight\n  );\n}\n\nexport function isClippedByValue(\n  value: number,\n  max: number,\n  min: number\n): number {\n  if (value > max) {\n    return 1;\n  }\n  if (value < min) {\n    return 1;\n  }\n  return 0;\n}\n\nexport interface IMomentumRootMeanSquaredPropagationSettings\n  extends IPraxisSettings {\n  decayRate?: number;\n  regularizationStrength?: number;\n  learningRate?: number;\n  smoothEps: number;\n  clipValue: number;\n}\n\nexport const defaults: IMomentumRootMeanSquaredPropagationSettings = {\n  decayRate: 0.999,\n  regularizationStrength: 0.0001,\n  learningRate: 0.01,\n  smoothEps: 1e-8,\n  clipValue: 5,\n};\n\nexport class MomentumRootMeanSquaredPropagation extends BasePraxis {\n  momenta: KernelOutput;\n  kernelMap: IKernelMapRunShortcut<ISubKernelObject> | null = null;\n  settings: Partial<IMomentumRootMeanSquaredPropagationSettings>;\n\n  get clipValue(): number {\n    return this.settings.clipValue as number;\n  }\n\n  get decayRate(): number {\n    return this.settings.decayRate as number;\n  }\n\n  get learningRate(): number {\n    return this.settings.learningRate as number;\n  }\n\n  get regularizationStrength(): number {\n    return this.settings.regularizationStrength as number;\n  }\n\n  get smoothEps(): number {\n    return this.settings.smoothEps as number;\n  }\n\n  constructor(\n    layerTemplate: ILayerTemplate,\n    settings: Partial<IMomentumRootMeanSquaredPropagationSettings> = {}\n  ) {\n    super(layerTemplate);\n    this.settings = { ...defaults, ...settings };\n    this.momenta = zeros2D(layerTemplate.width, layerTemplate.height);\n  }\n\n  run(layer: ILayer): KernelOutput {\n    const { momenta, result } = (this.kernelMap as IKernelMapRunShortcut<\n      ISubKernelObject\n    >)(layer.weights, layer.deltas, this.momenta);\n    release(this.momenta);\n    this.momenta = momenta;\n    return result;\n  }\n\n  setupKernels(): void {\n    this.kernelMap = makeKernelMap(\n      {\n        momenta: getMomentum,\n      },\n      update,\n      {\n        output: [this.width, this.height],\n        constants: {\n          clipValue: this.clipValue,\n          decayRate: this.decayRate,\n          learningRate: this.learningRate,\n          regularizationStrength: this.regularizationStrength,\n          smoothEps: this.smoothEps,\n        },\n        functions: [clipByValue],\n        immutable: true,\n      }\n    );\n  }\n}\n\nexport function momentumRootMeanSquaredPropagation(\n  layer: ILayer,\n  settings: Partial<IMomentumRootMeanSquaredPropagationSettings>\n): MomentumRootMeanSquaredPropagation {\n  return new MomentumRootMeanSquaredPropagation(layer, settings);\n}\n\n/**\n * @description Mathematician friendly name of MomentumRootMeanSquaredPropagation class. For those that are not mere mortals\n */\nexport const MRmsProp = MomentumRootMeanSquaredPropagation;\nexport const mRmsProp = momentumRootMeanSquaredPropagation;\n","import { ILayer } from '../layer/base-layer';\n\nexport function traverseLayersFrom(\n  layer: ILayer,\n  cb: (layer: ILayer) => void\n): void {\n  if (layer.hasOwnProperty('inputLayer')) {\n    traverseLayersFrom(\n      (layer as ILayer & { inputLayer: ILayer }).inputLayer,\n      cb\n    );\n  } else {\n    if (layer.hasOwnProperty('inputLayer1')) {\n      traverseLayersFrom(\n        (layer as ILayer & { inputLayer1: ILayer }).inputLayer1,\n        cb\n      );\n    }\n    if (layer.hasOwnProperty('inputLayer2')) {\n      traverseLayersFrom(\n        (layer as ILayer & { inputLayer2: ILayer }).inputLayer2,\n        cb\n      );\n    }\n  }\n  cb(layer);\n}\n","import { ILayer } from '../layer/base-layer';\nimport { traverseLayersFrom } from './traverse-layers-from';\n\nexport function flattenLayers(layers: ILayer[]): ILayer[] {\n  const result = layers.slice(0);\n  for (let i = 0; i < result.length; i++) {\n    let offset = 0;\n    traverseLayersFrom(result[i], (layer: ILayer) => {\n      if (!result.includes(layer)) {\n        result.splice(i + offset, 0, layer);\n        offset++;\n      }\n    });\n  }\n  return result;\n}\n","import { ILayer } from '../layer/base-layer';\n\nexport function checkSameSize(layer1: ILayer, layer2: ILayer): void {\n  if (layer1.width !== layer2.width) {\n    throw new Error(\n      `Layer width mismatch of ${layer1.width} and ${layer2.width}`\n    );\n  }\n\n  if (layer1.height !== layer2.height) {\n    throw new Error(\n      `Layer height mismatch of ${layer1.height} and ${layer2.height}`\n    );\n  }\n}\n","import { makeKernel, release, clone, clear } from '../utilities/kernel';\nimport { checkSameSize } from '../utilities/layer-size';\nimport { Operator } from './operator';\nimport { IKernelFunctionThis, IKernelRunShortcut, Texture } from 'gpu.js';\nimport { ILayerSettings, ILayer } from './base-layer';\n\nexport function predict(\n  this: IKernelFunctionThis,\n  inputWeights1: number[][],\n  inputWeights2: number[][]\n): number {\n  return (\n    inputWeights1[this.thread.y][this.thread.x] +\n    inputWeights2[this.thread.y][this.thread.x]\n  );\n}\n\nexport class Add extends Operator {\n  get width(): number {\n    return this.inputLayer1.width;\n  }\n\n  get height(): number {\n    return this.inputLayer1.height;\n  }\n\n  get depth(): number {\n    return this.inputLayer1.depth;\n  }\n\n  validate(): void {\n    super.validate();\n    checkSameSize(this.inputLayer1, this.inputLayer2);\n  }\n\n  setupKernels(): void {\n    this.predictKernel = makeKernel(predict, {\n      output: [this.width, this.height],\n      immutable: true,\n    });\n  }\n\n  predict(): void {\n    release(this.weights);\n    this.weights = (this.predictKernel as IKernelRunShortcut)(\n      this.inputLayer1.weights,\n      this.inputLayer2.weights\n    ) as Texture;\n    clear(this.deltas);\n  }\n\n  compare(): void {\n    // TODO: Do we need release and clone here?\n    release(this.inputLayer1.deltas);\n    release(this.inputLayer2.deltas);\n    this.inputLayer1.deltas = clone(this.deltas);\n    this.inputLayer2.deltas = clone(this.deltas);\n  }\n\n  learn(): void {}\n}\n\nexport function add(\n  inputLayer1: ILayer,\n  inputLayer2: ILayer,\n  settings?: ILayerSettings\n): Add {\n  return new Add(inputLayer1, inputLayer2, settings);\n}\n","export function randomWeight(): number {\n  return Math.random() * 0.4 - 0.2;\n}\n","/**\n * Returns a random float between given min and max bounds (inclusive)\n * @param min Minimum value of the ranfom float\n * @param max Maximum value of the random float\n */\nexport function randomFloat(min: number, max: number): number {\n  return Math.random() * (max - min) + min;\n}\n\n/**\n * Complicated math. All you need to know is that it returns a random number.\n * More info: https://en.wikipedia.org/wiki/Normal_distribution\n */\nexport function gaussRandom(): number {\n  if (gaussRandom.returnV) {\n    gaussRandom.returnV = false;\n    return gaussRandom.vVal;\n  }\n  const u = 2 * Math.random() - 1;\n  const v = 2 * Math.random() - 1;\n  const r = u * u + v * v;\n  if (r === 0 || r > 1) {\n    return gaussRandom();\n  }\n  const c = Math.sqrt((-2 * Math.log(r)) / r);\n  gaussRandom.vVal = v * c; // cache this\n  gaussRandom.returnV = true;\n  return u * c;\n}\n\n/**\n * Returns a random integer between given min and max bounds\n * @param min Minimum value of the random integer\n * @param max Maximum value of the random integer\n */\nexport function randomInteger(min: number, max: number): number {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\n/**\n * If you know what this is: https://en.wikipedia.org/wiki/Normal_distribution\n * @param mu\n * @param std\n */\nexport function randomN(mu: number, std: number): number {\n  return mu + gaussRandom() * std;\n}\n\ngaussRandom.returnV = false;\ngaussRandom.vVal = 0;\n","import { randomWeight } from './random-weight';\nimport { randomFloat } from './random';\n\n/**\n * Returns an array of given size, full of randomness\n */\nexport function randos(size: number, std: number | null = null): Float32Array {\n  const array: Float32Array = new Float32Array(size);\n  if (std === null) {\n    for (let i = 0; i < size; i++) {\n      array[i] = randomWeight();\n    }\n  } else {\n    for (let i = 0; i < size; i++) {\n      array[i] = randomFloat(-std, std);\n    }\n  }\n  return array;\n}\n\n/**\n * Returns a 2D matrix of given size, full of randomness\n */\nexport function randos2D(\n  width: number,\n  height: number,\n  std?: number | null\n): Float32Array[] {\n  const result: Float32Array[] = new Array(height);\n  for (let y = 0; y < height; y++) {\n    result[y] = randos(width, std);\n  }\n  return result;\n}\n\n/**\n * Returns a 3D tensor of given size, full of randomness\n */\nexport function randos3D(\n  width: number,\n  height: number,\n  depth: number,\n  std?: number | null\n): Float32Array[][] {\n  const result: Float32Array[][] = new Array(depth);\n  for (let z = 0; z < depth; z++) {\n    result[z] = randos2D(width, height, std);\n  }\n  return result;\n}\n","import { randos2D } from '../utilities/randos';\nimport { zeros2D } from '../utilities/zeros-2d';\nimport { baseLayerDefaultSettings, ILayer, ILayerSettings } from './base-layer';\nimport { Model } from './types';\n\nexport interface IRandomSettings extends ILayerSettings {\n  std?: number | null;\n}\n\nexport const defaults: IRandomSettings = {\n  ...baseLayerDefaultSettings,\n  std: null,\n};\n\nexport class Random extends Model implements ILayer {\n  settings: IRandomSettings;\n  constructor(settings: Partial<IRandomSettings>) {\n    super();\n    this.settings = { ...defaults, ...settings };\n    this.setupPraxis();\n    this.validate();\n\n    if (!this.weights) {\n      this.weights = randos2D(this.width, this.height, settings.std);\n    }\n    if (!this.deltas) {\n      this.deltas = zeros2D(this.width, this.height);\n    }\n  }\n\n  predict(): void {}\n\n  compare(): void {}\n}\n\nexport function random(settings: IRandomSettings): Random {\n  return new Random(settings);\n}\n","import { makeKernel, release, clear } from '../utilities/kernel';\nimport { Operator } from './operator';\nimport {\n  IConstantsThis,\n  IKernelFunctionThis,\n  IKernelRunShortcut,\n  Texture,\n} from 'gpu.js';\nimport { ILayer, ILayerJSON, ILayerSettings } from './base-layer';\n\nexport interface IMultiplyConstants extends IConstantsThis {\n  size: number;\n}\n\nexport function predict(\n  this: IKernelFunctionThis<IMultiplyConstants>,\n  weights1: number[][],\n  weights2: number[][]\n): number {\n  let sum = 0;\n  for (let i = 0; i < this.constants.size; i++) {\n    sum += weights1[this.thread.y][i] * weights2[i][this.thread.x];\n  }\n  return sum;\n}\n\nexport function compareFromX(\n  this: IKernelFunctionThis<IMultiplyConstants>,\n  deltas: number[][],\n  inputDeltas: number[][],\n  inputWeights: number[][]\n): number {\n  let sum = inputDeltas[this.thread.y][this.thread.x];\n  for (let i = 0; i < this.constants.size; i++) {\n    sum += deltas[this.thread.y][i] * inputWeights[this.thread.x][i];\n  }\n  return sum;\n}\n\nexport function compareFromY(\n  this: IKernelFunctionThis<IMultiplyConstants>,\n  deltas: number[][],\n  inputDeltas: number[][],\n  inputWeights: number[][]\n): number {\n  let sum = inputDeltas[this.thread.y][this.thread.x];\n  for (let i = 0; i < this.constants.size; i++) {\n    sum += deltas[i][this.thread.x] * inputWeights[i][this.thread.y];\n  }\n  return sum;\n}\n\nexport class Multiply extends Operator {\n  compareKernel1: IKernelRunShortcut | null = null;\n  compareKernel2: IKernelRunShortcut | null = null;\n\n  get width(): number {\n    return this.inputLayer2.width;\n  }\n\n  set width(width: number) {\n    throw new Error('Cannot set width on Multiply');\n  }\n\n  get height(): number {\n    return this.inputLayer1.height;\n  }\n\n  set height(height: number) {\n    throw new Error('Cannot set height on Multiply');\n  }\n\n  get depth(): number {\n    return this.inputLayer1.depth;\n  }\n\n  set depth(depth: number) {\n    throw new Error('Cannot set depth on Multiply');\n  }\n\n  validate(): void {\n    super.validate();\n    if (this.inputLayer1.width !== this.inputLayer2.height) {\n      throw new Error(\n        `Layer width mismatch of ${this.inputLayer1.width} and ${this.inputLayer2.height}`\n      );\n    }\n  }\n\n  setupKernels(): void {\n    this.predictKernel = makeKernel(predict, {\n      output: [this.width, this.height],\n      constants: {\n        size: this.inputLayer2.height,\n      },\n      immutable: true,\n    });\n    this.compareKernel1 = makeKernel(compareFromX, {\n      output: [this.inputLayer1.width, this.inputLayer1.height],\n      constants: {\n        size: this.inputLayer2.width,\n      },\n      immutable: true,\n    });\n    this.compareKernel2 = makeKernel(compareFromY, {\n      output: [this.inputLayer2.width, this.inputLayer2.height],\n      constants: {\n        size: this.inputLayer1.height,\n      },\n      immutable: true,\n    });\n  }\n\n  reuseKernels(layer: ILayer): void {\n    super.reuseKernels(layer);\n    this.compareKernel1 = (layer as Multiply).compareKernel1;\n    this.compareKernel2 = (layer as Multiply).compareKernel2;\n  }\n\n  predict(): void {\n    release(this.weights);\n    if (!this.predictKernel) throw new Error('this.predictKernel is not set');\n    this.weights = this.predictKernel(\n      this.inputLayer1.weights,\n      this.inputLayer2.weights\n    ) as Texture;\n    clear(this.deltas);\n  }\n\n  compare(): void {\n    if (!this.compareKernel1) throw new Error('this.compareKernel1 not set');\n    if (!this.compareKernel2) throw new Error('this.compareKernel2 not set');\n\n    const inputLayer1Deltas = this.inputLayer1.deltas;\n    const inputLayer2Deltas = this.inputLayer2.deltas;\n\n    const newDeltas1 = this.compareKernel1(\n      this.deltas,\n      this.inputLayer1.deltas,\n      this.inputLayer2.weights\n    );\n    const newDeltas2 = this.compareKernel2(\n      this.deltas,\n      this.inputLayer2.deltas,\n      this.inputLayer1.weights\n    );\n\n    this.inputLayer2.deltas = newDeltas2 as Texture;\n    this.inputLayer1.deltas = newDeltas1 as Texture;\n\n    release(inputLayer1Deltas);\n    release(inputLayer2Deltas);\n  }\n\n  setupPraxis(): void {}\n  learn(): void {}\n\n  toJSON(): Partial<ILayerJSON> {\n    return {\n      ...super.toJSON(),\n      width: this.width,\n      height: this.height,\n    };\n  }\n}\n\nexport function multiply(\n  inputLayer1: ILayer,\n  inputLayer2: ILayer,\n  settings?: ILayerSettings\n): Multiply {\n  return new Multiply(inputLayer1, inputLayer2, settings);\n}\n","import { ILayer, ILayerSettings } from './base-layer';\nimport { IKernelFunctionThis, IKernelRunShortcut } from 'gpu.js';\n\nimport { Activation } from './types';\nimport { makeKernel, release, clear } from '../utilities/kernel';\nimport { activate, measure } from '../activation/sigmoid';\n\nexport function predict2D(\n  this: IKernelFunctionThis,\n  inputs: number[][]\n): number {\n  return 1 / (1 + Math.exp(-inputs[this.thread.y][this.thread.x]));\n}\n\nexport function predict3D(\n  this: IKernelFunctionThis,\n  inputs: number[][][]\n): number {\n  return (\n    1 / (1 + Math.exp(-inputs[this.thread.z][this.thread.y][this.thread.x]))\n  );\n}\n\nexport function compare2D(\n  this: IKernelFunctionThis,\n  weights: number[][],\n  deltas: number[][]\n): number {\n  const weight = weights[this.thread.y][this.thread.x];\n  const delta = deltas[this.thread.y][this.thread.x];\n  return weight * (1 - weight) * delta;\n}\n\nexport function compare3D(\n  this: IKernelFunctionThis,\n  weights: number[][][],\n  deltas: number[][][]\n): number {\n  const weight = weights[this.thread.z][this.thread.y][this.thread.x];\n  const delta = deltas[this.thread.z][this.thread.y][this.thread.x];\n  return weight * (1 - weight) * delta;\n}\n\nexport class Sigmoid extends Activation {\n  setupKernels(): void {\n    if (this.depth > 0) {\n      this.predictKernel = makeKernel(predict3D, {\n        output: [this.width, this.height, this.depth],\n        functions: [activate],\n        immutable: true,\n      });\n\n      this.compareKernel = makeKernel(compare3D, {\n        output: [this.width, this.height, this.depth],\n        functions: [measure],\n        immutable: true,\n      });\n    } else {\n      this.predictKernel = makeKernel(predict2D, {\n        output: [this.width, this.height],\n        functions: [activate],\n        immutable: true,\n      });\n\n      this.compareKernel = makeKernel(compare2D, {\n        output: [this.width, this.height],\n        functions: [measure],\n        immutable: true,\n      });\n    }\n  }\n\n  predict(): void {\n    release(this.weights);\n    this.weights = (this.predictKernel as IKernelRunShortcut)(\n      this.inputLayer.weights\n    );\n    clear(this.deltas);\n  }\n\n  compare(): void {\n    release(this.inputLayer.deltas);\n    this.inputLayer.deltas = (this.compareKernel as IKernelRunShortcut)(\n      this.weights,\n      this.deltas\n    );\n  }\n}\n\nexport function sigmoid(\n  inputLayer: ILayer,\n  settings?: ILayerSettings\n): Sigmoid {\n  return new Sigmoid(inputLayer, settings);\n}\n","import {\n  ArthurDeviationWeights,\n  arthurDeviationWeights,\n  IArthurDeviationWeightsSettings,\n} from '../praxis/arthur-deviation-weights';\nimport {\n  arthurDeviationBiases,\n  IArthurDeviationBiasesSettings,\n} from '../praxis/arthur-deviation-biases';\nimport { ILayer } from './base-layer';\nimport { add } from './add';\nimport { IRandomSettings, random } from './random';\nimport { multiply } from './multiply';\nimport { Sigmoid, sigmoid } from './sigmoid';\nimport { IPraxis } from '../praxis/base-praxis';\n\nexport interface IArthurFeedForwardPraxisSettings\n  extends IArthurDeviationBiasesSettings,\n    IArthurDeviationWeightsSettings {}\n\nexport interface IArthurFeedForwardSettings extends IRandomSettings {\n  initPraxis?: (\n    layerTemplate: ILayer,\n    settings?: IArthurFeedForwardPraxisSettings | null\n  ) => IPraxis;\n}\n\nexport function arthurFeedForward(\n  settings: IArthurFeedForwardPraxisSettings,\n  inputLayer: ILayer\n): Sigmoid {\n  const { height } = settings;\n  function initWeightsPraxis(\n    layerTemplate: ILayer,\n    settings?: IArthurDeviationWeightsSettings\n  ): IPraxis {\n    const praxis = arthurDeviationWeights(layerTemplate, settings);\n    praxis.setupKernels();\n    return praxis;\n  }\n  function initBiasesPraxis(\n    layerTemplate: ILayer,\n    settings?: IArthurDeviationBiasesSettings\n  ): IPraxis {\n    const praxis = arthurDeviationBiases(layerTemplate, settings);\n    praxis.setupKernels();\n    return praxis;\n  }\n  const weightsLayer = random({\n    id: 'weights',\n    height,\n    width: inputLayer.height,\n    initPraxis: initWeightsPraxis,\n  });\n\n  const biasesLayer = random({\n    id: 'biases',\n    height,\n    initPraxis: initBiasesPraxis,\n  });\n\n  const multiplyLayer = multiply(weightsLayer, inputLayer);\n  const addLayer = add(multiplyLayer, biasesLayer);\n  const sigmoidLayer = sigmoid(addLayer);\n\n  const weightsPraxis = weightsLayer.praxis as ArthurDeviationWeights;\n  weightsPraxis.weightsLayer = weightsLayer;\n  weightsPraxis.incomingLayer = inputLayer;\n  weightsPraxis.deltaLayer = sigmoidLayer;\n  return sigmoidLayer;\n}\n","import { IConvolutionSettingsBase } from '../layer/convolution';\n\nexport interface IStride {\n  strideX: number;\n  strideY: number;\n}\n\nexport function getStride(\n  settings: IConvolutionSettingsBase,\n  defaults: IConvolutionSettingsBase\n): IStride {\n  if (typeof settings.stride === 'number') {\n    return { strideX: settings.stride, strideY: settings.stride };\n  } else {\n    let strideX: number = defaults.stride as number;\n    let strideY: number = defaults.stride as number;\n    if (typeof settings.strideX === 'number') {\n      strideX = settings.strideX;\n    }\n    if (typeof settings.strideY === 'number') {\n      strideY = settings.strideY;\n    }\n    return { strideX, strideY };\n  }\n}\n\nexport interface IPadding {\n  paddingX: number;\n  paddingY: number;\n}\n\nexport function getPadding(\n  settings: IConvolutionSettingsBase,\n  defaults: IConvolutionSettingsBase\n): IPadding {\n  if (typeof settings.padding === 'number') {\n    return { paddingX: settings.padding, paddingY: settings.padding };\n  } else {\n    let paddingX: number = defaults.padding as number;\n    let paddingY: number = defaults.padding as number;\n    if (typeof settings.paddingX === 'number') {\n      paddingX = settings.paddingX;\n    }\n    if (typeof settings.paddingY === 'number') {\n      paddingY = settings.paddingY;\n    }\n    return { paddingX, paddingY };\n  }\n}\n","/**\n * Returns an array of a given size with each element filled with a single value\n */\nexport function values(size: number, value: number): Float32Array {\n  return new Float32Array(size).fill(value);\n}\n","import { makeKernel, release, clone, clear } from '../utilities/kernel';\nimport { getStride, getPadding } from '../utilities/layer-setup';\nimport { Filter } from './filter';\nimport { randos, randos3D } from '../utilities/randos';\nimport { zeros3D } from '../utilities/zeros-3d';\nimport { values } from '../utilities/values';\nimport {\n  IConstantsThis,\n  IKernelFunctionThis,\n  IKernelRunShortcut,\n  KernelOutput,\n} from 'gpu.js';\nimport { ILayer, ILayerSettings } from './base-layer';\nimport { IPraxis } from '../praxis/base-praxis';\n\nexport interface IConvolutionConstantsBase extends IConstantsThis {\n  paddingX: number;\n  paddingY: number;\n  strideX: number;\n  strideY: number;\n  filterWidth: number;\n  filterHeight: number;\n}\n\nexport interface IPredictConstants extends IConvolutionConstantsBase {\n  inputWidth: number;\n  inputHeight: number;\n}\n\nexport function predict(\n  this: IKernelFunctionThis<IPredictConstants>,\n  inputs: number[][][],\n  filters: number[][][],\n  biases: number[]\n): number {\n  const startFilterX =\n    this.constants.paddingX - this.thread.x * this.constants.strideX;\n  const startInputX =\n    this.thread.x * this.constants.strideX - this.constants.paddingX;\n  const endFilterX = Math.min(\n    this.constants.filterWidth,\n    startFilterX + this.constants.inputWidth\n  );\n\n  const startFilterY =\n    this.constants.paddingY - this.thread.y * this.constants.strideY;\n  const startInputY =\n    this.thread.y * this.constants.strideY - this.constants.paddingY;\n  const endFilterY = Math.min(\n    this.constants.filterHeight,\n    startFilterY + this.constants.inputHeight\n  );\n\n  let sum = 0;\n  for (let z = 0; z < this.constants.inputDepth; z++) {\n    for (\n      let filterY = Math.max(0, startFilterY),\n        inputY = Math.max(0, startInputY);\n      filterY < endFilterY;\n      filterY++, inputY++\n    ) {\n      for (\n        let filterX = Math.max(0, startFilterX),\n          inputX = Math.max(0, startInputX);\n        filterX < endFilterX;\n        filterX++, inputX++\n      ) {\n        sum += filters[z][filterY][filterX] * inputs[z][inputY][inputX];\n      }\n    }\n  }\n  return sum + biases[this.thread.z];\n}\n\nexport interface ICompareFilterDeltasConstants\n  extends IConvolutionConstantsBase {\n  deltaWidth: number;\n  deltaHeight: number;\n  inputWidth: number;\n  inputHeight: number;\n  deltaZ: number;\n}\n\nexport function compareFilterDeltas(\n  this: IKernelFunctionThis<ICompareFilterDeltasConstants>,\n  filterDeltas: number[][][],\n  inputs: number[][][],\n  deltas: number[][][]\n): number {\n  const startDeltaX = Math.max(\n    0,\n    Math.ceil(\n      (this.constants.paddingX - this.thread.x) / this.constants.strideX\n    )\n  );\n  const startInputX =\n    startDeltaX * this.constants.strideX +\n    this.thread.x -\n    this.constants.paddingX;\n  const endDeltaX = Math.min(\n    this.constants.deltaWidth,\n    Math.floor(\n      (this.constants.inputWidth -\n        1 -\n        this.thread.x +\n        this.constants.paddingX) /\n        this.constants.strideX\n    ) + 1\n  );\n\n  const startDeltaY = Math.max(\n    0,\n    Math.ceil(\n      (this.constants.paddingY - this.thread.y) / this.constants.strideY\n    )\n  );\n  const startInputY =\n    startDeltaY * this.constants.strideY +\n    this.thread.y -\n    this.constants.paddingY;\n  const endDeltaY = Math.min(\n    this.constants.deltaHeight,\n    Math.floor(\n      (this.constants.inputHeight -\n        1 -\n        this.thread.y +\n        this.constants.paddingY) /\n        this.constants.strideY\n    ) + 1\n  );\n\n  let sum = filterDeltas[this.thread.z][this.thread.y][this.thread.x];\n  for (\n    let deltaY = startDeltaY, inputY = startInputY;\n    deltaY < endDeltaY;\n    deltaY++, inputY += this.constants.strideY\n  ) {\n    for (\n      let deltaX = startDeltaX, inputX = startInputX;\n      deltaX < endDeltaX;\n      deltaX++, inputX += this.constants.strideX\n    ) {\n      sum +=\n        inputs[this.thread.z][inputY][inputX] *\n        deltas[this.constants.deltaZ][deltaY][deltaX];\n    }\n  }\n  return sum;\n}\n\nexport interface ICompareInputDeltasConstants\n  extends IConvolutionConstantsBase {\n  deltaHeight: number;\n  deltaWidth: number;\n  deltaZ: number;\n}\n\nexport function compareInputDeltas(\n  this: IKernelFunctionThis<ICompareInputDeltasConstants>,\n  inputDeltas: number[][][],\n  filters: number[][][],\n  deltas: number[][][]\n): number {\n  const x = this.thread.x + this.constants.paddingX;\n  const startDeltaX =\n    x < this.constants.filterWidth\n      ? 0\n      : Math.floor(\n          (x - this.constants.filterWidth + this.constants.strideX) /\n            this.constants.strideX\n        );\n  const startFilterX = x - startDeltaX * this.constants.strideX;\n  const endDeltaX = Math.min(\n    startDeltaX + Math.floor(startFilterX / this.constants.strideX) + 1,\n    this.constants.deltaWidth\n  );\n\n  const y = this.thread.y + this.constants.paddingY;\n  const startDeltaY =\n    y < this.constants.filterHeight\n      ? 0\n      : Math.floor(\n          (y - this.constants.filterHeight + this.constants.strideY) /\n            this.constants.strideY\n        );\n  const startFilterY = y - startDeltaY * this.constants.strideY;\n  const endDeltaY = Math.min(\n    startDeltaY + Math.floor(startFilterY / this.constants.strideY) + 1,\n    this.constants.deltaHeight\n  );\n\n  let sum = inputDeltas[this.thread.z][this.thread.y][this.thread.x];\n  let deltaY = startDeltaY;\n  for (\n    let filterY = startFilterY;\n    deltaY < endDeltaY;\n    filterY -= this.constants.strideY, deltaY++\n  ) {\n    let deltaX = startDeltaX;\n    for (\n      let filterX = startFilterX;\n      deltaX < endDeltaX;\n      filterX -= this.constants.strideX, deltaX++\n    ) {\n      sum +=\n        filters[this.thread.z][filterY][filterX] *\n        deltas[this.constants.deltaZ][deltaY][deltaX];\n    }\n  }\n  return sum;\n}\n\nexport interface ICompareBiasesConstants extends IConstantsThis {\n  deltaHeight: number;\n  deltaWdith: number;\n}\n\nexport function compareBiases(\n  this: IKernelFunctionThis<ICompareBiasesConstants>,\n  biasDeltas: number[][][],\n  deltas: number[][][]\n): number {\n  let sum = 0;\n  for (let y = 0; y < this.constants.deltaHeight; y++) {\n    for (let x = 0; x < this.constants.deltaWidth; x++) {\n      sum += deltas[this.thread.z][y][x];\n    }\n  }\n  return biasDeltas[this.thread.z][this.thread.y][this.thread.x] + sum;\n}\n\nexport interface IConvolutionSettingsBase {\n  stride?: number;\n  strideX?: number;\n  strideY?: number;\n  padding?: number;\n  paddingX?: number;\n  paddingY?: number;\n  filterCount?: number;\n  filterWidth?: number;\n  filterHeight?: number;\n}\n\nexport interface IConvolutionSettings\n  extends ILayerSettings,\n    IConvolutionSettingsBase {\n  bias?: number;\n  biases?: KernelOutput;\n  biasDeltas?: KernelOutput;\n  filters?: KernelOutput;\n  filterDeltas?: KernelOutput;\n}\n\nexport const defaults: IConvolutionSettings = {\n  stride: 0,\n  padding: 0,\n  bias: 0.1,\n  filterCount: 1,\n  filterWidth: 0,\n  filterHeight: 0,\n};\n\nexport class Convolution extends Filter {\n  settings: Partial<IConvolutionSettings>;\n\n  get strideX(): number {\n    return this.settings.strideX as number;\n  }\n\n  get strideY(): number {\n    return this.settings.strideY as number;\n  }\n\n  get paddingX(): number {\n    return this.settings.paddingX as number;\n  }\n\n  get paddingY(): number {\n    return this.settings.paddingX as number;\n  }\n\n  get width(): number {\n    return Math.floor(\n      (this.inputLayer.width + this.paddingX * 2 - this.filterWidth) /\n        this.strideX +\n        1\n    );\n  }\n\n  get height(): number {\n    return Math.floor(\n      (this.inputLayer.height + this.paddingY * 2 - this.filterHeight) /\n        this.strideY +\n        1\n    );\n  }\n\n  get bias(): number {\n    return this.settings.bias as number;\n  }\n\n  get depth(): number {\n    return this.filterCount;\n  }\n\n  get biases(): KernelOutput {\n    return this.settings.biases;\n  }\n\n  set biases(biases: KernelOutput) {\n    this.settings.biases = biases;\n  }\n\n  get biasDeltas(): KernelOutput {\n    return this.settings.biasDeltas;\n  }\n\n  set biasDeltas(weights: KernelOutput) {\n    this.settings.biasDeltas = weights;\n  }\n\n  get filters(): KernelOutput {\n    return this.settings.filters;\n  }\n\n  set filters(filters: KernelOutput) {\n    this.settings.filters = filters;\n  }\n\n  get filterDeltas(): KernelOutput {\n    return this.settings.filterDeltas;\n  }\n\n  set filterDeltas(filterDeltas: KernelOutput) {\n    this.settings.filterDeltas = filterDeltas;\n  }\n\n  constructor(settings: IConvolutionSettings, inputLayer: ILayer) {\n    super(settings, inputLayer);\n    this.settings = {\n      ...defaults,\n      ...settings,\n      ...getPadding(settings, defaults),\n      ...getStride(settings, defaults),\n    };\n\n    this.weights =\n      settings.weights ?? randos3D(this.width, this.height, this.depth);\n    this.deltas = zeros3D(this.width, this.height, this.depth);\n\n    this.biases = values(this.depth, this.bias);\n    this.biasDeltas = settings.biasDeltas ?? randos(this.depth);\n\n    this.filters =\n      settings.filters ??\n      randos3D(this.filterWidth, this.filterHeight, this.filterCount);\n    this.filterDeltas = zeros3D(\n      this.filterWidth,\n      this.filterHeight,\n      this.filterCount\n    );\n    this.validate();\n  }\n\n  compareFilterDeltasKernel: IKernelRunShortcut | null = null;\n  compareInputDeltasKernel: IKernelRunShortcut | null = null;\n  compareBiasesKernel: IKernelRunShortcut | null = null;\n  setupKernels(): void {\n    this.predictKernel = makeKernel<\n      Parameters<typeof predict>,\n      IPredictConstants\n    >(predict, {\n      constants: {\n        inputWidth: this.inputLayer.width,\n        inputHeight: this.inputLayer.height,\n        inputDepth: this.inputLayer.depth,\n        strideX: this.strideX,\n        strideY: this.strideY,\n        paddingX: this.paddingX,\n        paddingY: this.paddingY,\n        filterWidth: this.filterWidth,\n        filterHeight: this.filterHeight,\n      },\n      output: [this.width, this.height, this.depth],\n      immutable: true,\n    });\n\n    this.compareFilterDeltasKernel = makeKernel(compareFilterDeltas, {\n      constants: {\n        deltasWidth: this.width,\n        deltasHeight: this.height,\n        deltasDepth: this.depth,\n        inputWidth: this.inputLayer.width,\n        inputHeight: this.inputLayer.height,\n        inputDepth: this.inputLayer.depth,\n        strideX: this.strideX,\n        strideY: this.strideY,\n        paddingX: this.paddingX,\n        paddingY: this.paddingY,\n        filterWidth: this.filterWidth,\n        filterHeight: this.filterHeight,\n      },\n      output: [this.width, this.height, this.depth],\n      immutable: true,\n    });\n\n    this.compareInputDeltasKernel = makeKernel(compareInputDeltas, {\n      constants: {\n        filterCount: this.filterCount,\n      },\n      output: [\n        this.inputLayer.width,\n        this.inputLayer.height,\n        this.inputLayer.depth,\n      ],\n      immutable: true,\n    });\n\n    this.compareBiasesKernel = makeKernel(compareBiases, {\n      output: [1, 1, this.depth],\n      constants: {\n        deltaWidth: this.width,\n        deltaHeight: this.height,\n      },\n      immutable: true,\n    });\n  }\n\n  predict(): void {\n    this.weights = (this.predictKernel as IKernelRunShortcut)(\n      this.inputLayer.weights,\n      this.filters,\n      this.biases\n    );\n  }\n\n  compare(): void {\n    const { filterDeltas, biasDeltas } = this;\n    this.filterDeltas = (this.compareFilterDeltasKernel as IKernelRunShortcut)(\n      filterDeltas,\n      this.inputLayer.weights,\n      this.deltas\n    );\n    release(filterDeltas);\n    this.biasDeltas = (this.compareBiasesKernel as IKernelRunShortcut)(\n      biasDeltas,\n      this.deltas\n    );\n    release(biasDeltas);\n    release(this.deltas);\n    this.deltas = (this.compareInputDeltasKernel as IKernelRunShortcut)(\n      this.filters,\n      this.inputLayer.deltas\n    );\n\n    release(this.inputLayer.deltas);\n    // TODO: do we need to clone here?\n    this.inputLayer.deltas = clone(this.deltas);\n  }\n\n  learn(learningRate: number): void {\n    // TODO: handle filters\n    // TODO: do we need to release here?\n    const { weights: oldWeights } = this;\n    this.weights = (this.praxis as IPraxis).run(this, learningRate);\n    release(oldWeights);\n    clear(this.deltas);\n  }\n}\n\nexport function convolution(\n  settings: IConvolutionSettings,\n  inputLayer: ILayer\n): Convolution {\n  return new Convolution(settings, inputLayer);\n}\n","import { Filter, IFilterSettings } from './filter';\nimport { makeKernel, makeKernelMap, release } from '../utilities/kernel';\nimport {\n  IConstantsThis,\n  IKernelFunctionThis,\n  IKernelMapRunShortcut,\n  IKernelRunShortcut,\n  ISubKernelObject,\n  KernelOutput,\n} from 'gpu.js';\nimport { ILayer, ILayerSettings, baseLayerDefaultSettings } from './base-layer';\n\nexport function setDropout(dropout: number): number {\n  return dropout;\n}\n\nexport interface IDropoutConstants extends IConstantsThis {\n  probability: number;\n}\n\nexport function trainingPredict(\n  this: IKernelFunctionThis<IDropoutConstants>,\n  inputs: number[][]\n): number {\n  if (setDropout(Math.random()) < this.constants.probability) {\n    return 0;\n  }\n  return inputs[this.thread.y][this.thread.x];\n}\n\nexport function predict(\n  this: IKernelFunctionThis<IDropoutConstants>,\n  inputs: number[][]\n): number {\n  return inputs[this.thread.y][this.thread.x] * this.constants.probability;\n}\n\nexport function compare(\n  this: IKernelFunctionThis,\n  dropouts: number[][],\n  deltas: number[][]\n): number {\n  if (dropouts[this.thread.y][this.thread.x] === 0) {\n    return 0;\n  }\n  return deltas[this.thread.y][this.thread.x];\n}\n\nexport interface IDropoutSettings extends ILayerSettings {\n  probability: number;\n}\n\nexport const dropoutDefaults: IDropoutSettings = {\n  ...baseLayerDefaultSettings,\n  probability: 0.5,\n};\n\nexport class Dropout extends Filter {\n  dropouts: KernelOutput | null;\n  predictKernelMap: IKernelMapRunShortcut<ISubKernelObject> | null = null;\n  settings: Partial<IDropoutSettings>;\n  constructor(\n    inputLayer: ILayer,\n    settings?: Partial<IDropoutSettings> & Partial<IFilterSettings>\n  ) {\n    super(settings as Partial<IFilterSettings>, inputLayer);\n    this.settings = { ...dropoutDefaults, ...settings };\n    this.dropouts = null;\n    this.validate();\n  }\n\n  setupKernels(isTraining?: boolean): void {\n    const output = [this.width, this.height];\n\n    if (isTraining) {\n      this.predictKernelMap = makeKernelMap<\n        Parameters<typeof trainingPredict>,\n        IDropoutConstants\n      >({ dropouts: setDropout }, trainingPredict, {\n        output,\n        immutable: true,\n      });\n      this.compareKernel = makeKernel(compare, { output, immutable: true });\n    } else {\n      this.predictKernelMap = makeKernelMap<\n        Parameters<typeof predict>,\n        IDropoutConstants\n      >({}, predict, { output, immutable: true });\n    }\n  }\n\n  predict(): void {\n    release(this.weights);\n    if (this.dropouts) {\n      release(this.dropouts);\n    }\n    const { result, dropouts } = (this\n      .predictKernelMap as IKernelMapRunShortcut<ISubKernelObject>)(\n      this.inputLayer.weights\n    );\n    this.weights = result;\n    this.dropouts = dropouts;\n  }\n\n  compare(): void {\n    release(this.deltas);\n    this.deltas = (this.compareKernel as IKernelRunShortcut)(\n      this.dropouts as KernelOutput,\n      this.inputLayer.deltas\n    );\n  }\n}\n\nexport function dropout(\n  inputLayer: ILayer,\n  settings?: Partial<IDropoutSettings>\n): Dropout {\n  return new Dropout(inputLayer, settings);\n}\n","import { random } from './random';\nimport { add } from './add';\nimport { multiply } from './multiply';\nimport { sigmoid } from './sigmoid';\nimport { ILayer, ILayerSettings } from './base-layer';\n\nexport function feedForward(settings: ILayerSettings, input: ILayer): ILayer {\n  const { height, praxisOpts = null } = settings;\n  const weights = random({\n    id: 'weights',\n    height,\n    width: input.height,\n    praxisOpts,\n  });\n  const biases = random({ id: 'biases', height, praxisOpts });\n  return sigmoid(\n    add(multiply(weights, input, { praxisOpts }), biases, { praxisOpts }),\n    { praxisOpts }\n  );\n}\n","import {\n  IConstantsThis,\n  IKernelFunctionThis,\n  IKernelRunShortcut,\n  KernelOutput,\n} from 'gpu.js';\nimport { Filter, IFilterSettings } from './filter';\nimport { makeKernel, release } from '../utilities/kernel';\nimport { values } from '../utilities/values';\nimport { randos2D, randos3D } from '../utilities/randos';\nimport { zeros } from '../utilities/zeros';\nimport { zeros2D } from '../utilities/zeros-2d';\nimport { zeros3D } from '../utilities/zeros-3d';\nimport { ILayer } from './base-layer';\n\nexport interface IPredictConstants extends IConstantsThis {\n  inputWidth: number;\n  inputHeight: number;\n}\n\nexport function predict(\n  this: IKernelFunctionThis<IPredictConstants>,\n  inputs: number[][],\n  filters: number[][],\n  biases: number[]\n): number {\n  let output = 0;\n  let i = 0;\n  for (let y = 0; y < this.constants.inputHeight; y++) {\n    for (let x = 0; x < this.constants.inputWidth; x++) {\n      output += inputs[y][x] * filters[this.thread.x][i];\n      i++;\n    }\n  }\n  return output + biases[this.thread.x];\n}\n\nexport function predict3D(\n  this: IKernelFunctionThis<IPredictConstants>,\n  inputs: number[][][],\n  filters: number[][],\n  biases: number[]\n): number {\n  let output = 0;\n  let i = 0;\n  for (let z = 0; z < this.constants.inputDepth; z++) {\n    for (let y = 0; y < this.constants.inputHeight; y++) {\n      for (let x = 0; x < this.constants.inputWidth; x++) {\n        output += inputs[z][y][x] * filters[this.thread.x][i];\n        i++;\n      }\n    }\n  }\n  return output + biases[this.thread.x];\n}\n\nexport interface ICompareInputDeltasConstants extends IConstantsThis {\n  filterCount: number;\n}\n\nexport function compareInputDeltas(\n  this: IKernelFunctionThis<ICompareInputDeltasConstants>,\n  inputDeltas: number[][],\n  deltas: number[][],\n  filters: number[][]\n): number {\n  let sum = 0;\n  const filterX = this.thread.x + this.thread.y * this.output.x;\n  for (let filterY = 0; filterY < this.constants.filterCount; filterY++) {\n    sum += filters[filterY][filterX] * deltas[0][filterY];\n  }\n  return sum + inputDeltas[this.thread.y][this.thread.x];\n}\n\nexport function compareInputDeltas3D(\n  this: IKernelFunctionThis<ICompareInputDeltasConstants>,\n  inputDeltas: number[][][],\n  deltas: number[][],\n  filters: number[][]\n): number {\n  let sum = 0;\n  const filterX = this.thread.x + this.thread.y * this.output.x;\n  for (let filterY = 0; filterY < this.constants.filterCount; filterY++) {\n    sum += filters[filterY][filterX] * deltas[0][filterY];\n  }\n  return sum + inputDeltas[this.thread.z][this.thread.y][this.thread.x];\n}\n\nexport function compareBiases(\n  this: IKernelFunctionThis,\n  biases: number[],\n  deltas: number[][]\n): number {\n  return biases[this.thread.x] + deltas[this.thread.y][this.thread.x];\n}\n\nexport interface ICompareFiltersDeltas extends IConstantsThis {\n  deltaX: number;\n  deltaY: number;\n  inputWidth: number;\n  inputHeight: number;\n}\n\nexport function compareFilterDeltas(\n  this: IKernelFunctionThis<ICompareFiltersDeltas>,\n  filterDeltas: number[][],\n  inputWeights: number[][],\n  deltas: number[][]\n): number {\n  return (\n    filterDeltas[this.thread.y][this.thread.x] +\n    inputWeights[this.thread.y][this.thread.x] *\n      deltas[this.constants.deltaY][this.constants.deltaX]\n  );\n}\n\nexport function compareFilterDeltas3D(\n  this: IKernelFunctionThis<ICompareFiltersDeltas>,\n  filterDeltas: number[][],\n  inputWeights: number[][][],\n  deltas: number[][]\n): number {\n  const inputZ = Math.floor(\n    this.thread.x / (this.constants.inputWidth * this.constants.inputHeight)\n  );\n  const inputY = Math.floor(\n    (this.thread.x -\n      inputZ * this.constants.inputWidth * this.constants.inputHeight) /\n      this.constants.inputWidth\n  );\n  const inputX =\n    this.thread.x -\n    this.constants.inputWidth * (inputY + this.constants.inputHeight * inputZ);\n  return (\n    filterDeltas[this.thread.y][this.thread.x] +\n    inputWeights[inputZ][inputY][inputX] * deltas[0][this.thread.y]\n  );\n}\n\nexport interface IFullyConnectedDefaultSettings\n  extends Partial<IFilterSettings> {\n  bias?: number;\n  biases?: KernelOutput;\n  biasDeltas?: KernelOutput;\n}\n\nexport const defaults: IFullyConnectedDefaultSettings = {\n  bias: 0.1,\n};\n\nexport class FullyConnected extends Filter {\n  get bias(): number {\n    return this.settings.bias as number;\n  }\n\n  get biases(): KernelOutput {\n    return this.settings.biases;\n  }\n\n  set biases(biases: KernelOutput) {\n    this.settings.biases = biases;\n  }\n\n  get biasDeltas(): KernelOutput {\n    return this.settings.biases;\n  }\n\n  set biasDeltas(biasDeltas: KernelOutput) {\n    this.settings.biasDeltas = biasDeltas;\n  }\n\n  settings: Partial<IFullyConnectedDefaultSettings>;\n  compareFilterDeltasKernel: IKernelRunShortcut | null = null;\n  compareInputDeltasKernel: IKernelRunShortcut | null = null;\n  compareBiasesKernel: IKernelRunShortcut | null = null;\n  constructor(\n    settings: Partial<IFullyConnectedDefaultSettings>,\n    inputLayer: ILayer\n  ) {\n    super(settings, inputLayer);\n    this.settings = { ...settings };\n    this.validate();\n\n    const connectionCount =\n      inputLayer.width * inputLayer.height * inputLayer.depth;\n\n    this.biases = values(this.height, this.bias);\n    this.biasDeltas = zeros(this.height);\n\n    this.filters = randos2D(connectionCount, this.height);\n    this.filterDeltas = zeros2D(connectionCount, this.height);\n\n    if (this.depth > 0) {\n      this.weights = randos3D(this.width, this.height, this.depth);\n      this.deltas = zeros3D(this.width, this.height, this.depth);\n    } else if (this.height > 0) {\n      this.weights = randos2D(this.width, this.height);\n      this.deltas = zeros2D(this.width, this.height);\n    }\n  }\n\n  validate(): void {\n    super.validate();\n    if (this.depth > 0) throw new Error('depth not supported');\n  }\n\n  setupKernels(): void {\n    const { inputLayer } = this;\n    const connectionCount =\n      inputLayer.width * inputLayer.height * inputLayer.depth;\n    if (inputLayer.depth > 0) {\n      this.predictKernel = makeKernel(predict3D, {\n        output: [this.width, this.height],\n        constants: {\n          inputHeight: inputLayer.height,\n          inputWidth: inputLayer.width,\n          inputDepth: inputLayer.depth,\n        },\n      });\n\n      this.compareFilterDeltasKernel = makeKernel(compareFilterDeltas3D, {\n        output: [connectionCount, this.height],\n        constants: {\n          inputWidth: inputLayer.width,\n          inputHeight: inputLayer.height,\n        },\n        immutable: true,\n      });\n\n      this.compareInputDeltasKernel = makeKernel(compareInputDeltas3D, {\n        output: [inputLayer.width, inputLayer.height, inputLayer.depth],\n        constants: {\n          filterCount: this.height,\n        },\n        immutable: true,\n      });\n    } else {\n      this.predictKernel = makeKernel(predict, {\n        output: [this.width, this.height],\n        constants: {\n          inputHeight: inputLayer.height,\n          inputWidth: inputLayer.width,\n        },\n      });\n\n      this.compareFilterDeltasKernel = makeKernel(compareFilterDeltas, {\n        output: [connectionCount, this.height],\n        constants: {\n          inputWidth: inputLayer.width,\n        },\n      });\n\n      this.compareInputDeltasKernel = makeKernel(compareInputDeltas, {\n        output: [inputLayer.width, inputLayer.height],\n        constants: {\n          filterCount: this.height,\n        },\n      });\n    }\n\n    this.compareBiasesKernel = makeKernel(compareBiases, {\n      output: [this.width, this.height],\n    });\n  }\n\n  predict(): void {\n    this.weights = (this.predictKernel as IKernelRunShortcut)(\n      this.inputLayer.weights,\n      this.filters,\n      this.biases\n    );\n  }\n\n  compare(): void {\n    const inputLayerDeltas = this.inputLayer.deltas;\n    this.inputLayer.deltas = (this\n      .compareInputDeltasKernel as IKernelRunShortcut)(\n      inputLayerDeltas,\n      this.deltas,\n      this.filters\n    );\n    release(inputLayerDeltas);\n\n    const { biasDeltas, filterDeltas } = this;\n    // TODO: handle biasDeltas learn\n    this.biasDeltas = (this.compareBiasesKernel as IKernelRunShortcut)(\n      this.biases,\n      this.deltas\n    );\n\n    // TODO: handle filterDeltas learn\n    this.filterDeltas = (this.compareFilterDeltasKernel as IKernelRunShortcut)(\n      filterDeltas,\n      this.inputLayer.weights,\n      this.deltas\n    );\n    release(biasDeltas);\n    release(filterDeltas);\n  }\n}\n\nexport function fullyConnected(\n  settings: IFullyConnectedDefaultSettings,\n  inputLayer: ILayer\n): FullyConnected {\n  return new FullyConnected(settings, inputLayer);\n}\n","import { makeKernel } from '../utilities/kernel';\nimport { Modifier } from './types';\nimport { IKernelFunctionThis, IKernelRunShortcut } from 'gpu.js';\nimport { ILayer, ILayerSettings } from './base-layer';\n\nexport function predict(\n  this: IKernelFunctionThis,\n  weights: number[][]\n): number {\n  return -weights[this.thread.y][this.thread.x];\n}\n\nexport class Negative extends Modifier {\n  constructor(inputLayer: ILayer, settings?: ILayerSettings) {\n    super(inputLayer, settings);\n    this.validate();\n  }\n\n  setupKernels(): void {\n    this.predictKernel = makeKernel(predict, {\n      output: [this.width, this.height],\n    });\n  }\n\n  predict(): void {\n    this.weights = (this.predictKernel as IKernelRunShortcut)(\n      this.inputLayer.weights\n    );\n  }\n}\n\nexport function negative(\n  inputLayer: ILayer,\n  settings?: ILayerSettings\n): Negative {\n  return new Negative(inputLayer, settings);\n}\n","import { makeKernel, release, clear } from '../utilities/kernel';\nimport { Operator } from './operator';\nimport { checkSameSize } from '../utilities/layer-size';\nimport { ILayer, ILayerSettings } from './base-layer';\nimport { IKernelFunctionThis, IKernelRunShortcut } from 'gpu.js';\n\nexport function predict(\n  this: IKernelFunctionThis,\n  inputLayerWeights1: number[][],\n  inputLayerWeights2: number[][]\n): number {\n  return (\n    inputLayerWeights1[this.thread.y][this.thread.x] *\n    inputLayerWeights2[this.thread.y][this.thread.x]\n  );\n}\n\nexport function compare(\n  this: IKernelFunctionThis,\n  weights: number[][],\n  deltas: number[][]\n): number {\n  return (\n    weights[this.thread.y][this.thread.x] * deltas[this.thread.y][this.thread.x]\n  );\n}\n\nexport class MultiplyElement extends Operator {\n  get width(): number {\n    return this.inputLayer1.width;\n  }\n\n  get height(): number {\n    return this.inputLayer1.height;\n  }\n\n  get depth(): number {\n    return this.inputLayer1.depth;\n  }\n\n  validate(): void {\n    super.validate();\n    checkSameSize(this.inputLayer1, this.inputLayer2);\n  }\n\n  setupKernels(): void {\n    this.predictKernel = makeKernel(predict, {\n      output: [this.width, this.height],\n      immutable: true,\n    });\n\n    this.compareKernel = makeKernel(compare, {\n      output: [this.width, this.height],\n      immutable: true,\n    });\n  }\n\n  predict(): void {\n    release(this.weights);\n    this.weights = (this.predictKernel as IKernelRunShortcut)(\n      this.inputLayer1.weights,\n      this.inputLayer2.weights\n    );\n    clear(this.deltas);\n  }\n\n  compare(): void {\n    release(this.inputLayer1.deltas);\n    release(this.inputLayer2.deltas);\n    this.inputLayer1.deltas = (this.compareKernel as IKernelRunShortcut)(\n      this.inputLayer2.weights,\n      this.deltas\n    );\n    this.inputLayer2.deltas = (this.compareKernel as IKernelRunShortcut)(\n      this.inputLayer1.weights,\n      this.deltas\n    );\n  }\n}\n\nexport function multiplyElement(\n  inputLayer1: ILayer,\n  inputLayer2: ILayer,\n  settings?: ILayerSettings\n): MultiplyElement {\n  return new MultiplyElement(inputLayer1, inputLayer2, settings);\n}\n","export function ones(size: number): Float32Array {\n  return new Float32Array(size).fill(1);\n}\n\nexport function ones2D(width: number, height: number): Float32Array[] {\n  const result = new Array(height);\n  for (let y = 0; y < height; y++) {\n    result[y] = ones(width);\n  }\n  return result;\n}\n","import { ILayerSettings } from './base-layer';\n\nimport { ones2D } from '../utilities/ones';\nimport { zeros2D } from '../utilities/zeros-2d';\nimport { Model } from './types';\n\nexport class Ones extends Model {\n  constructor(settings: ILayerSettings) {\n    super(settings);\n    this.validate();\n    this.weights = ones2D(this.width, this.height);\n    this.deltas = zeros2D(this.width, this.height);\n  }\n}\n\nexport function ones(settings: ILayerSettings): Ones {\n  return new Ones(settings);\n}\n","import { IKernelFunctionThis, IKernelRunShortcut } from 'gpu.js';\n\nimport { Activation } from './activation';\nimport { activate, measure } from '../activation/tanh';\nimport { release, clear, makeKernel } from '../utilities/kernel';\nimport { ILayer, ILayerSettings } from './base-layer';\n\nexport function predict2D(\n  this: IKernelFunctionThis,\n  inputs: number[][]\n): number {\n  return activate(inputs[this.thread.y][this.thread.x]);\n}\n\nexport function predict3D(\n  this: IKernelFunctionThis,\n  inputs: number[][][]\n): number {\n  return activate(inputs[this.thread.z][this.thread.y][this.thread.x]);\n}\n\nexport function compare2D(\n  this: IKernelFunctionThis,\n  weights: number[][],\n  errors: number[][]\n): number {\n  return measure(\n    weights[this.thread.y][this.thread.x],\n    errors[this.thread.y][this.thread.x]\n  );\n}\n\nexport function compare3D(\n  this: IKernelFunctionThis,\n  weights: number[][][],\n  errors: number[][][]\n): number {\n  return measure(\n    weights[this.thread.z][this.thread.y][this.thread.x],\n    errors[this.thread.z][this.thread.y][this.thread.x]\n  );\n}\n\nexport class Tanh extends Activation {\n  setupKernels(): void {\n    if (this.depth > 0) {\n      this.predictKernel = makeKernel(predict3D, {\n        output: [this.width, this.height, this.depth],\n        functions: [activate],\n        immutable: true,\n      });\n\n      this.compareKernel = makeKernel(compare3D, {\n        output: [this.width, this.height, this.depth],\n        functions: [measure],\n        immutable: true,\n      });\n    } else {\n      this.predictKernel = makeKernel(predict2D, {\n        output: [this.width, this.height],\n        functions: [activate],\n        immutable: true,\n      });\n\n      this.compareKernel = makeKernel(compare2D, {\n        output: [this.width, this.height],\n        functions: [measure],\n        immutable: true,\n      });\n    }\n  }\n\n  predict(): void {\n    release(this.weights);\n    this.weights = (this.predictKernel as IKernelRunShortcut)(\n      this.inputLayer.weights\n    );\n    clear(this.deltas);\n  }\n\n  compare(): void {\n    release(this.inputLayer.deltas);\n    this.inputLayer.deltas = (this.compareKernel as IKernelRunShortcut)(\n      this.weights,\n      this.deltas\n    );\n  }\n}\n\nexport function tanh(inputLayer: ILayer, settings?: ILayerSettings): Tanh {\n  return new Tanh(inputLayer, settings);\n}\n","import { zeros2D } from '../utilities/zeros-2d';\nimport { Model } from './types';\nimport { ILayerSettings } from './base-layer';\n\nexport class Zeros extends Model {\n  constructor(settings: ILayerSettings) {\n    super(settings);\n    this.validate();\n    this.weights = zeros2D(this.width, this.height);\n    this.deltas = zeros2D(this.width, this.height);\n  }\n\n  predict(): void {\n    // throw new Error(`${this.constructor.name}-predict is not yet implemented`)\n  }\n\n  compare(): void {\n    // throw new Error(`${this.constructor.name}-compare is not yet implemented`)\n  }\n}\n\nexport function zeros(settings: ILayerSettings): Zeros {\n  return new Zeros(settings);\n}\n","import { add } from './add';\nimport { negative } from './negative';\nimport { multiply } from './multiply';\nimport { multiplyElement } from './multiply-element';\nimport { ones } from './ones';\nimport { sigmoid } from './sigmoid';\nimport { random } from './random';\nimport { tanh } from './tanh';\nimport { zeros } from './zeros';\nimport { ILayer, ILayerSettings } from './base-layer';\nimport { RecurrentInput } from './recurrent-input';\n\nexport function gru(\n  settings: ILayerSettings,\n  recurrentInput: RecurrentInput,\n  input: ILayer\n): ILayer {\n  const { height } = settings;\n  const updateGateWeights = random({ height, width: input.height });\n  const updateGatePeepholes = random({ width: height, height });\n  const updateGateBias = zeros({ height });\n  const updateGate = sigmoid(\n    add(\n      add(\n        multiply(updateGateWeights, input),\n        multiply(updateGatePeepholes, recurrentInput)\n      ),\n      updateGateBias\n    )\n  );\n\n  const resetGateWeights = random({ height, width: input.height });\n  const resetGatePeepholes = random({ width: height, height });\n  const resetGateBias = zeros({ height });\n  const resetGate = sigmoid(\n    add(\n      add(\n        multiply(resetGateWeights, input),\n        multiply(resetGatePeepholes, recurrentInput)\n      ),\n      resetGateBias\n    )\n  );\n\n  const cellWeights = random({ height, width: input.height });\n  const cellPeepholes = random({ width: height, height });\n  const cellBias = zeros({ height });\n  const cell = tanh(\n    add(\n      add(\n        multiply(cellWeights, input),\n        multiply(cellPeepholes, multiplyElement(resetGate, recurrentInput))\n      ),\n      cellBias\n    )\n  );\n\n  // compute hidden state as gated, saturated cell activations\n  // negate updateGate\n  return add(\n    multiplyElement(\n      add(\n        ones({ width: updateGate.width, height: updateGate.height }),\n        negative(updateGate)\n      ),\n      cell\n    ),\n    multiplyElement(recurrentInput, updateGate)\n  );\n}\n","import { IKernelFunctionThis, IKernelRunShortcut, KernelOutput } from 'gpu.js';\nimport { EntryPoint } from './types';\nimport { ILayer, ILayerSettings } from './base-layer';\nimport { zeros2D } from '../utilities/zeros-2d';\nimport {\n  makeKernel,\n  release,\n  kernelInput,\n  clear,\n  clone,\n} from '../utilities/kernel';\n\nexport const defaults: ILayerSettings = {\n  weights: null,\n};\n\nexport class Input extends EntryPoint {\n  reshapeInput: IKernelRunShortcut | null = null;\n  constructor(settings: ILayerSettings) {\n    super({ ...defaults, ...settings });\n    this.validate();\n    this.reshapeInput = null;\n    this.deltas = zeros2D(this.width, this.height);\n  }\n\n  setupKernels(): void {\n    if (this.width === 1) {\n      this.predict = this.predict1D;\n      this.reshapeInput = makeKernel(\n        function (this: IKernelFunctionThis, value: number[]) {\n          return value[this.thread.y];\n        },\n        {\n          output: [1, this.height],\n          immutable: true,\n        }\n      );\n    }\n  }\n\n  reuseKernels(layer: ILayer): void {\n    // super.reuseKernels(layer);\n    this.reshapeInput = (layer as Input).reshapeInput;\n  }\n\n  predict(inputs: KernelOutput): void {\n    if (\n      (Array.isArray(inputs) || inputs instanceof Float32Array) &&\n      typeof inputs[0] === 'number' &&\n      inputs.length === this.height * this.width\n    ) {\n      release(this.weights);\n      this.weights = kernelInput(inputs as number[], [this.width, this.height]);\n    } else if (\n      Array.isArray(inputs) &&\n      inputs.length === this.height &&\n      (Array.isArray(inputs[0]) || inputs[0] instanceof Float32Array) &&\n      inputs[0].length === this.width\n    ) {\n      this.weights = clone(inputs);\n    } else {\n      throw new Error('Inputs are not of sized correctly');\n    }\n    clear(this.deltas);\n  }\n\n  predict1D(inputs: KernelOutput): void {\n    if (this.weights) release(this.weights);\n    if (this.reshapeInput) {\n      this.weights = this.reshapeInput(inputs);\n    } else {\n      this.weights = inputs;\n    }\n    clear(this.deltas);\n  }\n\n  compare(): void {\n    // throw new Error(`${this.constructor.name}-compare is not yet implemented`)\n  }\n}\n\nexport function input(settings: ILayerSettings): Input {\n  return new Input(settings);\n}\n","import { Activation } from './types';\nimport { makeKernel, release, clear } from '../utilities/kernel';\nimport { activate, measure } from '../activation/leaky-relu';\nimport { IKernelFunctionThis, IKernelRunShortcut } from 'gpu.js';\nimport { ILayer, ILayerSettings } from './base-layer';\n\nexport function predict2D(\n  this: IKernelFunctionThis,\n  inputs: number[][]\n): number {\n  return activate(inputs[this.thread.y][this.thread.x]);\n}\n\nexport function predict3D(\n  this: IKernelFunctionThis,\n  inputs: number[][][]\n): number {\n  return activate(inputs[this.thread.z][this.thread.y][this.thread.x]);\n}\n\nexport function compare2D(\n  this: IKernelFunctionThis,\n  weights: number[][],\n  deltas: number[][]\n): number {\n  return measure(\n    weights[this.thread.y][this.thread.x],\n    deltas[this.thread.y][this.thread.x]\n  );\n}\n\nexport function compare3D(\n  this: IKernelFunctionThis,\n  weights: number[][][],\n  deltas: number[][][]\n): number {\n  return measure(\n    weights[this.thread.z][this.thread.y][this.thread.x],\n    deltas[this.thread.z][this.thread.y][this.thread.x]\n  );\n}\n\nexport class LeakyRelu extends Activation {\n  setupKernels(): void {\n    const { width, height, depth } = this.inputLayer;\n    if (this.depth > 0) {\n      this.predictKernel = makeKernel(predict3D, {\n        output: [width, height, depth],\n        functions: [activate],\n        immutable: true,\n      });\n\n      this.compareKernel = makeKernel(compare3D, {\n        output: [width, height, depth],\n        functions: [measure],\n        immutable: true,\n      });\n    } else {\n      this.predictKernel = makeKernel(predict2D, {\n        output: [width, height],\n        functions: [activate],\n        immutable: true,\n      });\n\n      this.compareKernel = makeKernel(compare2D, {\n        output: [width, height],\n        functions: [measure],\n        immutable: true,\n      });\n    }\n  }\n\n  predict(): void {\n    release(this.weights);\n    this.weights = (this.predictKernel as IKernelRunShortcut)(\n      this.inputLayer.weights\n    );\n    clear(this.deltas);\n  }\n\n  compare(): void {\n    const { deltas } = this;\n    this.deltas = (this.compareKernel as IKernelRunShortcut)(\n      this.weights,\n      deltas\n    );\n    release(deltas);\n  }\n}\n\nexport function leakyRelu(\n  inputLayer: ILayer,\n  settings: ILayerSettings\n): LeakyRelu {\n  return new LeakyRelu(inputLayer, settings);\n}\n","import { add } from './add';\nimport { multiply } from './multiply';\nimport { multiplyElement } from './multiply-element';\nimport { random } from './random';\nimport { sigmoid } from './sigmoid';\nimport { tanh } from './tanh';\nimport { zeros } from './zeros';\nimport { ILayer, ILayerSettings } from './base-layer';\nimport { IRecurrentInput } from './recurrent-input';\n\nexport function lstmCell(\n  settings: ILayerSettings,\n  input: ILayer,\n  recurrentInput: IRecurrentInput\n): ILayer {\n  const { height } = settings;\n\n  if (typeof height !== 'number') {\n    throw new Error('no settings.height given');\n  }\n  if (recurrentInput.setDimensions) {\n    recurrentInput.setDimensions(1, height);\n  }\n\n  const inputGateWeights = random({\n    height,\n    width: input.height,\n    std: 0.08,\n    id: 'inputGateWeights',\n  });\n  const inputGatePeepholes = random({\n    width: height,\n    height,\n    std: 0.08,\n    id: 'inputGatePeepholes',\n  });\n  const inputGateBias = zeros({ height, id: 'inputGateBias' });\n  const inputGate = sigmoid(\n    add(\n      add(\n        multiply(inputGateWeights, input),\n        multiply(inputGatePeepholes, recurrentInput)\n      ),\n      inputGateBias\n    ),\n    { id: 'inputGate' }\n  );\n\n  const forgetGateWeights = random({\n    height,\n    width: input.height,\n    std: 0.08,\n    id: 'forgetGateWeights',\n  });\n  const forgetGatePeepholes = random({\n    width: height,\n    height,\n    std: 0.08,\n    id: 'forgetGatePeepholes',\n  });\n  const forgetGateBias = zeros({ height, id: 'forgetGateBias' });\n  const forgetGate = sigmoid(\n    add(\n      add(\n        multiply(forgetGateWeights, input),\n        multiply(forgetGatePeepholes, recurrentInput)\n      ),\n      forgetGateBias\n    ),\n    { id: 'forgetGate' }\n  );\n\n  const outputGateWeights = random({\n    height,\n    width: input.height,\n    std: 0.08,\n    id: 'outputGateWeights',\n  });\n  const outputGatePeepholes = random({\n    width: height,\n    height,\n    std: 0.08,\n    id: 'outputGatePeepholes',\n  });\n  const outputGateBias = zeros({ height, id: 'outputGateBias' });\n  const outputGate = sigmoid(\n    add(\n      add(\n        multiply(outputGateWeights, input),\n        multiply(outputGatePeepholes, recurrentInput)\n      ),\n      outputGateBias\n    ),\n    { id: 'outputGate' }\n  );\n\n  const memoryWeights = random({\n    height,\n    width: input.height,\n    std: 0.08,\n    id: 'memoryWeights',\n  });\n  const memoryPeepholes = random({\n    width: height,\n    height,\n    std: 0.08,\n    id: 'memoryPeepholes',\n  });\n  const memoryBias = zeros({ height, id: 'memoryBias' });\n  const memory = tanh(\n    add(\n      add(\n        multiply(memoryWeights, input),\n        multiply(memoryPeepholes, recurrentInput)\n      ),\n      memoryBias\n    ),\n    { id: 'memory' }\n  );\n\n  // compute new cell activation\n  const retainCell = multiplyElement(forgetGate, recurrentInput, {\n    id: 'retainCell',\n  }); // what do we keep from cell\n  const writeCell = multiplyElement(inputGate, memory, { id: 'writeCell' }); // what do we write to cell\n  const cell = add(retainCell, writeCell, { id: 'cell' }); // new cell contents\n\n  // compute hidden state as gated, saturated cell activations\n  return multiplyElement(outputGate, tanh(cell), { id: 'activations' });\n}\n","import { add } from './add';\nimport { multiply } from './multiply';\nimport { random } from './random';\nimport { target } from './target';\nimport { ILayer, ILayerSettings } from './base-layer';\n\nexport function output(settings: ILayerSettings, inputLayer: ILayer): ILayer {\n  const { height } = settings;\n  const outputGate = random({\n    height,\n    width: inputLayer.height,\n    id: 'outputGate',\n    std: 0.08,\n  });\n  const output = random({ height, id: 'output', std: 0.08 });\n  const outputGateConnector = multiply(outputGate, inputLayer, {\n    id: 'outputGateConnected',\n  });\n  return target(\n    { id: 'target', ...settings },\n    add(outputGateConnector, output)\n  );\n}\n","import { Filter } from './filter';\nimport { makeKernel, makeKernelMap, release } from '../utilities/kernel';\nimport { getPadding, getStride } from '../utilities/layer-setup';\nimport { zeros3D } from '../utilities/zeros-3d';\nimport { randos3D } from '../utilities/randos';\nimport {\n  IConstantsThis,\n  IKernelFunctionThis,\n  IKernelMapRunShortcut,\n  IKernelRunShortcut,\n  ISubKernelObject,\n  KernelOutput,\n} from 'gpu.js';\nimport {\n  IConvolutionSettingsBase,\n  IConvolutionConstantsBase,\n} from './convolution';\nimport { ILayer, ILayerSettings } from './base-layer';\n\nexport function setSwitchY(value: number): number {\n  return value;\n}\n\nexport function setSwitchX(value: number): number {\n  return value;\n}\n\nexport interface IPredictConstants extends IConvolutionConstantsBase {\n  inputWidth: number;\n  inputHeight: number;\n}\n\nexport function predict(\n  this: IKernelFunctionThis<IPredictConstants>,\n  inputs: number[][][]\n): number {\n  const startFilterX =\n    this.constants.paddingX - this.thread.x * this.constants.strideX;\n  const startInputX =\n    this.thread.x * this.constants.strideX - this.constants.paddingX;\n  const endFilterX = Math.min(\n    this.constants.filterWidth,\n    startFilterX + this.constants.inputWidth\n  );\n\n  const startFilterY =\n    this.constants.paddingY - this.thread.y * this.constants.strideY;\n  const startInputY =\n    this.thread.y * this.constants.strideY - this.constants.paddingY;\n  const endFilterY = Math.min(\n    this.constants.filterHeight,\n    startFilterY + this.constants.inputHeight\n  );\n\n  let largestValue = -99999;\n  let largestX = -1;\n  let largestY = -1;\n\n  // convolve centered at this particular location\n  for (\n    let filterY = Math.max(0, startFilterY), inputY = Math.max(0, startInputY);\n    filterY < endFilterY;\n    filterY++, inputY++\n  ) {\n    for (\n      let filterX = Math.max(0, startFilterX),\n        inputX = Math.max(0, startInputX);\n      filterX < endFilterX;\n      filterX++, inputX++\n    ) {\n      if (\n        inputY >= 0 &&\n        inputY < this.constants.inputHeight &&\n        inputX >= 0 &&\n        inputX < this.constants.inputWidth\n      ) {\n        const input = inputs[this.thread.z][inputY][inputX];\n        if (input > largestValue) {\n          largestValue = input;\n          largestY = inputY;\n          largestX = inputX;\n        }\n      }\n    }\n  }\n  setSwitchY(largestY);\n  setSwitchX(largestX);\n  return largestValue;\n}\n\nexport interface ICompareConstants extends IConstantsThis {\n  inputWidth: number;\n  inputHeight: number;\n\n  outputWidth: number;\n  outputHeight: number;\n}\n\nexport function compare(\n  this: IKernelFunctionThis<ICompareConstants>,\n  deltas: number[][],\n  switchY: number[][],\n  switchX: number[][]\n): number {\n  const x = Math.floor(\n    (this.thread.x / this.output.x) * this.constants.outputWidth\n  );\n  const y = Math.floor(\n    (this.thread.y / this.output.y) * this.constants.outputHeight\n  );\n\n  let value = 0;\n\n  for (let deltasY = 0; deltasY < this.constants.inputHeight; deltasY++) {\n    for (let deltasX = 0; deltasX < this.constants.inputWidth; deltasX++) {\n      const switchXValue = switchX[deltasY][deltasX];\n      const switchYValue = switchY[deltasY][deltasX];\n      if (switchXValue === x && switchYValue === y) {\n        value += deltas[deltasY][deltasX];\n      }\n    }\n  }\n\n  return value;\n}\n\nexport function compare3D(\n  this: IKernelFunctionThis<ICompareConstants>,\n  deltas: number[][][],\n  switchY: number[][][],\n  switchX: number[][][]\n): number {\n  const x = Math.floor(\n    (this.thread.x / this.output.x) * this.constants.outputWidth\n  );\n  const y = Math.floor(\n    (this.thread.y / this.output.y) * this.constants.outputHeight\n  );\n\n  let value = 0;\n\n  for (let deltasY = 0; deltasY < this.constants.inputHeight; deltasY++) {\n    for (let deltasX = 0; deltasX < this.constants.inputWidth; deltasX++) {\n      const switchXValue = switchX[this.thread.z][deltasY][deltasX];\n      const switchYValue = switchY[this.thread.z][deltasY][deltasX];\n      if (switchXValue === x && switchYValue === y) {\n        value += deltas[this.thread.z][deltasY][deltasX];\n      }\n    }\n  }\n\n  return value;\n}\n\nexport interface IPoolSettings\n  extends ILayerSettings,\n    IConvolutionSettingsBase {\n  switchX?: KernelOutput;\n  switchY?: KernelOutput;\n}\n\nexport const defaults: IPoolSettings = {\n  padding: 0,\n  stride: 0,\n  filterWidth: 0,\n  filterHeight: 0,\n  filterCount: 0,\n};\n\nexport class Pool extends Filter {\n  settings: Partial<IPoolSettings>;\n\n  get strideX(): number {\n    return this.settings.strideX as number;\n  }\n\n  get strideY(): number {\n    return this.settings.strideY as number;\n  }\n\n  get paddingX(): number {\n    return this.settings.paddingX as number;\n  }\n\n  get paddingY(): number {\n    return this.settings.paddingY as number;\n  }\n\n  get width(): number {\n    return Math.floor(\n      (this.inputLayer.width + this.paddingX * 2 - this.filterWidth) /\n        this.strideX +\n        1\n    );\n  }\n\n  get height(): number {\n    return Math.floor(\n      (this.inputLayer.height + this.paddingY * 2 - this.filterHeight) /\n        this.strideY +\n        1\n    );\n  }\n\n  get depth(): number {\n    return this.settings.filterCount as number;\n  }\n\n  get filterCount(): number {\n    // TODO: handle 1 depth?\n    return this.settings.filterCount as number;\n  }\n\n  get switchX(): KernelOutput {\n    return this.settings.switchX;\n  }\n\n  set switchX(switchX: KernelOutput) {\n    this.settings.switchX = switchX;\n  }\n\n  get switchY(): KernelOutput {\n    return this.settings.switchY;\n  }\n\n  set switchY(switchY: KernelOutput) {\n    this.settings.switchY = switchY;\n  }\n\n  predictKernelMap: IKernelMapRunShortcut<ISubKernelObject> | null = null;\n  constructor(settings: IPoolSettings, inputLayer: ILayer) {\n    super(settings, inputLayer);\n    this.settings = {\n      ...settings,\n      ...getStride(settings, defaults),\n      ...getPadding(settings, defaults),\n    };\n\n    this.weights = randos3D(this.width, this.height, this.depth);\n    this.deltas = zeros3D(this.width, this.height, this.depth);\n\n    this.filters = randos3D(\n      this.filterWidth,\n      this.filterHeight,\n      this.filterCount\n    );\n    this.filterDeltas = zeros3D(\n      this.filterWidth,\n      this.filterHeight,\n      this.filterCount\n    );\n    this.validate();\n  }\n\n  setupKernels(): void {\n    this.predictKernelMap = makeKernelMap<\n      Parameters<typeof predict>,\n      IPredictConstants\n    >(\n      {\n        switchX: setSwitchX,\n        switchY: setSwitchY,\n      },\n      predict,\n      {\n        output: [this.width, this.height, this.depth],\n        constants: {\n          inputWidth: this.inputLayer.width,\n          inputHeight: this.inputLayer.height,\n          paddingX: this.paddingX,\n          paddingY: this.paddingY,\n          filterHeight: this.filterHeight,\n          filterWidth: this.filterWidth,\n        },\n      }\n    );\n\n    this.compareKernel = makeKernel(compare, {\n      output: [\n        this.inputLayer.width,\n        this.inputLayer.height,\n        this.inputLayer.depth,\n      ],\n      constants: {\n        inputWidth: this.inputLayer.width,\n        inputHeight: this.inputLayer.height,\n\n        outputWidth: this.width,\n        outputHeight: this.height,\n      },\n    });\n  }\n\n  predict(): void {\n    const { result: weights, switchX, switchY } = (this\n      .predictKernelMap as IKernelMapRunShortcut<ISubKernelObject>)(\n      this.inputLayer.weights\n    );\n    this.switchX = switchX;\n    this.switchY = switchY;\n    this.weights = weights;\n  }\n\n  compare(): void {\n    // debugger;\n    // const depth = this.inputLayer.deltas.length;\n    // const height = this.inputLayer.deltas[0].length;\n    // const width = this.inputLayer.deltas[0][0].length;\n    // const type = typeof this.inputLayer.deltas[0][0][0];\n    const inputLayerDeltas = this.inputLayer.deltas;\n    this.inputLayer.deltas = (this.compareKernel as IKernelRunShortcut)(\n      this.deltas,\n      this.switchX,\n      this.switchY\n    );\n    release(inputLayerDeltas);\n    // debugger;\n    // if (depth !== this.inputLayer.deltas.length) debugger;\n    // if (height !== this.inputLayer.deltas[0].length) debugger;\n    // if (width !== this.inputLayer.deltas[0][0].length) debugger;\n    // if (type !== typeof this.inputLayer.deltas[0][0][0]) debugger;\n  }\n}\n\nexport function pool(settings: IPoolSettings, inputLayer: ILayer): Pool {\n  return new Pool(settings, inputLayer);\n}\n","import { KernelOutput } from 'gpu.js';\nimport { IPraxis } from '../praxis/base-praxis';\nimport { release } from '../utilities/kernel';\nimport { BaseLayer, ILayer } from './base-layer';\nimport { Internal } from './internal';\n\nexport interface IRecurrentInput extends ILayer {\n  setDimensions?: (width: number, height: number) => void;\n}\n\nexport class RecurrentInput extends Internal implements IRecurrentInput {\n  recurrentInput: ILayer;\n  praxis: IPraxis | null = null;\n  predictKernel = null;\n  compareKernel = null;\n  settings = {};\n  constructor(recurrentInput: ILayer) {\n    super();\n    this.recurrentInput = recurrentInput;\n    this.validate();\n  }\n\n  get width(): number {\n    return this.recurrentInput.width;\n  }\n\n  get height(): number {\n    return this.recurrentInput.height;\n  }\n\n  get depth(): number {\n    return this.recurrentInput.depth;\n  }\n\n  get deltas(): KernelOutput {\n    return this.recurrentInput.deltas;\n  }\n\n  set deltas(deltas: KernelOutput) {\n    const recurrentInputDeltas = this.recurrentInput.deltas;\n    this.recurrentInput.deltas = deltas;\n    release(recurrentInputDeltas);\n  }\n\n  get weights(): KernelOutput {\n    return this.recurrentInput.weights as KernelOutput;\n  }\n\n  set weights(weights: KernelOutput) {\n    const recurrentInputWeights = this.recurrentInput.weights;\n    this.recurrentInput.weights = weights;\n    release(recurrentInputWeights);\n  }\n\n  validate(): void {\n    BaseLayer.prototype.validate.call(this);\n    if (this.width !== this.recurrentInput.width) {\n      throw new Error(\n        `${this.constructor.name} layer width ${this.width} and ${this.recurrentInput.constructor.name} width (${this.recurrentInput.width}) are not same`\n      );\n    }\n\n    if (this.height !== this.recurrentInput.height) {\n      throw new Error(\n        `${this.constructor.name} layer height ${this.height} and ${this.recurrentInput.constructor.name} width (${this.recurrentInput.height}) are not same`\n      );\n    }\n  }\n\n  setDimensions(width: number, height: number): void {\n    this.recurrentInput.width = width;\n    this.recurrentInput.height = height;\n  }\n\n  predict(): void {\n    // throw new Error(`${this.constructor.name}-predict is not yet implemented`)\n  }\n\n  compare(): void {\n    // throw new Error(`${this.constructor.name}-compare is not yet implemented`)\n  }\n\n  learn(): void {\n    // throw new Error(`${this.constructor.name}-learn is not yet implemented`)\n  }\n\n  setupKernels(): void {\n    // throw new Error(\n    //   `${this.constructor.name}-setupKernels is not yet implemented`\n    // )\n  }\n\n  reuseKernels(): void {\n    // throw new Error(\n    //   `${this.constructor.name}-reuseKernels is not yet implemented`\n    // )\n  }\n}\n","import { IPraxis } from '../praxis/base-praxis';\nimport { clear, release } from '../utilities/kernel';\nimport { zeros2D } from '../utilities/zeros-2d';\nimport { ILayerSettings } from './base-layer';\nimport { Internal } from './internal';\nimport { IRecurrentInput } from './recurrent-input';\n\nexport class RecurrentZeros extends Internal implements IRecurrentInput {\n  praxis: IPraxis | null = null;\n  settings: Partial<ILayerSettings> = {};\n  predictKernel = null;\n  compareKernel = null;\n\n  constructor(settings?: Partial<ILayerSettings>) {\n    super();\n    if (settings) {\n      this.settings = { ...settings };\n    }\n  }\n\n  setDimensions(width: number, height: number): void {\n    this.praxis = null;\n    this.settings = {\n      ...this.settings,\n      width,\n      height,\n      weights: zeros2D(width, height),\n      deltas: zeros2D(width, height),\n    };\n  }\n\n  setupKernels(): void {\n    // throw new Error(\n    //   `${this.constructor.name}-setupKernels is not yet implemented`\n    // )\n  }\n\n  reuseKernels(): void {\n    // throw new Error(\n    //   `${this.constructor.name}-reuseKernels is not yet implemented`\n    // )\n  }\n\n  predict(): void {\n    // throw new Error(`${this.constructor.name}-predict is not yet implemented`)\n  }\n\n  compare(): void {\n    // throw new Error(`${this.constructor.name}-compare is not yet implemented`)\n  }\n\n  learn(learningRate: number): void {\n    const { weights: oldWeights } = this;\n    this.weights = (this.praxis as IPraxis).run(this, learningRate);\n    // this.deltas = deltas;\n    release(oldWeights);\n    clear(this.deltas);\n  }\n\n  // validate(): void {\n  //   throw new Error(`${this.constructor.name}-validate is not yet implemented`);\n  // }\n\n  // reset(): void {\n  //   throw new Error(`${this.constructor.name}-reset is not yet implemented`);\n  // }\n}\n\nexport function recurrentZeros(): RecurrentZeros {\n  return new RecurrentZeros();\n}\n","import { IKernelFunctionThis, IKernelRunShortcut } from 'gpu.js';\n\nimport { Activation } from './types';\nimport { makeKernel, release, clear } from '../utilities/kernel';\nimport { activate, measure } from '../activation/relu';\nimport { ILayer, ILayerSettings } from './base-layer';\n\nexport function predict2D(\n  this: IKernelFunctionThis,\n  inputs: number[][]\n): number {\n  return activate(inputs[this.thread.y][this.thread.x]);\n}\n\nexport function compare2D(\n  this: IKernelFunctionThis,\n  weights: number[][],\n  deltas: number[][]\n): number {\n  return measure(\n    weights[this.thread.y][this.thread.x],\n    deltas[this.thread.y][this.thread.x]\n  );\n}\n\nexport function predict3D(\n  this: IKernelFunctionThis,\n  inputs: number[][][]\n): number {\n  return activate(inputs[this.thread.z][this.thread.y][this.thread.x]);\n}\n\nexport function compare3D(\n  this: IKernelFunctionThis,\n  weights: number[][][],\n  deltas: number[][][]\n): number {\n  return measure(\n    weights[this.thread.z][this.thread.y][this.thread.x],\n    deltas[this.thread.z][this.thread.y][this.thread.x]\n  );\n}\n\nexport class Relu extends Activation {\n  setupKernels(): void {\n    const { width, height, depth } = this.inputLayer;\n    if (depth > 0) {\n      this.predictKernel = makeKernel(predict3D, {\n        output: [width, height, depth],\n        functions: [activate],\n        immutable: true,\n      });\n\n      this.compareKernel = makeKernel(compare3D, {\n        output: [width, height, depth],\n        functions: [measure],\n        immutable: true,\n      });\n    } else {\n      this.predictKernel = makeKernel(predict2D, {\n        output: [width, height],\n        functions: [activate],\n        immutable: true,\n      });\n\n      this.compareKernel = makeKernel(compare2D, {\n        output: [width, height],\n        functions: [measure],\n        immutable: true,\n      });\n    }\n  }\n\n  predict(): void {\n    release(this.weights);\n    this.weights = (this.predictKernel as IKernelRunShortcut)(\n      this.inputLayer.weights\n    );\n    clear(this.deltas);\n  }\n\n  compare(): void {\n    release(this.inputLayer.deltas);\n    this.inputLayer.deltas = (this.compareKernel as IKernelRunShortcut)(\n      this.weights,\n      this.deltas\n    );\n  }\n}\n\nexport function relu(inputLayer: ILayer, settings?: ILayerSettings): Relu {\n  return new Relu(inputLayer, settings);\n}\n","import { add } from './add';\nimport { ILayer, ILayerSettings } from './base-layer';\nimport { multiply } from './multiply';\nimport { random } from './random';\nimport { relu } from './relu';\nimport { zeros } from './zeros';\nimport { IRecurrentInput } from './recurrent-input';\n\nexport function rnnCell(\n  settings: ILayerSettings,\n  input: ILayer,\n  recurrentInput: IRecurrentInput\n): ILayer {\n  const { height } = settings;\n\n  if (typeof height !== 'number') throw new Error('height not set');\n  if (recurrentInput.setDimensions) {\n    recurrentInput.setDimensions(1, height);\n  }\n\n  // wxh\n  const weight = random({\n    id: 'weight',\n    height,\n    width: input.height,\n    std: 0.08,\n  });\n  // whh\n  const transition = random({\n    id: 'transition',\n    height,\n    width: height,\n    std: 0.08,\n  });\n  // bhh\n  const bias = zeros({ id: 'bias', height });\n\n  return relu(\n    add(\n      add(multiply(weight, input), multiply(transition, recurrentInput)),\n      bias\n    )\n  );\n}\n","import { IKernelFunctionThis, KernelOutput } from 'gpu.js';\n\nimport { BaseLayer, ILayer, ILayerSettings } from './base-layer';\nimport { clone, release } from '../utilities/kernel';\n\nexport class Regression extends BaseLayer {\n  inputLayer: ILayer;\n  constructor(settings: ILayerSettings, inputLayer: ILayer) {\n    super(settings);\n    this.inputLayer = inputLayer;\n    this.validate();\n  }\n\n  predict(): void {\n    release(this.weights);\n    this.weights = clone(this.inputLayer.weights as KernelOutput);\n  }\n\n  learn(): void {\n    // throw new Error(`${this.constructor.name}-learn is not yet implemented`)\n  }\n}\n\n// TODO: Connect up\nexport function learn(\n  this: IKernelFunctionThis,\n  inputs: number[],\n  targets: number[]\n): number {\n  return inputs[this.thread.x] - targets[this.thread.x];\n}\n\n// TODO: handle `loss += 0.5*dy*dy;` total and sum in learn\nexport function regression(\n  settings: ILayerSettings,\n  inputLayer: ILayer\n): Regression {\n  return new Regression(settings, inputLayer);\n}\n","import {\n  IConstantsThis,\n  IKernelFunctionThis,\n  IKernelRunShortcut,\n  KernelOutput,\n  Texture,\n} from 'gpu.js';\n\nimport { makeKernel, release, clone } from '../utilities/kernel';\nimport { randos, randos2D, randos3D } from '../utilities/randos';\nimport { zeros } from '../utilities/zeros';\nimport { zeros2D } from '../utilities/zeros-2d';\nimport { zeros3D } from '../utilities/zeros-3d';\nimport { ILayer, ILayerSettings } from './base-layer';\nimport { Modifier } from './modifier';\n\ninterface ISoftMaxConstants extends IConstantsThis {\n  inputWidth: number;\n}\n\nexport function getMaxValue(\n  this: IKernelFunctionThis<ISoftMaxConstants>,\n  inputs: number[]\n): number {\n  let maxInput = -Infinity;\n  for (let x = 0; x < this.constants.inputWidth; x++) {\n    const input = inputs[x];\n    if (input > maxInput) {\n      maxInput = input;\n    }\n  }\n  return maxInput;\n}\n\nexport function getMaxValue2D(\n  this: IKernelFunctionThis<ISoftMaxConstants>,\n  inputs: number[][]\n): number {\n  let maxInput = -Infinity;\n  for (let y = 0; y < this.constants.inputHeight; y++) {\n    for (let x = 0; x < this.constants.inputWidth; x++) {\n      const input = inputs[y][x];\n      if (input > maxInput) {\n        maxInput = input;\n      }\n    }\n  }\n  return maxInput;\n}\n\nexport function getMaxValue3D(\n  this: IKernelFunctionThis<ISoftMaxConstants>,\n  inputs: number[][][]\n): number {\n  let maxInput = -Infinity;\n  for (let z = 0; z < this.constants.inputDepth; z++) {\n    for (let y = 0; y < this.constants.inputHeight; y++) {\n      for (let x = 0; x < this.constants.inputWidth; x++) {\n        const input = inputs[z][y][x];\n        if (input > maxInput) {\n          maxInput = input;\n        }\n      }\n    }\n  }\n  return maxInput;\n}\n\nexport function getSum(\n  this: IKernelFunctionThis<ISoftMaxConstants>,\n  inputs: number[]\n): number {\n  let sum = 0;\n  for (let x = 0; x < this.constants.inputWidth; x++) {\n    sum += inputs[x];\n  }\n  return sum;\n}\n\nexport function getSum2D(\n  this: IKernelFunctionThis<ISoftMaxConstants>,\n  inputs: number[][]\n): number {\n  let sum = 0;\n  for (let y = 0; y < this.constants.inputHeight; y++) {\n    for (let x = 0; x < this.constants.inputWidth; x++) {\n      sum += inputs[y][x];\n    }\n  }\n  return sum;\n}\n\nexport function getSum3D(\n  this: IKernelFunctionThis<ISoftMaxConstants>,\n  inputs: number[][][]\n): number {\n  let sum = 0;\n  for (let z = 0; z < this.constants.inputDepth; z++) {\n    for (let y = 0; y < this.constants.inputHeight; y++) {\n      for (let x = 0; x < this.constants.inputWidth; x++) {\n        sum += inputs[z][y][x];\n      }\n    }\n  }\n  return sum;\n}\n\nexport function getExponentials(\n  this: IKernelFunctionThis,\n  inputs: number[],\n  maxInput: number[]\n): number {\n  return Math.exp(inputs[this.thread.x] - maxInput[0]);\n}\n\nexport function getExponentials2D(\n  this: IKernelFunctionThis,\n  inputs: number[][],\n  maxInput: number[]\n): number {\n  return Math.exp(inputs[this.thread.y][this.thread.x] - maxInput[0]);\n}\n\nexport function getExponentials3D(\n  this: IKernelFunctionThis,\n  inputs: number[][][],\n  maxInput: number[]\n): number {\n  return Math.exp(\n    inputs[this.thread.z][this.thread.y][this.thread.x] - maxInput[0]\n  );\n}\n\nexport function predict(\n  this: IKernelFunctionThis,\n  exponentials: number[],\n  exponentialsSum: number[]\n): number {\n  return exponentials[this.thread.x] / exponentialsSum[0];\n}\n\nexport function predict2D(\n  this: IKernelFunctionThis,\n  exponentials: number[][],\n  exponentialsSum: number[]\n): number {\n  return exponentials[this.thread.y][this.thread.x] / exponentialsSum[0];\n}\n\nexport function predict3D(\n  this: IKernelFunctionThis,\n  exponentials: number[][][],\n  exponentialsSum: number[]\n): number {\n  return (\n    exponentials[this.thread.z][this.thread.y][this.thread.x] /\n    exponentialsSum[0]\n  );\n}\n\nexport function compare(\n  this: IKernelFunctionThis,\n  target: number,\n  exponentials: number[]\n): number {\n  let indicator = 0;\n  if (this.thread.x === target) {\n    indicator = 1;\n  }\n  return -(indicator - exponentials[this.thread.x]);\n}\n\nexport function compare2D(\n  this: IKernelFunctionThis,\n  target: number,\n  exponentials: number[][]\n): number {\n  let indicator = 0;\n  const index = this.thread.x + this.thread.y * this.output.x;\n  if (index === target) {\n    indicator = 1;\n  }\n  return -(indicator - exponentials[this.thread.y][this.thread.x]);\n}\n\nexport function compare3D(\n  this: IKernelFunctionThis,\n  target: number,\n  exponentials: number[][][]\n): number {\n  let indicator = 0;\n  const index =\n    this.thread.x +\n    this.thread.y * this.output.x +\n    this.thread.z * this.output.x * this.output.y;\n  if (index === target) {\n    indicator = 1;\n  }\n  return -(\n    indicator - exponentials[this.thread.z][this.thread.y][this.thread.x]\n  );\n}\n\nexport function loss(): number {\n  return -Math.log(0);\n}\n\n// TODO: handle: `return -Math.log(this.es[y]);` in learn\n\nexport class SoftMax extends Modifier {\n  getExponentialsKernel: IKernelRunShortcut | null;\n  getMaxValueKernel: IKernelRunShortcut | null;\n  getSumKernel: IKernelRunShortcut | null;\n  errors: KernelOutput | null = null;\n  constructor(inputLayer: ILayer, settings?: ILayerSettings) {\n    super(inputLayer, settings);\n    this.getExponentialsKernel = null;\n    this.getMaxValueKernel = null;\n    this.getSumKernel = null;\n    this.validate();\n\n    if (this.depth > 0) {\n      this.weights = randos3D(this.width, this.height, this.depth);\n      this.deltas = zeros3D(this.width, this.height, this.depth);\n    } else if (this.height > 0) {\n      this.weights = randos2D(this.width, this.height);\n      this.deltas = zeros2D(this.width, this.height);\n    } else {\n      this.weights = randos(this.width);\n      this.deltas = zeros(this.width);\n    }\n  }\n\n  setupKernels(): void {\n    const { width, height, depth } = this;\n    if (depth > 0) {\n      this.getExponentialsKernel = makeKernel(getExponentials3D, {\n        output: [width, height, depth],\n      });\n      this.getMaxValueKernel = makeKernel(getMaxValue3D, {\n        output: [1, 1, 1],\n        constants: {\n          inputWidth: width,\n          inputHeight: height,\n          inputDepth: depth,\n        },\n      });\n      this.getSumKernel = makeKernel(getSum3D, {\n        output: [1, 1, 1],\n        constants: {\n          inputWidth: width,\n          inputHeight: height,\n          inputDepth: depth,\n        },\n      });\n      this.predictKernel = makeKernel(predict3D, {\n        output: [width, height, depth],\n      });\n      this.compareKernel = makeKernel(compare3D, {\n        output: [width, height, depth],\n        immutable: true,\n      });\n    } else {\n      this.getExponentialsKernel = makeKernel(getExponentials, {\n        output: [width, height],\n      });\n      this.getMaxValueKernel = makeKernel(getMaxValue2D, {\n        output: [1, 1],\n        constants: {\n          inputWidth: width,\n          inputHeight: height,\n        },\n      });\n      this.getSumKernel = makeKernel(getSum2D, {\n        output: [1, 1],\n        constants: {\n          inputWidth: width,\n          inputHeight: height,\n        },\n      });\n      this.predictKernel = makeKernel(predict2D, {\n        output: [width, height],\n      });\n      this.compareKernel = makeKernel(compare2D, {\n        output: [width, height],\n        immutable: true,\n      });\n    }\n  }\n\n  predict(): void {\n    const maxValue = (this.getMaxValueKernel as IKernelRunShortcut)(\n      this.inputLayer.weights\n    );\n    const exponentials = (this.getExponentialsKernel as IKernelRunShortcut)(\n      this.inputLayer.weights,\n      maxValue\n    );\n    const exponentialsSum = (this.getSumKernel as IKernelRunShortcut)(\n      exponentials\n    );\n    this.weights = (this.predictKernel as IKernelRunShortcut)(\n      exponentials,\n      exponentialsSum\n    );\n  }\n\n  compare(targetValues: KernelOutput): void {\n    const { deltas, errors } = this;\n    this.errors = (this.compareKernel as IKernelRunShortcut)(\n      (targetValues as number[])[0],\n      deltas\n    );\n    this.deltas = clone(this.errors);\n    release(deltas);\n    release(errors as Texture);\n\n    const inputLayerDeltas = this.inputLayer.deltas;\n    this.inputLayer.deltas = clone(this.deltas);\n    release(inputLayerDeltas);\n  }\n}\n\nexport function softMax(\n  inputLayer: ILayer,\n  settings?: ILayerSettings\n): SoftMax {\n  return new SoftMax(inputLayer, settings);\n}\n","import { KernelOutput } from 'gpu.js';\n\nimport { BaseLayer, ILayer, ILayerSettings } from './base-layer';\nimport { clone, release } from '../utilities/kernel';\n\nexport class SVM extends BaseLayer {\n  inputLayer: ILayer;\n  constructor(inputLayer: ILayer, settings: ILayerSettings) {\n    super(settings);\n    this.inputLayer = inputLayer;\n  }\n\n  predict(): void {\n    release(this.weights);\n    this.weights = clone(this.inputLayer.weights as KernelOutput);\n    this.validate();\n  }\n\n  learn(): void {\n    // throw new Error(`${this.constructor.name}-learn is not yet implemented`)\n  }\n}\n\n// function learn(target) {\n//   if (y === i) {\n//     continue;\n//   }\n//   const ydiff = -yscore + x.w[i] + margin;\n//   if (ydiff > 0) {\n//     // violating dimension, apply loss\n//     x.dw[i] += 1;\n//     x.dw[y] -= 1;\n//     loss += ydiff;\n//   }\n// }\n\nexport function svm(inputLayer: ILayer, settings: ILayerSettings): SVM {\n  return new SVM(inputLayer, settings);\n}\n","import { IKernelFunctionThis, IKernelRunShortcut } from 'gpu.js';\nimport { clear, makeKernel } from '../utilities/kernel';\nimport { ILayer } from './base-layer';\nimport { Modifier } from './types';\n\nexport function predict(this: IKernelFunctionThis, value: number[][]): number {\n  return value[this.thread.x][this.thread.y];\n}\n\nconst compare = predict;\n\nexport class Transpose extends Modifier {\n  get width(): number {\n    return this.inputLayer.height;\n  }\n\n  get height(): number {\n    return this.inputLayer.width;\n  }\n\n  constructor(inputLayer: ILayer) {\n    super(inputLayer);\n    this.validate();\n  }\n\n  setupKernels(): void {\n    this.predictKernel = makeKernel(predict, {\n      output: [this.height, this.width],\n    });\n    this.compareKernel = makeKernel(compare, {\n      output: [this.width, this.height],\n    });\n  }\n\n  predict(): void {\n    this.weights = (this.predictKernel as IKernelRunShortcut)(\n      this.inputLayer.weights\n    );\n    clear(this.deltas);\n  }\n\n  compare(): void {\n    this.inputLayer.deltas = (this.compareKernel as IKernelRunShortcut)(\n      this.deltas\n    );\n  }\n}\n\nexport function transpose(inputLayer: ILayer): Transpose {\n  return new Transpose(inputLayer);\n}\n","import {\n  Activation,\n  EntryPoint,\n  Filter,\n  Internal,\n  InternalModel,\n  Model,\n  Modifier,\n  Operator,\n  Target,\n} from './types';\n\nexport { Add, add } from './add';\nexport { arthurFeedForward } from './arthur-feed-forward';\nexport {\n  BaseLayer,\n  ILayer,\n  ILayerSettings,\n  ILayerJSON,\n  baseLayerDefaultSettings,\n} from './base-layer';\nexport { Convolution, convolution } from './convolution';\nexport { Dropout, dropout } from './dropout';\nexport { feedForward } from './feed-forward';\nexport { FullyConnected, fullyConnected } from './fully-connected';\nexport { gru } from './gru';\nexport { Input, input } from './input';\nexport { LeakyRelu, leakyRelu } from './leaky-relu';\nexport { lstmCell } from './lstm-cell';\nexport { Multiply, multiply } from './multiply';\nexport { MultiplyElement, multiplyElement } from './multiply-element';\nexport { Negative, negative } from './negative';\nexport { Ones, ones } from './ones';\nexport { output } from './output';\nexport { Pool, pool } from './pool';\nexport { Random, random } from './random';\nexport { RecurrentInput, IRecurrentInput } from './recurrent-input';\nexport { RecurrentZeros } from './recurrent-zeros';\nexport { rnnCell } from './rnn-cell';\nexport { Regression, regression } from './regression';\nexport { Relu, relu } from './relu';\nexport { Sigmoid, sigmoid } from './sigmoid';\nexport { SoftMax, softMax } from './soft-max';\nexport { SVM, svm } from './svm';\nexport { Tanh, tanh } from './tanh';\nexport { Target, target } from './target';\nexport { Transpose, transpose } from './transpose';\nexport { Zeros, zeros } from './zeros';\n\nexport const layerTypes = {\n  Activation,\n  Internal,\n  InternalModel,\n  EntryPoint,\n  Filter,\n  Model,\n  Modifier,\n  Operator,\n  Target,\n};\n","import * as layer from '../layer';\nimport { layerTypes, ILayerJSON, ILayer, Target } from '../layer';\nimport { ActivationType } from '../layer/activation';\nimport { FilterType } from '../layer/filter';\nimport { InternalType } from '../layer/internal';\nimport { ModifierType } from '../layer/modifier';\nimport { OperatorType } from '../layer/operator';\nimport { BaseLayerType } from '../layer/base-layer';\nimport { TargetType } from '../layer/target';\n\nconst layerNameTypes = Object.keys(layer);\n\nexport function layerFromJSON(\n  jsonLayer: ILayerJSON,\n  inputLayer1?: ILayer,\n  inputLayer2?: ILayer\n): ILayer | null {\n  if (\n    !layerNameTypes.find((layerNameType) => layerNameType === jsonLayer.type)\n  ) {\n    return null;\n  }\n  const Layer = ((layer as unknown) as {\n    [layerType: string]:\n      | TargetType\n      | ActivationType\n      | FilterType\n      | InternalType\n      | ModifierType\n      | OperatorType;\n  })[jsonLayer.type];\n  if (Layer.prototype instanceof layerTypes.Filter) {\n    if (!inputLayer1) throw new Error('inputLayer missing');\n    return new (Layer as FilterType)(jsonLayer, inputLayer1);\n  } else if (\n    Layer.prototype instanceof layerTypes.Activation ||\n    Layer.prototype instanceof layerTypes.Modifier\n  ) {\n    if (!inputLayer1) throw new Error('inputLayer missing');\n    return new (Layer as ActivationType)(inputLayer1, jsonLayer);\n  } else if (Layer.prototype instanceof layerTypes.Internal) {\n    return new (Layer as InternalType)(jsonLayer);\n  } else if (Layer.prototype instanceof layerTypes.Operator) {\n    if (!inputLayer1) throw new Error('inputLayer1 missing');\n    if (!inputLayer2) throw new Error('inputLayer2 missing');\n    return new (Layer as OperatorType)(inputLayer1, inputLayer2, jsonLayer);\n  } else if (\n    Layer.prototype instanceof layerTypes.InternalModel ||\n    Layer.prototype instanceof layerTypes.EntryPoint ||\n    Layer.prototype instanceof layerTypes.Model\n  ) {\n    return new (Layer as BaseLayerType)(jsonLayer);\n  } else if (Layer === Target) {\n    if (!inputLayer1) throw new Error('inputLayer missing');\n    return new (Layer as TargetType)(jsonLayer, inputLayer1);\n  }\n  return null;\n}\n","import { InputOutputValue, INumberHash, ITrainingDatum } from '../lookup';\n\nexport type LookupTableProp = 'input' | 'output';\n\nexport class LookupTable {\n  length: number;\n  prop: LookupTableProp | null = null;\n  table: INumberHash = {};\n  constructor(\n    data: ITrainingDatum[] | InputOutputValue[] | InputOutputValue[][],\n    prop?: LookupTableProp\n  ) {\n    this.length = 0;\n    const table = this.table;\n    if (prop) {\n      this.prop = prop;\n      for (let i = 0; i < data.length; i++) {\n        const datum = (data as ITrainingDatum[])[i];\n        const object = datum[prop] as INumberHash;\n        for (const p in object) {\n          if (!object.hasOwnProperty(p)) continue;\n          if (table.hasOwnProperty(p)) continue;\n          table[p] = this.length++;\n        }\n      }\n    } else if (Array.isArray(data) && Array.isArray(data[0])) {\n      for (let i = 0; i < data.length; i++) {\n        const array = (data as InputOutputValue[][])[i];\n        for (let j = 0; j < array.length; j++) {\n          const object = array[j];\n          for (const p in object) {\n            if (!object.hasOwnProperty(p)) continue;\n            if (table.hasOwnProperty(p)) continue;\n            table[p] = this.length++;\n          }\n        }\n      }\n    } else {\n      for (let i = 0; i < data.length; i++) {\n        const object = (data as INumberHash[])[i];\n        for (const p in object) {\n          if (!object.hasOwnProperty(p)) continue;\n          if (table.hasOwnProperty(p)) continue;\n          table[p] = this.length++;\n        }\n      }\n    }\n  }\n}\n","import { IKernelFunctionThis, KernelOutput, Texture } from 'gpu.js';\nimport { MeanSquaredError } from './estimator/mean-squared-error';\nimport { ILayer, ILayerJSON } from './layer';\nimport { Model } from './layer/types';\nimport { InputOutputValue, INumberArray, INumberHash, lookup } from './lookup';\nimport * as praxis from './praxis';\nimport { IPraxis, IPraxisSettings } from './praxis/base-praxis';\nimport { flattenLayers } from './utilities/flatten-layers';\nimport { makeKernel, release } from './utilities/kernel';\nimport { layerFromJSON } from './utilities/layer-from-json';\nimport { LookupTable } from './utilities/lookup-table';\n\nexport interface IFeedForwardTrainingData<\n  InputType extends InputOutputValue | KernelOutput = number[] | Float32Array,\n  OutputType extends InputOutputValue | KernelOutput = number[] | Float32Array\n> {\n  input: InputType;\n  output: OutputType;\n}\n\nexport interface IFeedForwardNormalizedTrainingData {\n  input: Float32Array;\n  output: Float32Array;\n}\n\nexport interface IFeedForwardGPUTrainingData {\n  input: KernelOutput;\n  output: KernelOutput;\n}\n\nexport interface ITrainingStatus {\n  iterations: number;\n  error: number;\n}\n\nexport type Log = (status: string) => void;\nexport type FeedForwardCallback = (status: ITrainingStatus) => void;\n\nexport interface IFeedForwardTrainingOptions {\n  iterations?: number;\n  errorThresh?: number;\n  log?: boolean | Log;\n  logPeriod?: number;\n  learningRate?: number;\n  callback?: FeedForwardCallback;\n  callbackPeriod?: number;\n  errorCheckInterval?: number;\n  timeout?: number;\n}\n\nexport interface IFeedForwardOptions {\n  learningRate?: number;\n  binaryThresh?: number;\n  hiddenLayers?: Array<(inputLayer: ILayer, layerIndex: number) => ILayer>;\n  inputLayer?: () => ILayer;\n  outputLayer?: (inputLayer: ILayer, index: number) => ILayer;\n  praxisOpts?: Partial<IPraxisSettings>;\n  initPraxis?: (\n    layerTemplate: ILayer,\n    settings: Partial<IPraxisSettings>\n  ) => IPraxis;\n  praxis?: IPraxis;\n\n  // JSON\n  layers?: ILayer[];\n  inputLayerIndex?: number;\n  outputLayerIndex?: number;\n  sizes?: number[];\n}\n\nexport interface IFeedForwardPreppedTrainingData {\n  status: ITrainingStatus;\n  preparedData: IFeedForwardGPUTrainingData[];\n  endTime: number;\n}\n\nexport const defaults: IFeedForwardOptions = {\n  learningRate: 0.3,\n  binaryThresh: 0.5,\n  initPraxis: (\n    layerTemplate: ILayer,\n    settings: Partial<IPraxisSettings>\n  ): IPraxis =>\n    praxis.momentumRootMeanSquaredPropagation(\n      layerTemplate,\n      layerTemplate.settings.praxisOpts ?? settings\n    ),\n};\n\nexport const trainDefaults: IFeedForwardTrainingOptions = {\n  iterations: 20000,\n  errorThresh: 0.005,\n  log: false,\n  logPeriod: 10,\n  learningRate: 0.3,\n  callbackPeriod: 10,\n  errorCheckInterval: 100,\n  timeout: Infinity,\n};\n\nexport interface IFeedForwardJSON {\n  type: string;\n  sizes: number[];\n  layers: ILayerJSON[];\n  inputLayerIndex: number;\n  outputLayerIndex: number;\n}\n\nexport class FeedForward<\n  InputType extends InputOutputValue | KernelOutput = number[] | Float32Array,\n  OutputType extends InputOutputValue | KernelOutput = number[] | Float32Array\n> {\n  static _validateTrainingOptions(\n    options: Partial<IFeedForwardTrainingOptions>\n  ): void {\n    const {\n      iterations,\n      errorThresh,\n      log,\n      logPeriod,\n      learningRate,\n      callback,\n      callbackPeriod,\n      timeout,\n    } = options;\n    interface IValidation {\n      [optionName: string]: () => boolean;\n    }\n    const validations: IValidation = {\n      iterations: () => typeof iterations === 'number' && iterations > 0,\n      errorThresh: () =>\n        typeof errorThresh === 'number' && errorThresh > 0 && errorThresh < 1,\n      log: () => typeof log === 'function' || typeof log === 'boolean',\n      logPeriod: () => typeof logPeriod === 'number' && logPeriod > 0,\n      learningRate: () =>\n        typeof learningRate === 'number' &&\n        learningRate > 0 &&\n        learningRate < 1,\n      callback: () => typeof callback === 'function' || callback === null,\n      callbackPeriod: () =>\n        typeof callbackPeriod === 'number' && callbackPeriod > 0,\n      timeout: () => typeof timeout === 'number' && timeout > 0,\n    };\n    Object.keys(trainDefaults).forEach((key: string): void => {\n      if (validations.hasOwnProperty(key) && !validations[key]()) {\n        const val = options[key as keyof IFeedForwardTrainingOptions];\n        throw new Error(\n          `[${key}, ${(\n            val ?? 'undefined'\n          ).toString()}] is out of normal training range, your network will probably not train.`\n        );\n      }\n    });\n  }\n\n  /**\n   * if a method is passed in method is used\n   * if false passed in nothing is logged\n   */\n  _setLogMethod(log: Log | undefined | boolean): void {\n    if (typeof log === 'function') {\n      this.trainOpts.log = log;\n    } else if (log) {\n      // eslint-disable-next-line\n      this.trainOpts.log = console.log;\n    } else {\n      this.trainOpts.log = false;\n    }\n  }\n\n  _updateTrainingOptions(opts: Partial<IFeedForwardTrainingOptions>): void {\n    this.trainOpts = { ...trainDefaults, ...this.trainOpts, ...opts };\n    FeedForward._validateTrainingOptions(this.trainOpts);\n    this._setLogMethod(opts.log ?? this.trainOpts.log);\n    const { callback, callbackPeriod, errorCheckInterval } = this.trainOpts;\n    if (callback && callbackPeriod !== errorCheckInterval) {\n      console.warn(\n        `options.callbackPeriod with value of ${(\n          callbackPeriod ?? 'undefined'\n        ).toString()} does not match options.errorCheckInterval with value of ${(\n          errorCheckInterval ?? 'undefined'\n        ).toString()}, if logging error, it will repeat.  These values may need to match`\n      );\n    }\n  }\n\n  trainOpts: Partial<IFeedForwardTrainingOptions> = {};\n  options: IFeedForwardOptions;\n  layers: ILayer[] | null = null;\n  _inputLayer: ILayer | null = null;\n  _hiddenLayers: ILayer[] | null = null;\n  _outputLayer: ILayer | null = null;\n  _model: ILayer[] | null = null;\n  meanSquaredError: MeanSquaredError | null = null;\n  inputLookup: INumberHash | null = null;\n  inputLookupLength: number | null = null;\n  outputLookup: INumberHash | null = null;\n  outputLookupLength: number | null = null;\n  constructor(options: IFeedForwardOptions = {}) {\n    this.options = { ...defaults, ...options };\n    this._updateTrainingOptions({\n      ...trainDefaults,\n      ...options,\n    });\n  }\n\n  _connectOptionsLayers(): ILayer[] {\n    const { inputLayerIndex, outputLayerIndex, layers } = this.options;\n    if (!layers) throw new Error('this.options.layers in unexpected state');\n    if (typeof inputLayerIndex !== 'number')\n      throw new Error('inputLayerIndex not a number');\n    if (typeof outputLayerIndex !== 'number')\n      throw new Error('inputLayerIndex not a number');\n    const inputLayer = layers[inputLayerIndex];\n    if (!inputLayer) {\n      throw new Error('inputLayer not found in this.options.layers');\n    }\n    const outputLayer = layers[outputLayerIndex];\n    if (!outputLayer) {\n      throw new Error('outputLayer not found in this.options.layers');\n    }\n    this._inputLayer = inputLayer;\n    this._hiddenLayers = layers.slice(\n      inputLayerIndex,\n      outputLayerIndex - inputLayerIndex\n    );\n    this._outputLayer = outputLayer;\n    return layers;\n  }\n\n  _connectNewLayers(): ILayer[] {\n    const { inputLayer, outputLayer } = this.options;\n    if (!inputLayer) throw new Error('inputLayer not defined');\n    const layers: ILayer[] = [];\n    this._inputLayer = inputLayer();\n    const hiddenLayers = this._connectHiddenLayers(this._inputLayer);\n\n    if (!outputLayer) throw new Error('outputLayer not defined');\n    this._outputLayer = outputLayer(\n      hiddenLayers[hiddenLayers.length - 1],\n      hiddenLayers.length\n    );\n    layers.push(this._inputLayer);\n    layers.push(...hiddenLayers);\n    layers.push(this._outputLayer);\n    return flattenLayers(layers);\n  }\n\n  _connectHiddenLayers(previousLayer: ILayer): ILayer[] {\n    this._hiddenLayers = [];\n    const result: ILayer[] = [];\n    const { hiddenLayers } = this.options;\n\n    if (!hiddenLayers) throw new Error('hiddenLayers not defined');\n\n    for (let i = 0; i < hiddenLayers.length; i++) {\n      const hiddenLayer = hiddenLayers[i](previousLayer, i);\n      result.push(hiddenLayer);\n      this._hiddenLayers.push(hiddenLayer);\n      previousLayer = hiddenLayer;\n    }\n\n    return result;\n  }\n\n  initialize(): void {\n    this.layers = this.options.layers\n      ? this._connectOptionsLayers()\n      : this._connectNewLayers();\n    this.initializeLayers(this.layers);\n    this._model = this.layers.filter((l) => l instanceof Model);\n  }\n\n  initializeLayers(layers: ILayer[]): void {\n    for (let i = 0; i < layers.length; i++) {\n      const layer = layers[i];\n      // TODO: optimize for when training or just running\n      layer.setupKernels(true);\n      if (\n        layer instanceof Model &&\n        layer.praxis === null &&\n        typeof this.options.initPraxis === 'function'\n      ) {\n        layer.praxis = this.options.initPraxis(\n          layer,\n          layer.settings.praxisOpts ?? this.options.praxisOpts ?? {}\n        );\n        layer.praxis.setupKernels();\n      }\n    }\n\n    const lastLayer = layers[layers.length - 1];\n    this.meanSquaredError = new MeanSquaredError({\n      width: lastLayer.width,\n      height: lastLayer.height,\n    });\n  }\n\n  run(input: InputType): OutputType {\n    let typeSafeInput: INumberArray | KernelOutput;\n    if (Array.isArray(input) || (input as Float32Array).buffer) {\n      typeSafeInput = input as INumberArray;\n    } else {\n      if (this.inputLookup) {\n        typeSafeInput = lookup.toArray(\n          this.inputLookup,\n          input as INumberHash,\n          this.inputLookupLength as number\n        );\n      } else {\n        throw new Error('input is incompatible with net');\n      }\n    }\n\n    let output = this.runInput(typeSafeInput as KernelOutput);\n    if (output instanceof Texture) {\n      output = output.toArray();\n    }\n\n    if (this.outputLookup) {\n      return lookup.toObject(\n        this.outputLookup,\n        output as number[]\n      ) as OutputType;\n    }\n    return output as OutputType;\n  }\n\n  runInput(input: KernelOutput): KernelOutput {\n    if (!this.layers) throw new Error('not initialized');\n    this.layers[0].predict(input);\n    for (let i = 1; i < this.layers.length; i++) {\n      this.layers[i].predict();\n    }\n    return this.layers[this.layers.length - 1].weights as KernelOutput;\n  }\n\n  train(\n    data: Array<IFeedForwardTrainingData<InputType, OutputType>>,\n    options: Partial<IFeedForwardTrainingOptions> = {}\n  ): ITrainingStatus {\n    const { preparedData, status, endTime } = this._prepTraining(data, options);\n    let continueTicking = true;\n    const calculateError = (): number =>\n      this._calculateTrainingError(preparedData);\n    const trainPatters = (): void => this._trainPatterns(preparedData);\n    while (continueTicking) {\n      continueTicking = this._trainingTick(\n        status,\n        endTime,\n        calculateError,\n        trainPatters\n      );\n    }\n    return status;\n  }\n\n  _trainingTick(\n    status: ITrainingStatus,\n    endTime: number,\n    calculateError: () => number,\n    trainPatterns: () => void\n  ): boolean {\n    const { trainOpts } = this;\n    if (\n      status.iterations >= (trainOpts.iterations as number) ||\n      status.error <= (trainOpts.errorThresh as number) ||\n      Date.now() >= endTime\n    ) {\n      return false;\n    }\n\n    if (\n      typeof trainOpts.log === 'function' &&\n      status.iterations % (trainOpts.logPeriod as number) === 0\n    ) {\n      status.error = calculateError();\n      trainOpts.log(\n        `iterations: ${status.iterations}, training error: ${status.error}`\n      );\n    } else if (\n      status.iterations % (trainOpts.errorCheckInterval as number) ===\n      0\n    ) {\n      status.error = calculateError();\n    } else {\n      trainPatterns();\n    }\n\n    if (\n      trainOpts.callback &&\n      status.iterations % (trainOpts.callbackPeriod as number) === 0\n    ) {\n      trainOpts.callback(Object.assign(status));\n    }\n\n    status.iterations++;\n    return true;\n  }\n\n  _prepTraining(\n    data: Array<IFeedForwardTrainingData<InputType, OutputType>>,\n    options: Partial<IFeedForwardTrainingOptions>\n  ): IFeedForwardPreppedTrainingData {\n    this._updateTrainingOptions(options);\n\n    const formattedData = this.formatData(data);\n    const endTime = this.trainOpts.timeout\n      ? Date.now() + this.trainOpts.timeout\n      : 0;\n\n    const status = {\n      error: 1,\n      iterations: 0,\n    };\n\n    this.verifyIsInitialized();\n\n    return {\n      preparedData: this.transferData(formattedData),\n      status,\n      endTime,\n    };\n  }\n\n  verifyIsInitialized(): void {\n    if (!this._model) {\n      this.initialize();\n    }\n  }\n\n  _calculateTrainingError(preparedData: IFeedForwardGPUTrainingData[]): number {\n    let sum: Float32Array | KernelOutput = new Float32Array([0]);\n    const meanSquaredError = this.meanSquaredError as MeanSquaredError;\n    for (let i = 0; i < preparedData.length; ++i) {\n      const prevSum = sum;\n      const error = this._trainPattern(\n        preparedData[i].input,\n        preparedData[i].output,\n        true\n      ) as number;\n      sum = meanSquaredError.add(sum, error);\n      release(error);\n      release(prevSum);\n    }\n    const result = meanSquaredError.divide(preparedData.length, sum);\n    release(sum);\n    if (result instanceof Texture) {\n      const resultArray: number[] = result.toArray() as number[];\n      release(result);\n      return resultArray[0];\n    }\n    return (result as number[])[0];\n  }\n\n  /**\n   * @param data\n   * @private\n   */\n  _trainPatterns(data: IFeedForwardGPUTrainingData[]): void {\n    for (let i = 0; i < data.length; ++i) {\n      this._trainPattern(data[i].input, data[i].output, false);\n    }\n  }\n\n  _trainPattern(\n    input: KernelOutput,\n    target: KernelOutput,\n    logErrorRate: boolean\n  ): KernelOutput | null {\n    // forward propagate\n    this.runInput(input);\n\n    // back propagate\n    this._calculateDeltas(target);\n    this.adjustWeights();\n\n    if (logErrorRate) {\n      if (!this._outputLayer?.errors) {\n        throw new Error('outputLayer.errors not defined');\n      }\n      return (this.meanSquaredError as MeanSquaredError).calculate(\n        this._outputLayer.errors\n      );\n    }\n    return null;\n  }\n\n  _calculateDeltas(target: KernelOutput): void {\n    const layers = this.layers as ILayer[];\n    for (let i = layers.length - 1; i > -1; i--) {\n      layers[i].compare(target);\n    }\n  }\n\n  /**\n   *\n   */\n  adjustWeights(): void {\n    const _model = this._model as ILayer[];\n    for (let i = 0; i < _model.length; i++) {\n      _model[i].learn(this.trainOpts.learningRate as number);\n    }\n  }\n\n  /**\n   *\n   * @param data\n   * @returns {*}\n   */\n  formatData(\n    data:\n      | Array<IFeedForwardTrainingData<InputType, OutputType>>\n      | IFeedForwardTrainingData<InputType, OutputType>\n  ): IFeedForwardNormalizedTrainingData[] {\n    if (!Array.isArray(data)) {\n      // turn stream datum into array\n      const tmp = [];\n      tmp.push(data);\n      data = tmp;\n    }\n\n    // turn sparse hash input into arrays with 0s as filler\n    const inputDatumCheck = data[0].input;\n    let formattedData: Array<Partial<IFeedForwardNormalizedTrainingData>>;\n    if (\n      Array.isArray(data) &&\n      !Array.isArray(inputDatumCheck) &&\n      !(inputDatumCheck instanceof Float32Array)\n    ) {\n      if (!this.inputLookup) {\n        const lookupTable = new LookupTable(data, 'input');\n        this.inputLookup = lookupTable.table;\n        this.inputLookupLength = lookupTable.length;\n      }\n      formattedData = data.map((datumParam): Partial<\n        IFeedForwardNormalizedTrainingData\n      > => {\n        const array = lookup.toArray(\n          this.inputLookup as INumberHash,\n          datumParam.input as INumberHash,\n          this.inputLookupLength as number\n        );\n        return { input: array };\n      }, this);\n    } else {\n      formattedData = data as typeof formattedData;\n    }\n\n    const outputDatumCheck = data[0].output;\n    if (\n      !Array.isArray(outputDatumCheck) &&\n      !(outputDatumCheck instanceof Float32Array)\n    ) {\n      if (!this.outputLookup) {\n        const lookupTable = new LookupTable(data, 'output');\n        this.outputLookup = lookupTable.table;\n        this.outputLookupLength = lookupTable.length;\n      }\n      formattedData = data.map(\n        (datumParam, index): IFeedForwardNormalizedTrainingData => {\n          const array = lookup.toArray(\n            this.outputLookup as INumberHash,\n            datumParam.output as INumberHash,\n            this.inputLookupLength as number\n          );\n          return {\n            input: formattedData[index].input as Float32Array,\n            output: array,\n          };\n        },\n        this\n      );\n    }\n    return formattedData as IFeedForwardNormalizedTrainingData[];\n  }\n\n  transferData(\n    formattedData: IFeedForwardNormalizedTrainingData[]\n  ): IFeedForwardGPUTrainingData[] {\n    const transferredData = new Array(formattedData.length);\n    const transferInput = makeKernel(\n      function (value: number[]): number {\n        return value[this.thread.x];\n      },\n      {\n        output: [formattedData[0].input.length],\n        immutable: true,\n      }\n    );\n    const transferOutput = makeKernel(\n      function (this: IKernelFunctionThis, value: number[]): number {\n        return value[this.thread.x];\n      },\n      {\n        output: [formattedData[0].output.length],\n        immutable: true,\n      }\n    );\n\n    for (let i = 0; i < formattedData.length; i++) {\n      const formattedDatum = formattedData[i];\n      transferredData[i] = {\n        input: transferInput(formattedDatum.input),\n        output: transferOutput(formattedDatum.output),\n      };\n    }\n    return transferredData;\n  }\n\n  /**\n   *\n   * @param data\n   * @returns {\n   *  {\n   *    error: number,\n   *    misclasses: Array\n   *  }\n   * }\n   */\n  test(): void {\n    throw new Error(`${this.constructor.name}-test is not yet implemented`);\n  }\n\n  /**\n   *\n   */\n  toJSON(): IFeedForwardJSON {\n    if (!this.layers) {\n      this.initialize();\n    }\n    if (\n      !this._model ||\n      !this.layers ||\n      !this._inputLayer ||\n      !this._hiddenLayers ||\n      !this._outputLayer\n    ) {\n      throw new Error('network is not initialized');\n    }\n    const jsonLayers = [];\n    for (let i = 0; i < this.layers.length; i++) {\n      const layer = this.layers[i];\n      const jsonLayer = layer.toJSON();\n      if (layer.hasOwnProperty('inputLayer')) {\n        jsonLayer.inputLayerIndex = this.layers.indexOf(\n          layer.inputLayer as ILayer\n        );\n      } else if (\n        layer.hasOwnProperty('inputLayer1') &&\n        layer.hasOwnProperty('inputLayer2')\n      ) {\n        jsonLayer.inputLayer1Index = this.layers.indexOf(\n          layer.inputLayer1 as ILayer\n        );\n        jsonLayer.inputLayer2Index = this.layers.indexOf(\n          layer.inputLayer2 as ILayer\n        );\n      }\n      jsonLayers.push(jsonLayer);\n    }\n\n    return {\n      type: this.constructor.name,\n      sizes:\n        this.options.sizes ??\n        [this._inputLayer.height]\n          .concat(this._hiddenLayers.map((l) => l.height))\n          .concat([this._outputLayer.height]),\n      outputLayerIndex: this.layers.indexOf(this._outputLayer),\n      layers: jsonLayers as ILayerJSON[],\n      inputLayerIndex: this.layers.indexOf(this._inputLayer),\n    };\n  }\n\n  static fromJSON(\n    json: IFeedForwardJSON,\n    getLayer?: (\n      layerJson: ILayerJSON,\n      inputLayer1?: ILayer,\n      inputLayer2?: ILayer\n    ) => ILayer\n  ): FeedForward {\n    const jsonLayers = json.layers;\n    const layers: ILayer[] = [];\n    const inputLayer = getLayer\n      ? layerFromJSON(jsonLayers[0]) ?? getLayer(jsonLayers[0])\n      : layerFromJSON(jsonLayers[0]);\n\n    if (!inputLayer) throw new Error('unable to find layer');\n\n    layers.push(inputLayer);\n\n    for (let i = 1; i < jsonLayers.length; i++) {\n      const jsonLayer = jsonLayers[i];\n      if (\n        typeof jsonLayer.inputLayerIndex === 'undefined' &&\n        typeof jsonLayer.inputLayer1Index === 'undefined' &&\n        typeof jsonLayer.inputLayer2Index === 'undefined'\n      ) {\n        const layer = getLayer\n          ? layerFromJSON(jsonLayer) ?? getLayer(jsonLayer)\n          : layerFromJSON(jsonLayer);\n        if (!layer) throw new Error('unable to find layer');\n        layers.push(layer);\n      } else if (typeof jsonLayer.inputLayerIndex === 'number') {\n        const inputLayer = layers[jsonLayer.inputLayerIndex];\n        if (!inputLayer) {\n          throw new Error('inputLayer1 not found');\n        }\n        const layer = getLayer\n          ? layerFromJSON(jsonLayer, inputLayer) ??\n            getLayer(jsonLayer, inputLayer)\n          : layerFromJSON(jsonLayer, inputLayer);\n        if (!layer) throw new Error('unable to find layer');\n        layers.push(layer);\n      } else {\n        if (typeof jsonLayer.inputLayer1Index !== 'number') {\n          throw new Error(\n            'Cannot create network from provided JSON. inputLayer1Index not defined.'\n          );\n        }\n        if (typeof jsonLayer.inputLayer2Index !== 'number') {\n          throw new Error(\n            'Cannot create network from provided JSON. inputLayer2Index not defined.'\n          );\n        }\n        const inputLayer1 = layers[jsonLayer.inputLayer1Index];\n        const inputLayer2 = layers[jsonLayer.inputLayer2Index];\n\n        if (inputLayer1 === undefined)\n          throw new Error(\n            `Cannot create network from provided JSON. layer of index ${jsonLayer.inputLayer1Index} not found.`\n          );\n        if (inputLayer2 === undefined)\n          throw new Error(\n            `Cannot create network from provided JSON. layer of index ${jsonLayer.inputLayer2Index} not found.`\n          );\n\n        const layer = getLayer\n          ? layerFromJSON(jsonLayer, inputLayer1, inputLayer2) ??\n            getLayer(jsonLayer, inputLayer1, inputLayer2)\n          : layerFromJSON(jsonLayer, inputLayer1, inputLayer2);\n\n        if (!layer) throw new Error('unable to find layer');\n        layers.push(layer);\n      }\n    }\n\n    return new this({ ...json, layers });\n  }\n\n  /**\n   *\n   * @returns {Function}\n   */\n  toFunction(): void {\n    throw new Error(\n      `${this.constructor.name}-toFunction is not yet implemented`\n    );\n  }\n\n  /**\n   * This will create a TrainStream (WriteStream) for us to send the training data to.\n   * @param opts training options\n   * @returns {TrainStream|*}\n   */\n  createTrainStream(): void {\n    throw new Error(\n      `${this.constructor.name}-createTrainStream is not yet implemented`\n    );\n  }\n}\n","export interface ILikelyNet<InputType, OutputType> {\n  run: (input: InputType) => OutputType;\n}\n\nexport function likely<\n  NetworkType extends ILikelyNet<\n    Parameters<NetworkType['run']>[0],\n    ReturnType<NetworkType['run']>\n  >\n>(\n  input: Parameters<NetworkType['run']>[0],\n  net: NetworkType\n): ReturnType<NetworkType['run']> | null {\n  if (!net) {\n    throw new TypeError(\n      `Required parameter 'net' is of type ${typeof net}. Must be of type 'brain.NeuralNetwork'`\n    );\n  }\n\n  const output = net.run(input);\n  let maxProp = null;\n  let maxValue = -1;\n\n  Object.entries(output).forEach(([key, value]) => {\n    if (\n      typeof value !== 'undefined' &&\n      typeof value === 'number' &&\n      value > maxValue\n    ) {\n      maxProp = key;\n      maxValue = value;\n    }\n  });\n\n  return maxProp;\n}\n","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.thaw = exports.Block = exports.Thaw = void 0;\n/**\n * thaw an array of items\n */\nvar Thaw = /** @class */ (function () {\n    function Thaw(items, options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        var _a = __assign(__assign({}, Thaw.defaultSettings), options), each = _a.each, done = _a.done;\n        this.i = 0;\n        this.isStopped = false;\n        this.items = items;\n        this.options = options;\n        this.tick = function () {\n            if (_this.isStopped)\n                return;\n            _this.timeout = setTimeout(_this.tick, 0);\n            if (Thaw.thawing)\n                return;\n            var item = _this.items[_this.i];\n            if (_this.i >= _this.items.length) {\n                if (done !== null) {\n                    Thaw.thawing = true;\n                    done();\n                    Thaw.thawing = false;\n                }\n                _this.isStopped = true;\n                clearTimeout(_this.timeout);\n                return;\n            }\n            if (each !== null) {\n                Thaw.thawing = true;\n                each(item, _this.i);\n                Thaw.thawing = false;\n            }\n            else if (item !== undefined) {\n                item();\n            }\n            _this.i++;\n        };\n        Thaw.thaws.push(this);\n        if (!options.delay) {\n            this.tick();\n        }\n    }\n    Object.defineProperty(Thaw, \"isThawing\", {\n        /**\n         * returns if Thaw.js is thawing\n         */\n        get: function () {\n            return Thaw.thawing;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Stops all Thaw instances\n     */\n    Thaw.stopAll = function () {\n        for (var i = 0; i < Thaw.thaws.length; i++) {\n            Thaw.thaws[i].stop();\n        }\n    };\n    /**\n     * readies thaw to continue\n     */\n    Thaw.prototype.makeReady = function () {\n        if (this.isStopped) {\n            this.isStopped = false;\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Adds an item to the end of this instance of Thaw and readies Thaw to process it\n     */\n    Thaw.prototype.add = function (item) {\n        this.items.push(item);\n        if (this.makeReady()) {\n            this.tick();\n        }\n        return this;\n    };\n    /**\n     * Inserts an item just after the current item being processed in Thaw and readies Thaw to process it\n     */\n    Thaw.prototype.insert = function (item) {\n        this.items.splice(this.i, 0, item);\n        if (this.makeReady()) {\n            this.tick();\n        }\n        return this;\n    };\n    /**\n     * Adds an Array to the end of this instance of Thaw and readies Thaw to process it\n     */\n    Thaw.prototype.addArray = function (items) {\n        this.items = this.items.concat(items);\n        if (this.makeReady()) {\n            this.tick();\n        }\n        return this;\n    };\n    /**\n     * Inserts an Array just after the current item being processed in Thaw and readies Thaw to process them\n     */\n    Thaw.prototype.insertArray = function (items) {\n        var before = this.items.splice(0, this.i);\n        var after = this.items;\n        this.items = before.concat(items, after);\n        if (this.makeReady()) {\n            this.tick();\n        }\n        return this;\n    };\n    /**\n     * Stops this instance of Thaw\n     */\n    Thaw.prototype.stop = function () {\n        this.isStopped = true;\n        clearTimeout(this.timeout);\n        if (this.options.done) {\n            this.options.done();\n        }\n        return this;\n    };\n    Thaw.thawing = false;\n    Thaw.thaws = [];\n    Thaw.defaultSettings = {\n        each: null,\n        done: null\n    };\n    return Thaw;\n}());\nexports.Thaw = Thaw;\n/**\n * simple thaw\n */\nfunction thaw(items, options) {\n    return new Thaw(items, options);\n}\nexports.thaw = thaw;\nvar Block = /** @class */ (function () {\n    function Block(options, count) {\n        if (count === void 0) { count = 200; }\n        this.index = 0;\n        this.thaws = [];\n        this.count = count;\n        this.options = options;\n    }\n    /**\n     * add an item to the end of items\n     */\n    Block.prototype.add = function (item) {\n        var next = this.next();\n        next.add(item);\n        return this;\n    };\n    /**\n     * add an Array to the end of items\n     */\n    Block.prototype.addArray = function (items) {\n        var next = this.next();\n        next.addArray(items);\n        return this;\n    };\n    /**\n     * insert an item into items @ current position\n     */\n    Block.prototype.insert = function (item) {\n        var next = this.next();\n        next.insert(item);\n        return this;\n    };\n    /**\n     * insert and array into items @ current position\n     */\n    Block.prototype.insertArray = function (items) {\n        var next = this.next();\n        next.insertArray(items);\n        return this;\n    };\n    /**\n     * Stops all thaws in this block\n     */\n    Block.prototype.stop = function () {\n        for (var i = 0; i < this.thaws.length; i++) {\n            this.thaws[i].stop();\n        }\n        return this;\n    };\n    /**\n     * Get next available in block\n     */\n    Block.prototype.next = function () {\n        var thaw;\n        var thaws = this.thaws;\n        if (thaws.length < this.count) {\n            thaw = new Thaw([], this.options);\n            thaws.push(thaw);\n        }\n        else {\n            thaw = thaws[this.index] || null;\n        }\n        this.index++;\n        if (this.index >= this.count) {\n            this.index = 0;\n        }\n        return thaw;\n    };\n    return Block;\n}());\nexports.Block = Block;\nif (typeof window !== 'undefined') {\n    // @ts-ignore\n    window.Thaw = Thaw;\n    // @ts-ignore\n    window.thaw = thaw;\n    // @ts-ignore\n    window.Thaw.Block = Block;\n}\n","export function arraysToFloat32Arrays(arrays: number[][]): Float32Array[] {\n  const result: Float32Array[] = [];\n  for (let i = 0; i < arrays.length; i++) {\n    result.push(Float32Array.from(arrays[i]));\n  }\n  return result;\n}\n\nexport function inputOutputArraysToFloat32Arrays(\n  input: number[][],\n  output: number[][]\n): Float32Array[] {\n  const result: Float32Array[] = [];\n  for (let i = 0; i < input.length; i++) {\n    result.push(Float32Array.from(input[i]));\n  }\n  for (let i = 0; i < output.length; i++) {\n    result.push(Float32Array.from(output[i]));\n  }\n  return result;\n}\n\nexport function arrayToFloat32Arrays(array: number[]): Float32Array[] {\n  const result: Float32Array[] = [];\n  for (let i = 0; i < array.length; i++) {\n    result.push(Float32Array.from([array[i]]));\n  }\n  return result;\n}\n\nexport function inputOutputArrayToFloat32Arrays(\n  input: number[],\n  output: number[]\n): Float32Array[] {\n  const result: Float32Array[] = [];\n  for (let i = 0; i < input.length; i++) {\n    result.push(Float32Array.from([input[i]]));\n  }\n  for (let i = 0; i < output.length; i++) {\n    result.push(Float32Array.from([output[i]]));\n  }\n  return result;\n}\n\nexport function arrayToFloat32Array(array: number[]): Float32Array {\n  return Float32Array.from(array);\n}\n\nexport function objectsToFloat32Arrays(\n  objects: Array<Record<string, number>>,\n  table: Record<string, number>,\n  length: number\n): Float32Array[] {\n  const results: Float32Array[] = [];\n  for (let i = 0; i < objects.length; i++) {\n    const object = objects[i];\n    const result = new Float32Array(length);\n    for (const p in object) {\n      if (object.hasOwnProperty(p)) {\n        result[table[p]] = object[p];\n      }\n    }\n    results.push(result);\n  }\n  return results;\n}\n\nexport function inputOutputObjectsToFloat32Arrays(\n  input: Array<Record<string, number>>,\n  output: Array<Record<string, number>>,\n  inputTable: Record<string, number>,\n  outputTable: Record<string, number>,\n  inputLength: number,\n  outputLength: number\n): Float32Array[] {\n  const results: Float32Array[] = [];\n  for (let i = 0; i < input.length; i++) {\n    const object = input[i];\n    const result = new Float32Array(inputLength);\n    for (const p in object) {\n      if (object.hasOwnProperty(p)) {\n        result[inputTable[p]] = object[p];\n      }\n    }\n    results.push(result);\n  }\n  for (let i = 0; i < output.length; i++) {\n    const object = output[i];\n    const result = new Float32Array(outputLength);\n    for (const p in object) {\n      if (object.hasOwnProperty(p)) {\n        result[outputTable[p]] = object[p];\n      }\n    }\n    results.push(result);\n  }\n  return results;\n}\n\nexport function objectToFloat32Arrays(\n  object: Record<string, number>\n): Float32Array[] {\n  const result: Float32Array[] = [];\n  for (const p in object) {\n    if (!object.hasOwnProperty(p)) continue;\n    result.push(Float32Array.from([object[p]]));\n  }\n  return result;\n}\n\nexport function inputOutputObjectToFloat32Arrays(\n  input: Record<string, number>,\n  output: Record<string, number>\n): Float32Array[] {\n  const result: Float32Array[] = [];\n  for (const p in input) {\n    if (!input.hasOwnProperty(p)) continue;\n    result.push(Float32Array.from([input[p]]));\n  }\n  for (const p in output) {\n    if (!output.hasOwnProperty(p)) continue;\n    result.push(Float32Array.from([output[p]]));\n  }\n  return result;\n}\n\nexport function objectToFloat32Array(\n  object: Record<string, number>,\n  table: Record<string, number>,\n  length: number\n): Float32Array {\n  const result = new Float32Array(length);\n  for (const p in object) {\n    if (object.hasOwnProperty(p)) {\n      result[table[p]] = object[p];\n    }\n  }\n  return result;\n}\n","export function max(\n  values:\n    | Float32Array\n    | {\n        [key: string]: number;\n      }\n): number {\n  if (Array.isArray(values) || values instanceof Float32Array) {\n    return Math.max(...values);\n  } else {\n    return Math.max(...Object.values(values));\n  }\n}\n","export function mse(errors: Float32Array): number {\n  // mean squared error\n  let sum = 0;\n  for (let i = 0; i < errors.length; i++) {\n    sum += errors[i] ** 2;\n  }\n  return sum / errors.length;\n}\n","import { Thaw } from 'thaw.js';\nimport { ITrainingStatus } from './feed-forward';\nimport { INumberHash, lookup } from './lookup';\nimport {\n  INeuralNetworkBinaryTestResult,\n  INeuralNetworkState,\n  INeuralNetworkTestResult,\n} from './neural-network-types';\nimport { arrayToFloat32Array } from './utilities/cast';\nimport { LookupTable } from './utilities/lookup-table';\nimport { max } from './utilities/max';\nimport { mse } from './utilities/mse';\nimport { randos } from './utilities/randos';\nimport { zeros } from './utilities/zeros';\n\ntype NeuralNetworkFormatter =\n  | ((v: INumberHash) => Float32Array)\n  | ((v: number[]) => Float32Array);\n\nfunction getTypedArrayFn(\n  value: INeuralNetworkData,\n  table: INumberHash | null\n): null | NeuralNetworkFormatter {\n  if ((value as Float32Array).buffer instanceof ArrayBuffer) {\n    return null;\n  }\n  if (Array.isArray(value)) {\n    return arrayToFloat32Array;\n  }\n  if (!table) throw new Error('table is not Object');\n  const { length } = Object.keys(table);\n  return (v: INumberHash): Float32Array => {\n    const array = new Float32Array(length);\n    for (const p in table) {\n      if (!table.hasOwnProperty(p)) continue;\n      array[table[p]] = v[p] || 0;\n    }\n    return array;\n  };\n}\n\nexport type NeuralNetworkActivation =\n  | 'sigmoid'\n  | 'relu'\n  | 'leaky-relu'\n  | 'tanh';\n\nexport interface IJSONLayer {\n  biases: number[];\n  weights: number[][];\n}\n\nexport interface INeuralNetworkJSON {\n  type: string;\n  sizes: number[];\n  layers: IJSONLayer[];\n  inputLookup: INumberHash | null;\n  inputLookupLength: number;\n  outputLookup: INumberHash | null;\n  outputLookupLength: number;\n  options: INeuralNetworkOptions;\n  trainOpts: INeuralNetworkTrainOptionsJSON;\n}\n\nexport interface INeuralNetworkOptions {\n  inputSize: number;\n  outputSize: number;\n  binaryThresh: number;\n  hiddenLayers?: number[];\n}\n\nexport function defaults(): INeuralNetworkOptions {\n  return {\n    inputSize: 0,\n    outputSize: 0,\n    binaryThresh: 0.5,\n  };\n}\n\nexport interface INeuralNetworkTrainOptionsJSON {\n  activation: NeuralNetworkActivation | string;\n  iterations: number;\n  errorThresh: number;\n  log: boolean;\n  logPeriod: number;\n  leakyReluAlpha: number;\n  learningRate: number;\n  momentum: number;\n  callbackPeriod: number;\n  timeout: number | 'Infinity';\n  praxis?: 'adam';\n  beta1: number;\n  beta2: number;\n  epsilon: number;\n}\n\nexport interface INeuralNetworkPreppedTrainingData<T> {\n  status: ITrainingStatus;\n  preparedData: Array<INeuralNetworkDatumFormatted<T>>;\n  endTime: number;\n}\n\nexport interface INeuralNetworkTrainOptions {\n  activation: NeuralNetworkActivation | string;\n  iterations: number;\n  errorThresh: number;\n  log: boolean | ((status: INeuralNetworkState) => void);\n  logPeriod: number;\n  leakyReluAlpha: number;\n  learningRate: number;\n  momentum: number;\n  callback?: (status: { iterations: number; error: number }) => void;\n  callbackPeriod: number;\n  timeout: number;\n  praxis?: 'adam';\n  beta1: number;\n  beta2: number;\n  epsilon: number;\n}\n\nexport function trainDefaults(): INeuralNetworkTrainOptions {\n  return {\n    activation: 'sigmoid',\n    iterations: 20000, // the maximum times to iterate the training data\n    errorThresh: 0.005, // the acceptable error percentage from training data\n    log: false, // true to use console.log, when a function is supplied it is used\n    logPeriod: 10, // iterations between logging out\n    leakyReluAlpha: 0.01,\n    learningRate: 0.3, // multiply's against the input and the delta then adds to momentum\n    momentum: 0.1, // multiply's against the specified \"change\" then adds to learning rate for change\n    callbackPeriod: 10, // the number of iterations through the training data between callback calls\n    timeout: Infinity, // the max number of milliseconds to train for\n    beta1: 0.9,\n    beta2: 0.999,\n    epsilon: 1e-8,\n  };\n}\n\nexport type INeuralNetworkData = number[] | Float32Array | Partial<INumberHash>;\n\n// TODO: should be replaced by ITrainingDatum\nexport interface INeuralNetworkDatum<InputType, OutputType> {\n  input: InputType;\n  output: OutputType;\n}\n\nexport interface INeuralNetworkDatumFormatted<T> {\n  input: T;\n  output: T;\n}\n\nexport class NeuralNetwork<\n  InputType extends INeuralNetworkData,\n  OutputType extends INeuralNetworkData\n> {\n  options: INeuralNetworkOptions = defaults();\n  trainOpts: INeuralNetworkTrainOptions = trainDefaults();\n  sizes: number[] = [];\n  outputLayer = -1;\n  biases: Float32Array[] = [];\n  weights: Float32Array[][] = []; // weights for bias nodes\n  outputs: Float32Array[] = [];\n  // state for training\n  deltas: Float32Array[] = [];\n  changes: Float32Array[][] = []; // for momentum\n  errors: Float32Array[] = [];\n\n  errorCheckInterval = 1;\n\n  inputLookup: INumberHash | null = null;\n  inputLookupLength = 0;\n  outputLookup: INumberHash | null = null;\n  outputLookupLength = 0;\n\n  _formatInput: NeuralNetworkFormatter | null = null;\n  _formatOutput: NeuralNetworkFormatter | null = null;\n\n  runInput: (input: Float32Array) => Float32Array = (input: Float32Array) => {\n    this.setActivation();\n    return this.runInput(input);\n  };\n\n  calculateDeltas: (output: Float32Array) => void = (\n    output: Float32Array\n  ): void => {\n    this.setActivation();\n    return this.calculateDeltas(output);\n  };\n\n  // adam\n  biasChangesLow: Float32Array[] = [];\n  biasChangesHigh: Float32Array[] = [];\n  changesLow: Float32Array[][] = [];\n  changesHigh: Float32Array[][] = [];\n  iterations = 0;\n\n  constructor(\n    options: Partial<INeuralNetworkOptions & INeuralNetworkTrainOptions> = {}\n  ) {\n    this.options = { ...this.options, ...options };\n    this.updateTrainingOptions(options);\n\n    const { inputSize, hiddenLayers, outputSize } = this.options;\n    if (inputSize && outputSize) {\n      this.sizes = [inputSize].concat(hiddenLayers ?? []).concat([outputSize]);\n    }\n  }\n\n  /**\n   *\n   * Expects this.sizes to have been set\n   */\n  initialize(): void {\n    if (!this.sizes.length) {\n      throw new Error('Sizes must be set before initializing');\n    }\n\n    this.outputLayer = this.sizes.length - 1;\n    this.biases = new Array(this.outputLayer); // weights for bias nodes\n    this.weights = new Array(this.outputLayer);\n    this.outputs = new Array(this.outputLayer);\n\n    // state for training\n    this.deltas = new Array(this.outputLayer);\n    this.changes = new Array(this.outputLayer); // for momentum\n    this.errors = new Array(this.outputLayer);\n\n    for (let layerIndex = 0; layerIndex <= this.outputLayer; layerIndex++) {\n      const size = this.sizes[layerIndex];\n      this.deltas[layerIndex] = zeros(size);\n      this.errors[layerIndex] = zeros(size);\n      this.outputs[layerIndex] = zeros(size);\n\n      if (layerIndex > 0) {\n        this.biases[layerIndex] = randos(size);\n        this.weights[layerIndex] = new Array(size);\n        this.changes[layerIndex] = new Array(size);\n\n        for (let nodeIndex = 0; nodeIndex < size; nodeIndex++) {\n          const prevSize = this.sizes[layerIndex - 1];\n          this.weights[layerIndex][nodeIndex] = randos(prevSize);\n          this.changes[layerIndex][nodeIndex] = zeros(prevSize);\n        }\n      }\n    }\n\n    this.setActivation();\n    if (this.trainOpts.praxis === 'adam') {\n      this._setupAdam();\n    }\n  }\n\n  setActivation(activation?: NeuralNetworkActivation): void {\n    const value = activation ?? this.trainOpts.activation;\n    switch (value) {\n      case 'sigmoid':\n        this.runInput = this._runInputSigmoid;\n        this.calculateDeltas = this._calculateDeltasSigmoid;\n        break;\n      case 'relu':\n        this.runInput = this._runInputRelu;\n        this.calculateDeltas = this._calculateDeltasRelu;\n        break;\n      case 'leaky-relu':\n        this.runInput = this._runInputLeakyRelu;\n        this.calculateDeltas = this._calculateDeltasLeakyRelu;\n        break;\n      case 'tanh':\n        this.runInput = this._runInputTanh;\n        this.calculateDeltas = this._calculateDeltasTanh;\n        break;\n      default:\n        throw new Error(\n          `Unknown activation ${value}. Available activations are: 'sigmoid', 'relu', 'leaky-relu', 'tanh'`\n        );\n    }\n  }\n\n  get isRunnable(): boolean {\n    return this.sizes.length > 0;\n  }\n\n  run(input: Partial<InputType>): OutputType {\n    if (!this.isRunnable) {\n      throw new Error('network not runnable');\n    }\n    let formattedInput: Float32Array;\n    if (this.inputLookup) {\n      formattedInput = lookup.toArray(\n        this.inputLookup,\n        (input as unknown) as INumberHash,\n        this.inputLookupLength\n      );\n    } else {\n      formattedInput = (input as unknown) as Float32Array;\n    }\n    if (formattedInput.length !== this.sizes[0]) {\n      throw new Error(`input is not in correct length of ${this.sizes[0]}`);\n    }\n    const output = this.runInput(formattedInput).slice(0);\n    if (this.outputLookup) {\n      return (lookup.toObject(\n        this.outputLookup,\n        output\n      ) as unknown) as OutputType;\n    }\n    return (output as unknown) as OutputType;\n  }\n\n  _runInputSigmoid(input: Float32Array): Float32Array {\n    this.outputs[0] = input; // set output state of input layer\n\n    let output = null;\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      const activeLayer = this.sizes[layer];\n      const activeWeights = this.weights[layer];\n      const activeBiases = this.biases[layer];\n      const activeOutputs = this.outputs[layer];\n      for (let node = 0; node < activeLayer; node++) {\n        const weights = activeWeights[node];\n\n        let sum = activeBiases[node];\n        for (let k = 0; k < weights.length; k++) {\n          sum += weights[k] * input[k];\n        }\n        // sigmoid\n        activeOutputs[node] = 1 / (1 + Math.exp(-sum));\n      }\n      output = input = activeOutputs;\n    }\n    if (!output) {\n      throw new Error('output was empty');\n    }\n    return output;\n  }\n\n  _runInputRelu(input: Float32Array): Float32Array {\n    this.outputs[0] = input; // set output state of input layer\n\n    let output = null;\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      const activeSize = this.sizes[layer];\n      const activeWeights = this.weights[layer];\n      const activeBiases = this.biases[layer];\n      const activeOutputs = this.outputs[layer];\n      for (let node = 0; node < activeSize; node++) {\n        const weights = activeWeights[node];\n\n        let sum = activeBiases[node];\n        for (let k = 0; k < weights.length; k++) {\n          sum += weights[k] * input[k];\n        }\n        // relu\n        activeOutputs[node] = sum < 0 ? 0 : sum;\n      }\n      output = input = activeOutputs;\n    }\n    if (!output) {\n      throw new Error('output was empty');\n    }\n    return output;\n  }\n\n  _runInputLeakyRelu(input: Float32Array): Float32Array {\n    this.outputs[0] = input; // set output state of input layer\n    const { leakyReluAlpha } = this.trainOpts;\n    let output = null;\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      const activeSize = this.sizes[layer];\n      const activeWeights = this.weights[layer];\n      const activeBiases = this.biases[layer];\n      const activeOutputs = this.outputs[layer];\n      for (let node = 0; node < activeSize; node++) {\n        const weights = activeWeights[node];\n\n        let sum = activeBiases[node];\n        for (let k = 0; k < weights.length; k++) {\n          sum += weights[k] * input[k];\n        }\n        // leaky relu\n        activeOutputs[node] = Math.max(sum, leakyReluAlpha * sum);\n      }\n      output = input = activeOutputs;\n    }\n    if (!output) {\n      throw new Error('output was empty');\n    }\n    return output;\n  }\n\n  _runInputTanh(input: Float32Array): Float32Array {\n    this.outputs[0] = input; // set output state of input layer\n\n    let output = null;\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      const activeSize = this.sizes[layer];\n      const activeWeights = this.weights[layer];\n      const activeBiases = this.biases[layer];\n      const activeOutputs = this.outputs[layer];\n      for (let node = 0; node < activeSize; node++) {\n        const weights = activeWeights[node];\n\n        let sum = activeBiases[node];\n        for (let k = 0; k < weights.length; k++) {\n          sum += weights[k] * input[k];\n        }\n        // tanh\n        activeOutputs[node] = Math.tanh(sum);\n      }\n      output = input = activeOutputs;\n    }\n    if (!output) {\n      throw new Error('output was empty');\n    }\n    return output;\n  }\n\n  /**\n   *\n   * Verifies network sizes are initialized\n   * If they are not it will initialize them based off the data set.\n   */\n  verifyIsInitialized(\n    preparedData: Array<INeuralNetworkDatumFormatted<Float32Array>>\n  ): void {\n    if (this.sizes.length) return;\n\n    this.sizes = [];\n    this.sizes.push(preparedData[0].input.length);\n    if (!this.options.hiddenLayers) {\n      this.sizes.push(\n        Math.max(3, Math.floor(preparedData[0].input.length / 2))\n      );\n    } else {\n      this.options.hiddenLayers.forEach((size) => {\n        this.sizes.push(size);\n      });\n    }\n    this.sizes.push(preparedData[0].output.length);\n\n    this.initialize();\n  }\n\n  updateTrainingOptions(trainOpts: Partial<INeuralNetworkTrainOptions>): void {\n    const merged = { ...this.trainOpts, ...trainOpts };\n    this.validateTrainingOptions(merged);\n    this.trainOpts = merged;\n    this.setLogMethod(this.trainOpts.log);\n  }\n\n  validateTrainingOptions(options: INeuralNetworkTrainOptions): void {\n    const validations: { [fnName: string]: () => boolean } = {\n      activation: () => {\n        return ['sigmoid', 'relu', 'leaky-relu', 'tanh'].includes(\n          options.activation\n        );\n      },\n      iterations: () => {\n        const val = options.iterations;\n        return typeof val === 'number' && val > 0;\n      },\n      errorThresh: () => {\n        const val = options.errorThresh;\n        return typeof val === 'number' && val > 0 && val < 1;\n      },\n      log: () => {\n        const val = options.log;\n        return typeof val === 'function' || typeof val === 'boolean';\n      },\n      logPeriod: () => {\n        const val = options.logPeriod;\n        return typeof val === 'number' && val > 0;\n      },\n      leakyReluAlpha: () => {\n        const val = options.leakyReluAlpha;\n        return typeof val === 'number' && val > 0 && val < 1;\n      },\n      learningRate: () => {\n        const val = options.learningRate;\n        return typeof val === 'number' && val > 0 && val < 1;\n      },\n      momentum: () => {\n        const val = options.momentum;\n        return typeof val === 'number' && val > 0 && val < 1;\n      },\n      callback: () => {\n        const val = options.callback;\n        return typeof val === 'function' || val === undefined;\n      },\n      callbackPeriod: () => {\n        const val = options.callbackPeriod;\n        return typeof val === 'number' && val > 0;\n      },\n      timeout: () => {\n        const val = options.timeout;\n        return typeof val === 'number' && val > 0;\n      },\n      praxis: () => {\n        const val = options.praxis;\n        return !val || val === 'adam';\n      },\n      beta1: () => {\n        const val = options.beta1;\n        return val > 0 && val < 1;\n      },\n      beta2: () => {\n        const val = options.beta2;\n        return val > 0 && val < 1;\n      },\n      epsilon: () => {\n        const val = options.epsilon;\n        return val > 0 && val < 1;\n      },\n    };\n    for (const p in validations) {\n      const v = (options as unknown) as { [v: string]: string };\n      if (!validations[p]()) {\n        throw new Error(\n          `[${p}, ${v[p]}] is out of normal training range, your network will probably not train.`\n        );\n      }\n    }\n  }\n\n  /**\n   *\n   *  Gets JSON of trainOpts object\n   *    NOTE: Activation is stored directly on JSON object and not in the training options\n   */\n  getTrainOptsJSON(): INeuralNetworkTrainOptionsJSON {\n    const {\n      activation,\n      iterations,\n      errorThresh,\n      log,\n      logPeriod,\n      leakyReluAlpha,\n      learningRate,\n      momentum,\n      callbackPeriod,\n      timeout,\n      praxis,\n      beta1,\n      beta2,\n      epsilon,\n    } = this.trainOpts;\n    return {\n      activation,\n      iterations,\n      errorThresh,\n      log:\n        typeof log === 'function'\n          ? true\n          : typeof log === 'boolean'\n          ? log\n          : false,\n      logPeriod,\n      leakyReluAlpha,\n      learningRate,\n      momentum,\n      callbackPeriod,\n      timeout: timeout === Infinity ? 'Infinity' : timeout,\n      praxis,\n      beta1,\n      beta2,\n      epsilon,\n    };\n  }\n\n  setLogMethod(log: boolean | ((state: INeuralNetworkState) => void)): void {\n    if (typeof log === 'function') {\n      this.trainOpts.log = log;\n    } else if (log) {\n      this.trainOpts.log = this.logTrainingStatus;\n    } else {\n      this.trainOpts.log = false;\n    }\n  }\n\n  logTrainingStatus(status: INeuralNetworkState): void {\n    console.log(\n      `iterations: ${status.iterations}, training error: ${status.error}`\n    );\n  }\n\n  calculateTrainingError(\n    data: Array<INeuralNetworkDatumFormatted<Float32Array>>\n  ): number {\n    let sum = 0;\n    for (let i = 0; i < data.length; ++i) {\n      sum += this.trainPattern(data[i], true) as number;\n    }\n    return sum / data.length;\n  }\n\n  trainPatterns(data: Array<INeuralNetworkDatumFormatted<Float32Array>>): void {\n    for (let i = 0; i < data.length; ++i) {\n      this.trainPattern(data[i]);\n    }\n  }\n\n  trainingTick(\n    data: Array<INeuralNetworkDatumFormatted<Float32Array>>,\n    status: INeuralNetworkState,\n    endTime: number\n  ): boolean {\n    const {\n      callback,\n      callbackPeriod,\n      errorThresh,\n      iterations,\n      log,\n      logPeriod,\n    } = this.trainOpts;\n\n    if (\n      status.iterations >= iterations ||\n      status.error <= errorThresh ||\n      Date.now() >= endTime\n    ) {\n      return false;\n    }\n\n    status.iterations++;\n\n    if (log && status.iterations % logPeriod === 0) {\n      status.error = this.calculateTrainingError(data);\n      (log as (state: INeuralNetworkState) => void)(status);\n    } else if (status.iterations % this.errorCheckInterval === 0) {\n      status.error = this.calculateTrainingError(data);\n    } else {\n      this.trainPatterns(data);\n    }\n\n    if (callback && status.iterations % callbackPeriod === 0) {\n      callback({\n        iterations: status.iterations,\n        error: status.error,\n      });\n    }\n    return true;\n  }\n\n  prepTraining(\n    data: Array<INeuralNetworkDatum<InputType, OutputType>>,\n    options: Partial<INeuralNetworkTrainOptions> = {}\n  ): INeuralNetworkPreppedTrainingData<Float32Array> {\n    this.updateTrainingOptions(options);\n    const preparedData = this.formatData(data);\n    const endTime = Date.now() + this.trainOpts.timeout;\n\n    const status = {\n      error: 1,\n      iterations: 0,\n    };\n\n    this.verifyIsInitialized(preparedData);\n\n    return {\n      preparedData,\n      status,\n      endTime,\n    };\n  }\n\n  train(\n    data: Array<INeuralNetworkDatum<Partial<InputType>, Partial<OutputType>>>,\n    options: Partial<INeuralNetworkTrainOptions> = {}\n  ): INeuralNetworkState {\n    const { preparedData, status, endTime } = this.prepTraining(\n      data as Array<INeuralNetworkDatum<InputType, OutputType>>,\n      options\n    );\n\n    while (true) {\n      if (!this.trainingTick(preparedData, status, endTime)) {\n        break;\n      }\n    }\n    return status;\n  }\n\n  async trainAsync(\n    data: Array<INeuralNetworkDatum<InputType, OutputType>>,\n    options: Partial<INeuralNetworkTrainOptions> = {}\n  ): Promise<ITrainingStatus> {\n    const { preparedData, status, endTime } = this.prepTraining(data, options);\n\n    return await new Promise((resolve, reject) => {\n      try {\n        const thawedTrain: Thaw = new Thaw(\n          new Array(this.trainOpts.iterations),\n          {\n            delay: true,\n            each: () =>\n              this.trainingTick(preparedData, status, endTime) ||\n              thawedTrain.stop(),\n            done: () => resolve(status),\n          }\n        );\n        thawedTrain.tick();\n      } catch (trainError) {\n        reject(trainError);\n      }\n    });\n  }\n\n  trainPattern(\n    value: INeuralNetworkDatumFormatted<Float32Array>,\n    logErrorRate?: boolean\n  ): number | null {\n    // forward propagate\n    this.runInput(value.input);\n\n    // back propagate\n    this.calculateDeltas(value.output);\n    this.adjustWeights();\n\n    if (logErrorRate) {\n      return mse(this.errors[this.outputLayer]);\n    }\n    return null;\n  }\n\n  _calculateDeltasSigmoid(target: Float32Array): void {\n    for (let layer = this.outputLayer; layer >= 0; layer--) {\n      const activeSize = this.sizes[layer];\n      const activeOutput = this.outputs[layer];\n      const activeError = this.errors[layer];\n      const activeDeltas = this.deltas[layer];\n      const nextLayer = this.weights[layer + 1];\n\n      for (let node = 0; node < activeSize; node++) {\n        const output = activeOutput[node];\n\n        let error = 0;\n        if (layer === this.outputLayer) {\n          error = target[node] - output;\n        } else {\n          const deltas = this.deltas[layer + 1];\n          for (let k = 0; k < deltas.length; k++) {\n            error += deltas[k] * nextLayer[k][node];\n          }\n        }\n        activeError[node] = error;\n        activeDeltas[node] = error * output * (1 - output);\n      }\n    }\n  }\n\n  _calculateDeltasRelu(target: Float32Array): void {\n    for (let layer = this.outputLayer; layer >= 0; layer--) {\n      const currentSize = this.sizes[layer];\n      const currentOutputs = this.outputs[layer];\n      const nextWeights = this.weights[layer + 1];\n      const nextDeltas = this.deltas[layer + 1];\n      const currentErrors = this.errors[layer];\n      const currentDeltas = this.deltas[layer];\n\n      for (let node = 0; node < currentSize; node++) {\n        const output = currentOutputs[node];\n\n        let error = 0;\n        if (layer === this.outputLayer) {\n          error = target[node] - output;\n        } else {\n          for (let k = 0; k < nextDeltas.length; k++) {\n            error += nextDeltas[k] * nextWeights[k][node];\n          }\n        }\n        currentErrors[node] = error;\n        currentDeltas[node] = output > 0 ? error : 0;\n      }\n    }\n  }\n\n  _calculateDeltasLeakyRelu(target: Float32Array): void {\n    const alpha = this.trainOpts.leakyReluAlpha;\n    for (let layer = this.outputLayer; layer >= 0; layer--) {\n      const currentSize = this.sizes[layer];\n      const currentOutputs = this.outputs[layer];\n      const nextDeltas = this.deltas[layer + 1];\n      const nextWeights = this.weights[layer + 1];\n      const currentErrors = this.errors[layer];\n      const currentDeltas = this.deltas[layer];\n\n      for (let node = 0; node < currentSize; node++) {\n        const output = currentOutputs[node];\n\n        let error = 0;\n        if (layer === this.outputLayer) {\n          error = target[node] - output;\n        } else {\n          for (let k = 0; k < nextDeltas.length; k++) {\n            error += nextDeltas[k] * nextWeights[k][node];\n          }\n        }\n        currentErrors[node] = error;\n        currentDeltas[node] = output > 0 ? error : alpha * error;\n      }\n    }\n  }\n\n  _calculateDeltasTanh(target: Float32Array): void {\n    for (let layer = this.outputLayer; layer >= 0; layer--) {\n      const currentSize = this.sizes[layer];\n      const currentOutputs = this.outputs[layer];\n      const nextDeltas = this.deltas[layer + 1];\n      const nextWeights = this.weights[layer + 1];\n      const currentErrors = this.errors[layer];\n      const currentDeltas = this.deltas[layer];\n\n      for (let node = 0; node < currentSize; node++) {\n        const output = currentOutputs[node];\n\n        let error = 0;\n        if (layer === this.outputLayer) {\n          error = target[node] - output;\n        } else {\n          for (let k = 0; k < nextDeltas.length; k++) {\n            error += nextDeltas[k] * nextWeights[k][node];\n          }\n        }\n        currentErrors[node] = error;\n        currentDeltas[node] = (1 - output * output) * error;\n      }\n    }\n  }\n\n  /**\n   *\n   * Changes weights of networks\n   */\n  adjustWeights(): void {\n    const { learningRate, momentum } = this.trainOpts;\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      const incoming = this.outputs[layer - 1];\n      const activeSize = this.sizes[layer];\n      const activeDelta = this.deltas[layer];\n      const activeChanges = this.changes[layer];\n      const activeWeights = this.weights[layer];\n      const activeBiases = this.biases[layer];\n\n      for (let node = 0; node < activeSize; node++) {\n        const delta = activeDelta[node];\n\n        for (let k = 0; k < incoming.length; k++) {\n          let change = activeChanges[node][k];\n\n          change = learningRate * delta * incoming[k] + momentum * change;\n\n          activeChanges[node][k] = change;\n          activeWeights[node][k] += change;\n        }\n        activeBiases[node] += learningRate * delta;\n      }\n    }\n  }\n\n  _setupAdam(): void {\n    this.biasChangesLow = [];\n    this.biasChangesHigh = [];\n    this.changesLow = [];\n    this.changesHigh = [];\n    this.iterations = 0;\n\n    for (let layer = 0; layer <= this.outputLayer; layer++) {\n      const size = this.sizes[layer];\n      if (layer > 0) {\n        this.biasChangesLow[layer] = zeros(size);\n        this.biasChangesHigh[layer] = zeros(size);\n        this.changesLow[layer] = new Array(size);\n        this.changesHigh[layer] = new Array(size);\n\n        for (let node = 0; node < size; node++) {\n          const prevSize = this.sizes[layer - 1];\n          this.changesLow[layer][node] = zeros(prevSize);\n          this.changesHigh[layer][node] = zeros(prevSize);\n        }\n      }\n    }\n\n    this.adjustWeights = this._adjustWeightsAdam;\n  }\n\n  _adjustWeightsAdam(): void {\n    this.iterations++;\n\n    const { iterations } = this;\n    const { beta1, beta2, epsilon, learningRate } = this.trainOpts;\n\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      const incoming = this.outputs[layer - 1];\n      const currentSize = this.sizes[layer];\n      const currentDeltas = this.deltas[layer];\n      const currentChangesLow = this.changesLow[layer];\n      const currentChangesHigh = this.changesHigh[layer];\n      const currentWeights = this.weights[layer];\n      const currentBiases = this.biases[layer];\n      const currentBiasChangesLow = this.biasChangesLow[layer];\n      const currentBiasChangesHigh = this.biasChangesHigh[layer];\n\n      for (let node = 0; node < currentSize; node++) {\n        const delta = currentDeltas[node];\n\n        for (let k = 0; k < incoming.length; k++) {\n          const gradient = delta * incoming[k];\n          const changeLow =\n            currentChangesLow[node][k] * beta1 + (1 - beta1) * gradient;\n          const changeHigh =\n            currentChangesHigh[node][k] * beta2 +\n            (1 - beta2) * gradient * gradient;\n\n          const momentumCorrection =\n            changeLow / (1 - Math.pow(beta1, iterations));\n          const gradientCorrection =\n            changeHigh / (1 - Math.pow(beta2, iterations));\n\n          currentChangesLow[node][k] = changeLow;\n          currentChangesHigh[node][k] = changeHigh;\n          currentWeights[node][k] +=\n            (learningRate * momentumCorrection) /\n            (Math.sqrt(gradientCorrection) + epsilon);\n        }\n\n        const biasGradient = currentDeltas[node];\n        const biasChangeLow =\n          currentBiasChangesLow[node] * beta1 + (1 - beta1) * biasGradient;\n        const biasChangeHigh =\n          currentBiasChangesHigh[node] * beta2 +\n          (1 - beta2) * biasGradient * biasGradient;\n\n        const biasMomentumCorrection =\n          currentBiasChangesLow[node] / (1 - Math.pow(beta1, iterations));\n        const biasGradientCorrection =\n          currentBiasChangesHigh[node] / (1 - Math.pow(beta2, iterations));\n\n        currentBiasChangesLow[node] = biasChangeLow;\n        currentBiasChangesHigh[node] = biasChangeHigh;\n        currentBiases[node] +=\n          (learningRate * biasMomentumCorrection) /\n          (Math.sqrt(biasGradientCorrection) + epsilon);\n      }\n    }\n  }\n\n  formatData(\n    data: Array<INeuralNetworkDatum<InputType, OutputType>>\n  ): Array<INeuralNetworkDatumFormatted<Float32Array>> {\n    if (!Array.isArray(data[0].input)) {\n      if (this.inputLookup) {\n        this.inputLookupLength = Object.keys(this.inputLookup).length;\n      } else {\n        const inputLookup = new LookupTable(data, 'input');\n        this.inputLookup = inputLookup.table;\n        this.inputLookupLength = inputLookup.length;\n      }\n    }\n\n    if (!Array.isArray(data[0].output)) {\n      if (this.outputLookup) {\n        this.outputLookupLength = Object.keys(this.outputLookup).length;\n      } else {\n        const lookup = new LookupTable(data, 'output');\n        this.outputLookup = lookup.table;\n        this.outputLookupLength = lookup.length;\n      }\n    }\n\n    if (!this._formatInput) {\n      this._formatInput = getTypedArrayFn(data[0].input, this.inputLookup);\n    }\n\n    if (!this._formatOutput) {\n      this._formatOutput = getTypedArrayFn(data[0].output, this.outputLookup);\n    }\n\n    // turn sparse hash input into arrays with 0s as filler\n    if (this._formatInput && this._formatOutput) {\n      const result: Array<INeuralNetworkDatumFormatted<Float32Array>> = [];\n      for (let i = 0; i < data.length; i++) {\n        result.push({\n          input: (this._formatInput as (v: INumberHash) => Float32Array)(\n            (data[i].input as unknown) as INumberHash\n          ),\n          output: (this._formatOutput as (v: INumberHash) => Float32Array)(\n            (data[i].output as unknown) as INumberHash\n          ),\n        });\n      }\n      return result;\n    }\n    if (this._formatInput) {\n      const result: Array<INeuralNetworkDatumFormatted<Float32Array>> = [];\n      for (let i = 0; i < data.length; i++) {\n        result.push({\n          input: (this._formatInput as (v: INumberHash) => Float32Array)(\n            (data[i].input as unknown) as INumberHash\n          ),\n          output: (data[i].output as unknown) as Float32Array,\n        });\n      }\n      return result;\n    }\n    if (this._formatOutput) {\n      const result: Array<INeuralNetworkDatumFormatted<Float32Array>> = [];\n      for (let i = 0; i < data.length; i++) {\n        result.push({\n          input: (data[i].input as unknown) as Float32Array,\n          output: (this._formatOutput as (v: INumberHash) => Float32Array)(\n            (data[i].output as unknown) as INumberHash\n          ),\n        });\n      }\n      return result;\n    }\n    return (data as unknown) as Array<\n      INeuralNetworkDatumFormatted<Float32Array>\n    >;\n  }\n\n  addFormat(data: INeuralNetworkDatum<InputType, OutputType>): void {\n    if (!Array.isArray(data.input) || typeof data.input[0] !== 'number') {\n      this.inputLookup = lookup.addKeys(\n        (data.input as unknown) as INumberHash,\n        this.inputLookup ?? {}\n      );\n      if (this.inputLookup) {\n        this.inputLookupLength = Object.keys(this.inputLookup).length;\n      }\n    }\n    if (!Array.isArray(data.output) || typeof data.output[0] !== 'number') {\n      this.outputLookup = lookup.addKeys(\n        (data.output as unknown) as INumberHash,\n        this.outputLookup ?? {}\n      );\n      if (this.outputLookup) {\n        this.outputLookupLength = Object.keys(this.outputLookup).length;\n      }\n    }\n  }\n\n  test(\n    data: Array<INeuralNetworkDatum<Partial<InputType>, Partial<OutputType>>>\n  ): INeuralNetworkTestResult | INeuralNetworkBinaryTestResult {\n    const { preparedData } = this.prepTraining(\n      data as Array<INeuralNetworkDatum<InputType, OutputType>>\n    );\n    // for binary classification problems with one output node\n    const isBinary = preparedData[0].output.length === 1;\n    // for classification problems\n    const misclasses = [];\n    // run each pattern through the trained network and collect\n    // error and misclassification statistics\n    let errorSum = 0;\n    if (isBinary) {\n      let falsePos = 0;\n      let falseNeg = 0;\n      let truePos = 0;\n      let trueNeg = 0;\n\n      for (let i = 0; i < preparedData.length; i++) {\n        const output = this.runInput(preparedData[i].input);\n        const target = preparedData[i].output;\n        const actual = output[0] > this.options.binaryThresh ? 1 : 0;\n        const expected = target[0];\n\n        if (actual !== expected) {\n          const misclass = preparedData[i];\n          misclasses.push({\n            input: misclass.input,\n            output: misclass.output,\n            actual,\n            expected,\n          });\n        }\n\n        if (actual === 0 && expected === 0) {\n          trueNeg++;\n        } else if (actual === 1 && expected === 1) {\n          truePos++;\n        } else if (actual === 0 && expected === 1) {\n          falseNeg++;\n        } else if (actual === 1 && expected === 0) {\n          falsePos++;\n        }\n\n        errorSum += mse(\n          output.map((value, i) => {\n            return target[i] - value;\n          })\n        );\n      }\n\n      return {\n        error: errorSum / preparedData.length,\n        misclasses,\n        total: preparedData.length,\n        trueNeg,\n        truePos,\n        falseNeg,\n        falsePos,\n        precision: truePos > 0 ? truePos / (truePos + falsePos) : 0,\n        recall: truePos > 0 ? truePos / (truePos + falseNeg) : 0,\n        accuracy: (trueNeg + truePos) / preparedData.length,\n      };\n    }\n\n    for (let i = 0; i < preparedData.length; i++) {\n      const output = this.runInput(preparedData[i].input);\n      const target = preparedData[i].output;\n      const actual = output.indexOf(max(output));\n      const expected = target.indexOf(max(target));\n\n      if (actual !== expected) {\n        const misclass = preparedData[i];\n        misclasses.push({\n          input: misclass.input,\n          output: misclass.output,\n          actual,\n          expected,\n        });\n      }\n\n      errorSum += mse(\n        output.map((value, i) => {\n          return target[i] - value;\n        })\n      );\n    }\n    return {\n      error: errorSum / preparedData.length,\n      misclasses,\n      total: preparedData.length,\n    };\n  }\n\n  toJSON(): INeuralNetworkJSON {\n    if (!this.isRunnable) {\n      this.initialize();\n    }\n    // use Array.from, keeping json small\n    const jsonLayerWeights = this.weights.map((layerWeights) => {\n      return layerWeights.map((layerWeights) => Array.from(layerWeights));\n    });\n    const jsonLayerBiases = this.biases.map((layerBiases) =>\n      Array.from(layerBiases)\n    );\n    const jsonLayers: IJSONLayer[] = [];\n    const outputLength = this.sizes.length - 1;\n    for (let i = 0; i <= outputLength; i++) {\n      jsonLayers.push({\n        weights: jsonLayerWeights[i] ?? [],\n        biases: jsonLayerBiases[i] ?? [],\n      });\n    }\n    return {\n      type: 'NeuralNetwork',\n      sizes: [...this.sizes],\n      layers: jsonLayers,\n      inputLookup: this.inputLookup ? { ...this.inputLookup } : null,\n      inputLookupLength: this.inputLookupLength,\n      outputLookup: this.outputLookup ? { ...this.outputLookup } : null,\n      outputLookupLength: this.outputLookupLength,\n      options: { ...this.options },\n      trainOpts: this.getTrainOptsJSON(),\n    };\n  }\n\n  fromJSON(json: INeuralNetworkJSON): this {\n    this.options = { ...defaults(), ...json.options };\n    if (json.hasOwnProperty('trainOpts')) {\n      const trainOpts = {\n        ...json.trainOpts,\n        timeout:\n          json.trainOpts.timeout === 'Infinity'\n            ? Infinity\n            : json.trainOpts.timeout,\n      };\n      this.updateTrainingOptions(trainOpts);\n    }\n    this.sizes = json.sizes;\n    this.initialize();\n\n    this.inputLookup = json.inputLookup ? { ...json.inputLookup } : null;\n    this.inputLookupLength = json.inputLookupLength;\n    this.outputLookup = json.outputLookup ? { ...json.outputLookup } : null;\n    this.outputLookupLength = json.outputLookupLength;\n\n    const jsonLayers = json.layers;\n    const layerWeights = this.weights.map((layerWeights, layerIndex) => {\n      return jsonLayers[layerIndex].weights.map((layerWeights) =>\n        Float32Array.from(layerWeights)\n      );\n    });\n    const layerBiases = this.biases.map((layerBiases, layerIndex) =>\n      Float32Array.from(jsonLayers[layerIndex].biases)\n    );\n    for (let i = 0; i <= this.outputLayer; i++) {\n      this.weights[i] = layerWeights[i] || [];\n      this.biases[i] = layerBiases[i] || [];\n    }\n    return this;\n  }\n\n  toFunction(\n    cb?: (source: string) => string\n  ): (input: Partial<InputType>) => OutputType {\n    const { activation, leakyReluAlpha } = this.trainOpts;\n    let needsVar = false;\n    const nodeHandle = (layerIndex: number, nodeIndex: number): string => {\n      if (layerIndex === 0) {\n        return `(input[${nodeIndex}]||0)`;\n      }\n\n      const weights: Float32Array = this.weights[layerIndex][nodeIndex];\n      const bias: number = this.biases[layerIndex][nodeIndex];\n      if (!weights) {\n        throw new Error(\n          `weights at layerIndex ${layerIndex} & nodeIndex ${nodeIndex} not found`\n        );\n      }\n      if (!bias) {\n        throw new Error(\n          `bias as layerIndex ${layerIndex} & nodeIndex ${nodeIndex} not found`\n        );\n      }\n      const weightsArray: string[] = [];\n      weights.forEach((weight: number, subNodeIndex: number): void => {\n        if (weight < 0) {\n          weightsArray.push(\n            `${weight}*${nodeHandle(layerIndex - 1, subNodeIndex)}`\n          );\n        } else {\n          weightsArray.push(\n            `+${weight}*${nodeHandle(layerIndex - 1, subNodeIndex)}`\n          );\n        }\n      });\n      const result = `(${bias.toString()}${weightsArray.join('')})`;\n\n      switch (activation) {\n        case 'sigmoid':\n          return `1/(1+1/Math.exp(${result}))`;\n        case 'relu': {\n          needsVar = true;\n          return `((v=${result})<0?0:v)`;\n        }\n        case 'leaky-relu': {\n          needsVar = true;\n          return `Math.max((v=${result}),${leakyReluAlpha}*v)`;\n        }\n        case 'tanh':\n          return `Math.tanh(${result})`;\n        default:\n          throw new Error(\n            `Unknown activation ${activation}. Available activations are: 'sigmoid', 'relu', 'leaky-relu', 'tanh'`\n          );\n      }\n    };\n\n    function checkKeys(keys: string[]): void {\n      if (keys.find((v) => v.includes('\"'))) {\n        throw new Error(`key contains '\"', which is not compatible`);\n      }\n    }\n\n    const layersAsMath: string[] = [];\n    let result: string;\n\n    let inputLookup = '';\n    if (this.inputLookup) {\n      const keys = Object.keys(this.inputLookup);\n      checkKeys(keys);\n      inputLookup = `input = new Float32Array([${Object.keys(this.inputLookup)\n        .map((key) => `input[\"${key}\"]`)\n        .join(',')}]);`;\n    }\n    if (this.sizes.length < 1) throw new Error('No layers');\n    for (\n      let nodeIndex = 0;\n      nodeIndex < this.sizes[this.outputLayer];\n      nodeIndex++\n    ) {\n      layersAsMath.push(nodeHandle(this.outputLayer, nodeIndex));\n    }\n    if (this.outputLookup) {\n      const keys = Object.keys(this.outputLookup);\n      checkKeys(keys);\n      const values = keys\n        .map((key, i) => `\"${key}\":${layersAsMath[i]}`)\n        .join(',');\n      result = `{${values}}`;\n    } else {\n      result = `[${layersAsMath.join(',')}]`;\n    }\n\n    const source = `${inputLookup}${needsVar ? 'var v;' : ''}return ${result};`;\n    // eslint-disable-next-line @typescript-eslint/no-implied-eval,no-new-func\n    return new Function('input', cb ? cb(source) : source) as (\n      input: Partial<InputType>\n    ) => OutputType;\n  }\n}\n","import {\n  alias,\n  GPU,\n  GPUFunction,\n  IKernelFunctionThis,\n  IKernelMapRunShortcut,\n  IMappedKernelResult,\n  KernelOutput,\n  Texture,\n  utils,\n} from 'gpu.js';\nimport { ITrainingStatus } from './feed-forward';\nimport { INumberHash, lookup } from './lookup';\nimport {\n  IJSONLayer,\n  INeuralNetworkDatum,\n  INeuralNetworkJSON,\n  INeuralNetworkOptions,\n  INeuralNetworkPreppedTrainingData,\n  INeuralNetworkTrainOptions,\n  NeuralNetwork,\n} from './neural-network';\nimport { release } from './utilities/kernel';\n\nexport interface INeuralNetworkGPUDatumFormatted {\n  input: KernelOutput;\n  output: KernelOutput;\n}\n\nexport interface INeuralNetworkGPUPreppedTrainingData\n  extends INeuralNetworkPreppedTrainingData<KernelOutput> {\n  status: ITrainingStatus;\n  endTime: number;\n}\n\ninterface ISizedKernelThis extends IKernelFunctionThis {\n  constants: {\n    size: number;\n  };\n}\n\nfunction weightedSumSigmoid(\n  this: ISizedKernelThis,\n  weights: number[][],\n  biases: number[],\n  inputs: number[]\n): number {\n  let sum = biases[this.thread.x];\n  for (let k = 0; k < this.constants.size; k++) {\n    sum += weights[this.thread.x][k] * inputs[k];\n  }\n  // sigmoid\n  return 1 / (1 + Math.exp(-sum));\n}\n\nfunction weightedSumRelu(\n  this: ISizedKernelThis,\n  weights: number[][],\n  biases: number[],\n  inputs: number[]\n): number {\n  let sum = biases[this.thread.x];\n  for (let k = 0; k < this.constants.size; k++) {\n    sum += weights[this.thread.x][k] * inputs[k];\n  }\n  // relu\n  return sum < 0 ? 0 : sum;\n}\n\nfunction weightedSumLeakyRelu(\n  this: ISizedKernelThis,\n  weights: number[][],\n  biases: number[],\n  inputs: number[]\n): number {\n  let sum = biases[this.thread.x];\n  for (let k = 0; k < this.constants.size; k++) {\n    sum += weights[this.thread.x][k] * inputs[k];\n  }\n  // leaky relu\n  return sum < 0 ? 0 : 0.01 * sum;\n}\n\nfunction weightedSumTanh(\n  this: ISizedKernelThis,\n  weights: number[][],\n  biases: number[],\n  inputs: number[]\n): number {\n  let sum = biases[this.thread.x];\n  for (let k = 0; k < this.constants.size; k++) {\n    sum += weights[this.thread.x][k] * inputs[k];\n  }\n  // tanh\n  return Math.tanh(sum);\n}\n\nfunction calcErrorOutput(output: number, target: number): number {\n  return target - output;\n}\n\nfunction calcDeltasSigmoid(error: number, output: number): number {\n  // sigmoid derivative\n  return error * output * (1 - output);\n}\n\nfunction calcDeltasRelu(error: number, output: number): number {\n  // relu derivative\n  return output > 0 ? error : 0;\n}\n\nfunction calcDeltasLeakyRelu(error: number, output: number): number {\n  // leaky relu derivative\n  return output > 0 ? error : 0.01 * error;\n}\n\nfunction calcDeltasTanh(error: number, output: number): number {\n  // tanh derivative\n  return (1 - output * output) * error;\n}\n\nfunction calcError(\n  x: number,\n  size: number,\n  nextWeights: number[][],\n  nextDeltas: number[]\n): number {\n  let error = 0;\n  for (let k = 0; k < size; k++) {\n    error += nextDeltas[k] * nextWeights[k][x];\n  }\n  return error;\n}\n\ninterface ILearningKernelThis extends IKernelFunctionThis {\n  constants: {\n    momentum: number;\n    learningRate: number;\n  };\n}\n\nfunction calcChanges(\n  learningRate: number,\n  momentum: number,\n  previousChange: number,\n  delta: number,\n  previousOutput: number\n): number {\n  return learningRate * delta * previousOutput + momentum * previousChange;\n}\n\nfunction addWeights(change: number, weight: number): number {\n  return change + weight;\n}\n\nfunction addBiases(\n  this: ILearningKernelThis,\n  biases: number[],\n  deltas: number[]\n): number {\n  return (\n    biases[this.thread.x] + deltas[this.thread.x] * this.constants.learningRate\n  );\n}\n\n// mean squared error, reimplemented for GPU\nfunction mse(this: ISizedKernelThis, errors: number[]): number {\n  let sum = 0;\n  for (let i = 0; i < this.constants.size; i++) {\n    sum += errors[i] ** 2;\n  }\n  return sum / this.constants.size;\n}\n\nexport interface INeuralNetworkGPUOptions extends INeuralNetworkOptions {\n  mode?: 'cpu' | 'gpu';\n}\n\nexport type BackPropagateOutput = (\n  this: IKernelFunctionThis,\n  outputs: KernelOutput,\n  targets: KernelOutput\n) => { result: KernelOutput; error: KernelOutput };\n\nexport type BackPropagateLayer = (\n  this: IKernelFunctionThis,\n  weights: KernelOutput,\n  outputs: KernelOutput,\n  deltas: KernelOutput\n) => { result: KernelOutput; error: KernelOutput };\n\nexport class NeuralNetworkGPU<InputType, OutputType> extends NeuralNetwork<\n  InputType,\n  OutputType\n> {\n  gpu: GPU;\n\n  texturizeInputData: (value: KernelOutput) => KernelOutput = () => {\n    throw new Error('not yet setup');\n  };\n\n  forwardPropagate: Array<\n    (\n      weights: KernelOutput,\n      biases: KernelOutput,\n      inputs: KernelOutput\n    ) => KernelOutput\n  > = [];\n\n  backwardPropagate: Array<BackPropagateOutput | BackPropagateLayer> = [];\n\n  changesPropagate: Array<\n    ((\n      this: IKernelFunctionThis<{\n        size: number;\n        learningRate: number;\n        momentum: number;\n      }>,\n      previousOutputs: number[],\n      deltas: number[],\n      weights: number[][],\n      previousChanges: number[][]\n    ) => IMappedKernelResult) &\n      IKernelMapRunShortcut<{ weights: number[][]; changes: number[][] }>\n  > = [];\n\n  biasesPropagate: Array<\n    (biases: KernelOutput, deltas: KernelOutput) => KernelOutput\n  > = [];\n\n  getMSE: (error: KernelOutput) => KernelOutput = () => {\n    throw new Error('not yet setup');\n  };\n\n  _addMSE: (sum: KernelOutput, error: KernelOutput) => KernelOutput = () => {\n    throw new Error('not yet setup');\n  };\n\n  _divideMSESum: (length: number, sum: KernelOutput) => KernelOutput = () => {\n    throw new Error('not yet setup');\n  };\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error\n  outputs: KernelOutput[] = [];\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error\n  deltas: KernelOutput[] = [];\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error\n  errors: KernelOutput[] = [];\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error\n  weights: KernelOutput[] = [];\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error\n  changes: KernelOutput[] = [];\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error\n  biases: KernelOutput[] = [];\n\n  constructor(options: Partial<INeuralNetworkGPUOptions> = {}) {\n    super(options);\n    this.errorCheckInterval = 100;\n    this.gpu = new GPU({ mode: options.mode });\n  }\n\n  initialize(): void {\n    super.initialize();\n    this.buildRunInput();\n    this.buildCalculateDeltas();\n    this.buildGetChanges();\n    this.buildChangeBiases();\n    this.buildGetMSE();\n  }\n\n  setActivation(): void {}\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error\n  trainPattern(\n    value: INeuralNetworkGPUDatumFormatted,\n    logErrorRate?: boolean\n  ): KernelOutput | null {\n    // forward propagate\n    this.runInput(value.input);\n\n    // back propagate\n    this.calculateDeltas(value.output);\n    this.adjustWeights();\n\n    if (logErrorRate) {\n      return this.getMSE(this.errors[this.outputLayer]);\n    }\n    return null;\n  }\n\n  calculateTrainingError(data: INeuralNetworkGPUDatumFormatted[]): number {\n    let sum = new Float32Array([0]) as KernelOutput;\n    for (let i = 0; i < data.length; ++i) {\n      const prevSum = sum;\n      const error = this.trainPattern(data[i], true) as KernelOutput;\n      sum = this._addMSE(sum, error);\n      release(error);\n      release(prevSum);\n    }\n    const result = this._divideMSESum(data.length, sum);\n    release(sum);\n    return (result instanceof Texture\n      ? (result.toArray() as number[])\n      : (result as number[]))[0];\n  }\n\n  adjustWeights(): void {\n    this.getChanges();\n    this.changeBiases();\n  }\n\n  buildRunInput(): void {\n    let weightedSum = null;\n\n    switch (this.trainOpts.activation) {\n      case 'sigmoid':\n        weightedSum = weightedSumSigmoid;\n        break;\n      case 'relu':\n        weightedSum = weightedSumRelu;\n        break;\n      case 'leaky-relu':\n        weightedSum = weightedSumLeakyRelu;\n        break;\n      case 'tanh':\n        weightedSum = weightedSumTanh;\n        break;\n      default:\n        throw new Error(\n          `Unknown activation ${this.trainOpts.activation}. Available activations are: 'sigmoid', 'relu', 'leaky-relu', 'tanh'`\n        );\n    }\n\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      this.forwardPropagate[layer] = this.gpu.createKernel(weightedSum, {\n        output: [this.sizes[layer]],\n        pipeline: true,\n        constants: {\n          size: this.sizes[layer - 1],\n        },\n        immutable: true,\n      });\n    }\n\n    this.texturizeInputData = this.gpu.createKernel(\n      function (value: number[]): number {\n        return value[this.thread.x];\n      },\n      {\n        output: [this.sizes[1]],\n        pipeline: true,\n        immutable: true,\n      }\n    );\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error\n  runInput = (input: KernelOutput): KernelOutput => {\n    let output;\n    this.outputs[0] = input;\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      release(this.outputs[layer]);\n      this.outputs[layer] = this.forwardPropagate[layer](\n        this.weights[layer],\n        this.biases[layer],\n        input\n      );\n      output = input = this.outputs[layer];\n    }\n    return output;\n  };\n\n  buildCalculateDeltas(): void {\n    let calcDeltas: GPUFunction<[number, number]>;\n    switch (this.trainOpts.activation) {\n      case 'sigmoid':\n        calcDeltas = calcDeltasSigmoid;\n        break;\n      case 'relu':\n        calcDeltas = calcDeltasRelu;\n        break;\n      case 'leaky-relu':\n        calcDeltas = calcDeltasLeakyRelu;\n        break;\n      case 'tanh':\n        calcDeltas = calcDeltasTanh;\n        break;\n      default:\n        throw new Error(\n          `Unknown activation ${this.trainOpts.activation}. Available activations are: 'sigmoid', 'relu', 'leaky-relu', 'tanh'`\n        );\n    }\n\n    calcDeltas = alias(\n      utils.getMinifySafeName(() => calcDeltas),\n      calcDeltas\n    );\n    this.gpu.addFunction(calcDeltas);\n    for (let layer = this.outputLayer; layer > 0; layer--) {\n      if (layer === this.outputLayer) {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-expect-error\n        this.backwardPropagate[this.outputLayer] = this.gpu.createKernelMap(\n          {\n            error: calcErrorOutput,\n          },\n          function (\n            this: IKernelFunctionThis,\n            outputs: number[],\n            targets: number[]\n          ): number {\n            const output = outputs[this.thread.x];\n            const target = targets[this.thread.x];\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-expect-error\n            return calcDeltas(calcErrorOutput(output, target), output);\n          },\n          {\n            output: [this.sizes[this.outputLayer]],\n            pipeline: true,\n            immutable: true,\n          }\n        );\n      } else {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-expect-error\n        this.backwardPropagate[layer] = this.gpu.createKernelMap(\n          {\n            error: calcError,\n          },\n          function (\n            this: ISizedKernelThis,\n            nextWeights: number[][],\n            outputs: number[],\n            nextDeltas: number[]\n          ): number {\n            const output = outputs[this.thread.x];\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-expect-error\n            return calcDeltas(\n              calcError(\n                this.thread.x,\n                this.constants.size,\n                nextWeights,\n                nextDeltas\n              ),\n              output\n            );\n          },\n          {\n            output: [this.sizes[layer]],\n            pipeline: true,\n            constants: {\n              size: this.sizes[layer + 1],\n            },\n            immutable: true,\n          }\n        );\n      }\n    }\n  }\n\n  calculateDeltas = (target: KernelOutput): void => {\n    for (let layer = this.outputLayer; layer > 0; layer--) {\n      release(this.deltas[layer]);\n      release(this.errors[layer]);\n\n      let output;\n      if (layer === this.outputLayer) {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-expect-error\n        output = this.backwardPropagate[layer](this.outputs[layer], target);\n      } else {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-expect-error\n        output = this.backwardPropagate[layer](\n          this.weights[layer + 1],\n          this.outputs[layer],\n          this.deltas[layer + 1]\n        );\n      }\n      this.deltas[layer] = output.result;\n      this.errors[layer] = output.error;\n    }\n  };\n\n  buildGetChanges(): void {\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-expect-error\n      this.changesPropagate[layer] = this.gpu.createKernelMap(\n        {\n          weights: addWeights,\n          changes: calcChanges,\n        },\n        function (\n          this: IKernelFunctionThis<{\n            size: number;\n            learningRate: number;\n            momentum: number;\n          }>,\n          previousOutputs: number[],\n          deltas: number[],\n          weights: number[][],\n          previousChanges: number[][]\n        ) {\n          const change = calcChanges(\n            this.constants.learningRate,\n            this.constants.momentum,\n            previousChanges[this.thread.y][this.thread.x],\n            deltas[this.thread.y],\n            previousOutputs[this.thread.x]\n          );\n          return addWeights(change, weights[this.thread.y][this.thread.x]);\n        },\n        {\n          output: [this.sizes[layer - 1], this.sizes[layer]],\n          pipeline: true,\n          constants: {\n            size: this.sizes[layer - 1],\n            learningRate: this.trainOpts.learningRate,\n            momentum: this.trainOpts.momentum,\n          },\n          immutable: true,\n        }\n      );\n    }\n  }\n\n  getChanges(): void {\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      const weights = this.weights[layer];\n      const changes = this.changes[layer];\n      const output = this.changesPropagate[layer](\n        this.outputs[layer - 1],\n        this.deltas[layer],\n        weights,\n        changes\n      );\n      release(weights);\n      release(changes);\n      this.weights[layer] = output.weights;\n      this.changes[layer] = output.changes;\n      release(output.result);\n    }\n  }\n\n  buildChangeBiases(): void {\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      this.biasesPropagate[layer] = this.gpu.createKernel(addBiases, {\n        output: [this.sizes[layer]],\n        pipeline: true,\n        constants: {\n          learningRate: this.trainOpts.learningRate,\n        },\n        immutable: true,\n      });\n    }\n  }\n\n  changeBiases(): void {\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      const biases = this.biases[layer];\n      this.biases[layer] = this.biasesPropagate[layer](\n        biases,\n        this.deltas[layer]\n      );\n      release(biases);\n    }\n  }\n\n  buildGetMSE(): void {\n    this.getMSE = this.gpu.createKernel(mse, {\n      output: [1],\n      constants: {\n        size: this.sizes[this.outputLayer],\n      },\n      pipeline: true,\n      immutable: true,\n    });\n    this._addMSE = this.gpu.createKernel(\n      function (value1: number[], value2: number[]): number {\n        return value1[0] + value2[0];\n      },\n      {\n        output: [1],\n        pipeline: true,\n        immutable: true,\n      }\n    );\n    this._divideMSESum = this.gpu.createKernel(\n      function (length: number, mseSum: number[]): number {\n        const value = mseSum[0];\n        if (value > 0) {\n          return value / length;\n        }\n        return 0;\n      },\n      {\n        output: [1],\n      }\n    );\n  }\n\n  run(input: InputType): OutputType {\n    if (!this.isRunnable) {\n      throw new Error('network not runnable');\n    }\n    let formattedInput: Float32Array;\n    if (this.inputLookup) {\n      formattedInput = lookup.toArray(\n        this.inputLookup,\n        (input as unknown) as INumberHash,\n        this.inputLookupLength\n      );\n    } else {\n      formattedInput = (input as unknown) as Float32Array;\n    }\n    const outputTextures = this.runInput(formattedInput);\n    const output =\n      outputTextures instanceof Texture\n        ? outputTextures.toArray()\n        : outputTextures;\n\n    if (this.outputLookup) {\n      return (lookup.toObject(\n        this.outputLookup,\n        output as Float32Array\n      ) as unknown) as OutputType;\n    }\n\n    return (output as unknown) as OutputType;\n  }\n\n  // @ts-expect-error the underlying network works as normal, but we are working on the GPU\n  prepTraining(\n    data: Array<INeuralNetworkDatum<InputType, OutputType>>,\n    options: Partial<INeuralNetworkTrainOptions> = {}\n  ): INeuralNetworkGPUPreppedTrainingData {\n    this.updateTrainingOptions(options);\n    const preparedData = this.formatData(data);\n    const endTime = Date.now() + this.trainOpts.timeout;\n\n    const status = {\n      error: 1,\n      iterations: 0,\n    };\n\n    this.verifyIsInitialized(preparedData);\n\n    const texturizeOutputData = this.gpu.createKernel(\n      function (value: number[]): number {\n        return value[this.thread.x];\n      },\n      {\n        output: [preparedData[0].output.length],\n        pipeline: true,\n        immutable: true,\n      }\n    );\n    return {\n      preparedData: preparedData.map((set) => ({\n        input: this.texturizeInputData(set.input),\n        output: texturizeOutputData(set.output),\n      })),\n      status,\n      endTime,\n    };\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error\n  toFunction(): (input: InputType) => OutputType {\n    throw new Error(\n      `${this.constructor.name}-toFunction is not yet implemented`\n    );\n  }\n\n  toJSON(): INeuralNetworkJSON {\n    if (this.sizes === null) {\n      this.initialize();\n    }\n    // use Array.from, keeping json small\n    const jsonLayerWeights = this.weights.map((layerWeights) => {\n      return (layerWeights instanceof Texture\n        ? (layerWeights.toArray() as Float32Array[])\n        : (layerWeights as Float32Array[])\n      ).map((layerWeights) => Array.from(layerWeights));\n    });\n    const jsonLayerBiases = this.biases.map((layerBiases) =>\n      Array.from(\n        layerBiases instanceof Texture\n          ? (layerBiases.toArray() as Float32Array)\n          : (layerBiases as Float32Array)\n      )\n    );\n    const jsonLayers: IJSONLayer[] = [];\n    for (let i = 0; i <= this.outputLayer; i++) {\n      jsonLayers.push({\n        weights: jsonLayerWeights[i] ?? [],\n        biases: jsonLayerBiases[i] ?? [],\n      });\n    }\n    return {\n      type: 'NeuralNetworkGPU',\n      sizes: [...this.sizes],\n      layers: jsonLayers,\n      inputLookup: this.inputLookup ? { ...this.inputLookup } : null,\n      inputLookupLength: this.inputLookupLength,\n      outputLookup: this.outputLookup ? { ...this.outputLookup } : null,\n      outputLookupLength: this.outputLookupLength,\n      options: { ...this.options },\n      trainOpts: this.getTrainOptsJSON(),\n    };\n  }\n}\n","import { KernelOutput } from 'gpu.js';\n\nimport { Internal } from './internal';\nimport { release } from '../utilities/kernel';\nimport { ILayer, ILayerSettings } from './base-layer';\n\nexport class RecurrentConnection extends Internal {\n  settings: ILayerSettings = {};\n  layer: ILayer | null = null;\n  setLayer(layer: ILayer): void {\n    this.layer = layer;\n  }\n\n  get width(): number {\n    if (!this.layer) throw new Error('layer not set');\n    return this.layer.width;\n  }\n\n  set width(value: number) {\n    throw new Error(`${this.constructor.name}-width is not yet implemented`);\n  }\n\n  get height(): number {\n    if (!this.layer) throw new Error('layer not set');\n    return this.layer.height;\n  }\n\n  set height(value: number) {\n    throw new Error(`${this.constructor.name}-height is not yet implemented`);\n  }\n\n  get deltas(): KernelOutput {\n    if (!this.layer) throw new Error('layer not set');\n    return this.layer.deltas;\n  }\n\n  set deltas(deltas: KernelOutput) {\n    if (!this.layer) throw new Error('layer not set');\n    release(this.layer.deltas);\n    this.layer.deltas = deltas;\n  }\n\n  get weights(): KernelOutput {\n    if (!this.layer) throw new Error('layer not set');\n    return this.layer.weights as KernelOutput;\n  }\n\n  set weights(weights: KernelOutput) {\n    if (!this.layer) throw new Error('layer not set');\n    release(this.layer.weights);\n    this.layer.weights = weights;\n  }\n\n  predict(): void {\n    // throw new Error(`${this.constructor.name}-predict is not yet implemented`)\n  }\n\n  compare(): void {\n    // throw new Error(`${this.constructor.name}-compare is not yet implemented`)\n  }\n\n  learn(): void {\n    throw new Error('no longer using');\n  }\n\n  setupKernels(): void {\n    // throw new Error(\n    //   `${this.constructor.name}-setupKernels is not yet implemented`\n    // )\n  }\n\n  reuseKernels(): void {\n    // throw new Error(\n    //   `${this.constructor.name}-reuseKernels is not yet implemented`\n    // )\n  }\n}\n","import { RecurrentConnection } from './layer/recurrent-connection';\nimport {\n  IRecurrentInput,\n  RecurrentInput,\n  RecurrentZeros,\n  ILayer,\n  ILayerSettings,\n} from './layer';\nimport {\n  Activation,\n  EntryPoint,\n  EntryPointType,\n  Filter,\n  Internal,\n  InternalModel,\n  Model,\n  Modifier,\n  Operator,\n  Target,\n} from './layer/types';\nimport { flattenLayers } from './utilities/flatten-layers';\nimport {\n  FeedForward,\n  IFeedForwardOptions,\n  IFeedForwardTrainingOptions,\n  ITrainingStatus,\n} from './feed-forward';\nimport { release, clone } from './utilities/kernel';\nimport { KernelOutput, Texture, TextureArrayOutput } from 'gpu.js';\nimport { OperatorType } from './layer/operator';\nimport { ModifierType } from './layer/modifier';\nimport { FilterType } from './layer/filter';\nimport { ActivationType } from './layer/activation';\nimport { TargetType } from './layer/target';\n\nexport interface IRecurrentTrainingOptions\n  extends IFeedForwardTrainingOptions {}\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-expect-error\nexport interface IRecurrentOptions extends IFeedForwardOptions {\n  hiddenLayers: Array<\n    (\n      inputLayer: ILayer,\n      recurrentInput: IRecurrentInput,\n      index: number\n    ) => ILayer\n  >;\n}\n\nexport interface IRecurrentPreppedTrainingData {\n  status: ITrainingStatus;\n  preparedData: KernelOutput[][];\n  endTime: number;\n}\n\nexport class Recurrent extends FeedForward {\n  trainOpts: IRecurrentTrainingOptions = {};\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error\n  options: IRecurrentOptions;\n  _outputConnection: RecurrentConnection | null = null;\n  _layerSets: ILayer[][] = [];\n  _hiddenLayerOutputIndices: number[] = [];\n  _model: ILayer[] | null = null;\n\n  // TODO: use generics in extend\n  constructor(\n    options: Partial<IRecurrentOptions & IRecurrentTrainingOptions> = {}\n  ) {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-expect-error\n    super(options);\n  }\n\n  _connectLayers(): {\n    inputLayer: ILayer;\n    hiddenLayers: ILayer[];\n    outputLayer: ILayer;\n  } {\n    if (!this.options.inputLayer) {\n      throw new Error('inputLayer not found');\n    }\n    if (!this.options.outputLayer) {\n      throw new Error('outputLayer not found');\n    }\n    const inputLayer = this.options.inputLayer();\n    const hiddenLayers = this._connectHiddenLayers(inputLayer);\n    const outputLayer = this.options.outputLayer(\n      hiddenLayers[hiddenLayers.length - 1],\n      -1\n    );\n    return {\n      inputLayer,\n      hiddenLayers,\n      outputLayer,\n    };\n  }\n\n  _connectLayersDeep(): ILayer[] {\n    const layers: ILayer[] = [];\n    const previousLayers = this._layerSets[this._layerSets.length - 1];\n    let usedHiddenLayerOutputIndex = 0;\n\n    function findInputLayer(inputLayer: ILayer) {\n      const index = previousLayers.indexOf(inputLayer);\n      if (index < 0) throw new Error('unable to find layer');\n      return layers[index];\n    }\n\n    function layerSettings(layer: ILayer): ILayerSettings {\n      return {\n        ...layer.settings,\n        weights: null,\n        deltas: null,\n        praxis: null,\n      };\n    }\n\n    for (let i = 0; i < previousLayers.length; i++) {\n      const previousLayer = previousLayers[i];\n      let layer: ILayer;\n\n      if (previousLayer instanceof Activation) {\n        layer = new (previousLayer.constructor as ActivationType)(\n          findInputLayer(previousLayer.inputLayer),\n          layerSettings(previousLayer)\n        );\n      } else if (previousLayer instanceof EntryPoint) {\n        layer = new (previousLayer.constructor as EntryPointType)(\n          layerSettings(previousLayer)\n        );\n      } else if (previousLayer instanceof Filter) {\n        layer = new (previousLayer.constructor as FilterType)(\n          layerSettings(previousLayer.inputLayer),\n          findInputLayer(previousLayer.inputLayer)\n        );\n      } else if (previousLayer instanceof Internal) {\n        const previousHiddenLayerOutput =\n          previousLayers[\n            this._hiddenLayerOutputIndices[usedHiddenLayerOutputIndex++]\n          ];\n        if (previousLayer instanceof RecurrentConnection) {\n          throw new Error('unfinished');\n        } else if (previousLayer instanceof RecurrentInput) {\n          layer = new RecurrentInput(previousHiddenLayerOutput);\n        } else if (previousLayer instanceof RecurrentZeros) {\n          layer = new RecurrentInput(previousHiddenLayerOutput);\n        } else {\n          throw new Error(\n            `hidden layer ${previousLayer.constructor.name} extends unknown hidden layer`\n          );\n        }\n      } else if (\n        previousLayer instanceof InternalModel ||\n        previousLayer instanceof Model\n      ) {\n        layer = previousLayer;\n      } else if (previousLayer instanceof Modifier) {\n        layer = new (previousLayer.constructor as ModifierType)(\n          findInputLayer(previousLayer.inputLayer),\n          layerSettings(previousLayer.inputLayer)\n        );\n      } else if (previousLayer instanceof Operator) {\n        layer = new (previousLayer.constructor as OperatorType)(\n          findInputLayer(previousLayer.inputLayer1),\n          findInputLayer(previousLayer.inputLayer2),\n          layerSettings(previousLayer)\n        );\n      } else if (previousLayer instanceof Target) {\n        layer = new (previousLayer.constructor as TargetType)(\n          layerSettings(previousLayer),\n          findInputLayer(previousLayer.inputLayer)\n        );\n      } else {\n        throw new Error(\n          `hidden layer ${previousLayer.constructor.name} extends unknown hidden layer`\n        );\n      }\n      layers.push(layer);\n    }\n\n    return layers;\n  }\n\n  _connectHiddenLayers(previousLayer: ILayer): ILayer[] {\n    const hiddenLayers = [];\n\n    if (!this.options.hiddenLayers) throw new Error('hiddenLayers not defined');\n\n    for (let i = 0; i < this.options.hiddenLayers.length; i++) {\n      const recurrentInput = new RecurrentZeros();\n      const hiddenLayer = this.options.hiddenLayers[i](\n        previousLayer,\n        recurrentInput,\n        i\n      );\n      previousLayer = hiddenLayer;\n      hiddenLayers.push(hiddenLayer);\n    }\n\n    return hiddenLayers;\n  }\n\n  initialize(): void {\n    this._outputConnection = new RecurrentConnection();\n    let layerSet: ILayer[];\n    if (this.options.layers) {\n      layerSet = this._connectOptionsLayers();\n    } else {\n      const { inputLayer, hiddenLayers, outputLayer } = this._connectLayers();\n      layerSet = flattenLayers([inputLayer, ...hiddenLayers, outputLayer]);\n      this._hiddenLayerOutputIndices = hiddenLayers.map((l) =>\n        layerSet.indexOf(l)\n      );\n      this._inputLayer = inputLayer;\n      this._hiddenLayers = hiddenLayers;\n      this._outputLayer = outputLayer;\n    }\n    this.layers = layerSet;\n    this._layerSets = [layerSet];\n    this._model = layerSet.filter(\n      (l) => l instanceof Model || l instanceof InternalModel\n    );\n    this.initializeLayers(layerSet);\n  }\n\n  initializeDeep(): void {\n    const layers = this._connectLayersDeep();\n    for (let i = 0; i < layers.length; i++) {\n      const layer = layers[i];\n      layer.setupKernels(true);\n      // TODO: enable this?\n      // layer.reuseKernels(this._layerSets[0][i]);\n    }\n    this._layerSets.push(layers);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error\n  run(inputs: KernelOutput[]): TextureArrayOutput {\n    while (this._layerSets.length <= inputs.length) {\n      this.initializeDeep();\n    }\n    const result = this.runInputs(inputs);\n    if (result instanceof Texture) return result.toArray();\n    return result as TextureArrayOutput;\n  }\n\n  runInput(input: KernelOutput): KernelOutput {\n    throw new Error('use .runInputs()');\n  }\n\n  runInputs(inputs: KernelOutput[]): KernelOutput {\n    while (this._layerSets.length < inputs.length) {\n      this.initializeDeep();\n    }\n    const max = inputs.length - 1; // last output will be compared with last index\n    for (let x = 0; x <= max; x++) {\n      const layerSet = this._layerSets[x];\n      layerSet[0].predict(inputs[x]);\n      for (let i = 1; i < layerSet.length; i++) {\n        layerSet[i].predict();\n      }\n    }\n    const lastLayerUsed = this._layerSets[max];\n    const result = lastLayerUsed[lastLayerUsed.length - 1].weights;\n    this.end();\n    return result as KernelOutput;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error\n  train(\n    data: KernelOutput[][],\n    options: Partial<IRecurrentTrainingOptions> = {}\n  ): ITrainingStatus {\n    const { preparedData, status, endTime } = this._prepTraining(data, options);\n    let continueTicking = true;\n    const calculateError = (): number =>\n      this._calculateTrainingError(preparedData);\n    const trainPatters = (): void => this._trainPatterns(preparedData);\n    while (continueTicking) {\n      continueTicking = this._trainingTick(\n        status,\n        endTime,\n        calculateError,\n        trainPatters\n      );\n    }\n    return status;\n  }\n\n  end(): void {\n    const x = this._layerSets.length - 1;\n    const lastLayerSet = this._layerSets[x];\n    lastLayerSet[0].predict([new Float32Array([0])]);\n    for (let i = 1; i < lastLayerSet.length; i++) {\n      lastLayerSet[i].predict();\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error\n  transferData(formattedData: KernelOutput[][]): KernelOutput[][] {\n    return formattedData;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error\n  _prepTraining(\n    data: KernelOutput[][],\n    options: Partial<IRecurrentTrainingOptions>\n  ): IRecurrentPreppedTrainingData {\n    this._updateTrainingOptions(options);\n    const endTime = this.trainOpts.timeout\n      ? Date.now() + this.trainOpts.timeout\n      : 0;\n\n    const status = {\n      error: 1,\n      iterations: 0,\n    };\n\n    this.verifyIsInitialized();\n\n    return {\n      preparedData: this.transferData(data),\n      status,\n      endTime,\n    };\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error\n  _calculateTrainingError(data: KernelOutput[][]): number {\n    if (!this.meanSquaredError) {\n      throw new Error('this.meanSquaredError not setup');\n    }\n    let sum: KernelOutput = new Float32Array(1);\n    for (let i = 0; i < data.length; ++i) {\n      const prevSum = sum;\n      const error = this._trainPattern(data[i], true) as KernelOutput;\n      sum = this.meanSquaredError.add(sum, error);\n      release(error);\n      release(prevSum);\n    }\n    const result = this.meanSquaredError.divide(data.length, sum);\n    release(sum);\n    if (result instanceof Texture) {\n      const resultArray = result.toArray() as number[];\n      return resultArray[0];\n    }\n    return (result as number[])[0];\n  }\n\n  // TODO: more types\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error\n  formatData(data: Float32Array): Float32Array {\n    return data;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error\n  _calculateDeltas(target: KernelOutput[]): void {\n    const lastLayerSet = this._layerSets[this._layerSets.length - 1];\n    // Iterate from the second to last layer backwards, propagating 0's\n    for (let i = lastLayerSet.length - 2; i >= 0; i--) {\n      lastLayerSet[i].compare();\n    }\n\n    for (let x = target.length - 2; x >= 0; x--) {\n      const layerSet = this._layerSets[x];\n      layerSet[layerSet.length - 1].compare(target[x + 1]);\n      for (let i = layerSet.length - 2; i >= 0; i--) {\n        layerSet[i].compare();\n      }\n    }\n  }\n\n  adjustWeights(): void {\n    const _model = this._model as ILayer[];\n    for (let i = 0; i < _model.length; i++) {\n      _model[i].learn(this.options.learningRate ?? 0);\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error\n  _trainPatterns(data: KernelOutput[][]): void {\n    for (let i = 0; i < data.length; ++i) {\n      this._trainPattern(data[i], false);\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error\n  _trainPattern(\n    inputs: KernelOutput[],\n    logErrorRate: boolean\n  ): KernelOutput | null {\n    // forward propagate\n    this.runInputs(inputs);\n\n    // back propagate\n    this._calculateDeltas(inputs);\n    this.adjustWeights();\n\n    if (logErrorRate) {\n      if (!this.meanSquaredError) {\n        throw new Error('this.meanSquaredError not setup');\n      }\n      let error: KernelOutput = new Float32Array(1);\n      for (let i = 0, max = inputs.length - 1; i <= max; i++) {\n        const layerSet = this._layerSets[i];\n        const lastLayer = layerSet[layerSet.length - 1];\n        const prevError: KernelOutput = error;\n        error = this.meanSquaredError.addAbsolute(\n          prevError,\n          lastLayer.errors as KernelOutput\n        );\n        release(prevError);\n      }\n      return clone(this.meanSquaredError.divide(inputs.length, error));\n    }\n    return null;\n  }\n}\n","import { zeros } from '../../utilities/zeros';\n\nexport interface IMatrixJSON {\n  rows: number;\n  columns: number;\n  weights: number[];\n}\n/**\n * A matrix\n */\nexport class Matrix {\n  rows = 0;\n  columns = 0;\n  weights: Float32Array;\n  deltas: Float32Array;\n\n  constructor(rows?: number, columns?: number) {\n    if (rows) this.rows = rows;\n    if (columns) this.columns = columns;\n\n    this.weights = zeros(this.rows * this.columns);\n    this.deltas = zeros(this.rows * this.columns);\n  }\n\n  getWeight(row: number, col: number): number {\n    // slow but careful accessor function\n    // we want row-major order\n    const ix = this.columns * row + col;\n\n    if (ix < 0 || ix >= this.weights.length) {\n      throw new Error('get accessor is skewed');\n    }\n\n    return this.weights[ix];\n  }\n\n  setWeight(row: number, col: number, v: number): Matrix {\n    // slow but careful accessor function\n    const ix = this.columns * row + col;\n\n    if (ix < 0 || ix >= this.weights.length) {\n      throw new Error('set accessor is skewed');\n    }\n\n    this.weights[ix] = v;\n\n    return this;\n  }\n\n  getDelta(row: number, col: number): number {\n    // slow but careful accessor function\n    // we want row-major order\n    const ix = this.columns * row + col;\n\n    if (ix < 0 || ix >= this.deltas.length) {\n      throw new Error('get accessor is skewed');\n    }\n\n    return this.deltas[ix];\n  }\n\n  setDelta(row: number, col: number, v: number): Matrix {\n    // slow but careful accessor function\n    const ix = this.columns * row + col;\n\n    if (ix < 0 || ix >= this.weights.length) {\n      throw new Error('set accessor is skewed');\n    }\n\n    this.deltas[ix] = v;\n\n    return this;\n  }\n\n  toJSON(): IMatrixJSON {\n    return {\n      rows: this.rows,\n      columns: this.columns,\n      weights: Array.from(this.weights.slice(0)),\n    };\n  }\n\n  static fromJSON(json: IMatrixJSON): Matrix {\n    const matrix = new Matrix(json.rows, json.columns);\n\n    for (let i = 0, max = json.rows * json.columns; i < max; i++) {\n      matrix.weights[i] = json.weights[i]; // copy over weights\n    }\n\n    return matrix;\n  }\n\n  static fromArray(weights: Float32Array[] | number[][]): Matrix {\n    const matrix = new Matrix(weights.length, weights[0].length);\n    matrix.fromArray(weights);\n    return matrix;\n  }\n\n  deltasToArray(): number[][] {\n    return this.toArray('deltas');\n  }\n\n  weightsToArray(): number[][] {\n    return this.toArray('weights');\n  }\n\n  toArray(prop: 'weights' | 'deltas' = 'weights'): number[][] {\n    const result: number[][] = new Array(this.rows);\n    this.iterate({\n      row: (rowIndex): void => {\n        result[rowIndex] = new Array(this.columns);\n      },\n      column: (rowIndex, columnIndex): void => {\n        if (prop === 'weights') {\n          result[rowIndex][columnIndex] = this.getWeight(rowIndex, columnIndex);\n        } else if (prop === 'deltas') {\n          result[rowIndex][columnIndex] = this.getDelta(rowIndex, columnIndex);\n        }\n      },\n    });\n    return result;\n  }\n\n  fromArray(\n    array: number[][] | Float32Array[],\n    prop: 'weights' | 'deltas' = 'weights'\n  ): this {\n    if (array.length !== this.rows) {\n      throw new Error('rows do not match');\n    }\n    if (array[0].length !== this.columns) {\n      throw new Error('columns do not match');\n    }\n    this.iterate({\n      column: (rowIndex, columnIndex): void => {\n        const value = array[rowIndex][columnIndex];\n        if (typeof value !== 'number') {\n          throw new Error('value not number');\n        }\n        if (prop === 'weights') {\n          this.setWeight(rowIndex, columnIndex, value);\n        } else if (prop === 'deltas') {\n          this.setDelta(rowIndex, columnIndex, value);\n        }\n      },\n    });\n    return this;\n  }\n\n  iterate(callbacks: {\n    column?: (rowIndex: number, columnIndex: number) => void;\n    row?: (rowIndex: number) => void;\n  }): this {\n    const rows = this.rows;\n    const columns = this.columns;\n    for (let rowIndex = 0; rowIndex < rows; rowIndex++) {\n      if (callbacks.row) {\n        callbacks.row(rowIndex);\n      }\n      for (let columnIndex = 0; columnIndex < columns; columnIndex++) {\n        if (callbacks.column) {\n          callbacks.column(rowIndex, columnIndex);\n        }\n      }\n    }\n    return this;\n  }\n}\n","import { Matrix } from '.';\nimport { randomFloat } from '../../utilities/random';\n\n/** return Matrix but filled with random numbers from gaussian\n */\nexport class RandomMatrix extends Matrix {\n  std: number;\n\n  constructor(rows: number, columns: number, std: number) {\n    super(rows, columns);\n\n    this.std = std;\n\n    for (let i = 0, max = this.weights.length; i < max; i++) {\n      this.weights[i] = randomFloat(-std, std);\n    }\n  }\n}\n","import { Value, IRNNDatum } from '../recurrent/rnn-data-types';\n\nexport interface IDataFormatter {\n  indexTable: { [value: string]: number };\n  toIndexesInputOutput: (input: Value, output?: Value) => number[];\n  toIndexes: (input: string) => number[];\n  toCharacters: (output: number[]) => string[];\n  characters: Array<string | number>;\n  specialIndexes: number[];\n  toFunctionString: () => string;\n  formatDataIn: (input?: Value, output?: Value) => number[];\n  formatDataOut: (input: number[], output: number[]) => string;\n  format: (data: Array<IRNNDatum | Value>) => number[][];\n  isSetup: boolean;\n  toJSON: () => IDataFormatterJSON;\n}\n\nexport class DataFormatter implements IDataFormatter {\n  indexTable: { [key: string]: number; [key: number]: number } = {};\n  characterTable: { [key: number]: string | number | null } = {};\n  characters: Array<string | number> = [];\n  specialIndexes: number[] = [];\n  isSetup = false;\n\n  constructor(private values?: Array<IRNNDatum | Value>, maxThreshold = 0) {\n    if (values === undefined) return;\n\n    this.setup(values, maxThreshold);\n  }\n\n  setup(values: Array<IRNNDatum | Value>, maxThreshold = 0): void {\n    if (this.isSetup) throw new Error('DataFormatter is already setup');\n    this.values = values;\n    // go over all characters and keep track of all unique ones seen\n    // count up all characters\n\n    this.buildCharactersFromIterable(values);\n    this.buildTables(maxThreshold);\n    if ((values[0] as IRNNDatum).input) {\n      this.addInputOutput();\n    }\n    this.addUnrecognized();\n    this.isSetup = true;\n  }\n\n  buildCharactersFromIterable(values: Array<IRNNDatum | Value>): void {\n    const tempCharactersTable: { [character: string]: boolean } = {};\n    for (\n      let dataFormatterIndex = 0, dataFormatterLength = values.length;\n      dataFormatterIndex < dataFormatterLength;\n      dataFormatterIndex++\n    ) {\n      const characters = values[dataFormatterIndex];\n\n      // if (typeof characters === 'string') {\n      //   const character = characters;\n      //   if (tempCharactersTable.hasOwnProperty(character)) continue;\n      //   tempCharactersTable[character] = true;\n      //   this.characters.push(character);\n      if (characters.hasOwnProperty('length')) {\n        const iteratable = characters as string[] | string;\n        for (\n          let characterIndex = 0, charactersLength = iteratable.length;\n          characterIndex < charactersLength;\n          characterIndex++\n        ) {\n          const character = iteratable[characterIndex];\n          if (tempCharactersTable.hasOwnProperty(character)) continue;\n          tempCharactersTable[character] = true;\n          this.characters.push(character);\n        }\n      } else if (typeof characters === 'number') {\n        if (tempCharactersTable.hasOwnProperty(characters)) continue;\n        tempCharactersTable[characters] = true;\n        this.characters.push(characters);\n      } else if (typeof characters === 'boolean') {\n        const character = characters.toString();\n        if (tempCharactersTable.hasOwnProperty(character)) continue;\n        tempCharactersTable[character] = true;\n        this.characters.push(character);\n      } else if (\n        Array.isArray(characters) &&\n        typeof characters[0] === 'string'\n      ) {\n        for (let i = 0; i < characters.length; i++) {\n          const character = characters[i] as string;\n          if (tempCharactersTable.hasOwnProperty(character)) continue;\n          tempCharactersTable[character] = true;\n          this.characters.push(character);\n        }\n      } else if (\n        Array.isArray(characters) &&\n        (typeof characters[0] === 'number' ||\n          typeof characters[0] === 'boolean')\n      ) {\n        for (let i = 0; i < characters.length; i++) {\n          const character = characters[i].toString();\n          if (tempCharactersTable.hasOwnProperty(dataFormatterIndex)) continue;\n          tempCharactersTable[character] = true;\n          this.characters.push(character);\n        }\n      } else if (\n        characters.hasOwnProperty('input') &&\n        characters.hasOwnProperty('output')\n      ) {\n        const { input, output } = (characters as unknown) as IRNNDatum;\n        if (Array.isArray(input)) {\n          this.addCharacters(input, tempCharactersTable);\n        } else {\n          this.addCharacters(input.toString(), tempCharactersTable);\n        }\n\n        if (Array.isArray(output)) {\n          this.addCharacters(output, tempCharactersTable);\n        } else {\n          this.addCharacters(output.toString(), tempCharactersTable);\n        }\n      } else {\n        throw new Error('Unhandled value');\n      }\n    }\n  }\n\n  addCharacters(\n    characters: string | string[] | boolean[] | number[],\n    charactersTable: { [character: string]: boolean }\n  ): void {\n    for (let i = 0; i < characters.length; i++) {\n      const character = characters[i].toString();\n      if (charactersTable.hasOwnProperty(character)) continue;\n      charactersTable[character] = true;\n      this.characters.push(character);\n    }\n  }\n\n  buildTables(maxThreshold: number): void {\n    // filter by count threshold and create pointers\n    const charactersLength = this.characters.length;\n    for (\n      let characterIndex = 0;\n      characterIndex < charactersLength;\n      characterIndex++\n    ) {\n      const character = this.characters[characterIndex];\n      if (characterIndex >= maxThreshold) {\n        // add character to dataFormatter\n        this.indexTable[character] = characterIndex;\n        this.characterTable[characterIndex] = character;\n      }\n    }\n  }\n\n  toIndexes(value: Value, maxThreshold = 0): number[] {\n    const result = [];\n    const { indexTable } = this;\n\n    switch (typeof value) {\n      case 'number':\n      case 'boolean':\n        value = value.toString();\n    }\n\n    for (let i = 0, max = value.length; i < max; i++) {\n      const character = value[i].toString();\n      let index = indexTable[character];\n      if (index === undefined) {\n        if (indexTable.unrecognized) {\n          index = indexTable.unrecognized;\n        } else {\n          throw new Error(`unrecognized character \"${character}\"`);\n        }\n      }\n      if (index < maxThreshold) continue;\n      result.push(index);\n    }\n    return result;\n  }\n\n  toIndexesInputOutput(\n    input: Value,\n    output?: Value,\n    maxThreshold = 0\n  ): number[] {\n    const result: number[] = this.toIndexesValue(input, maxThreshold, true);\n\n    if (typeof output === 'undefined') return result;\n    return result.concat(this.toIndexesValue(output, maxThreshold, false));\n  }\n\n  toIndexesValue(\n    value: Value,\n    maxThreshold: number,\n    isInput: boolean\n  ): number[] {\n    if (typeof value === 'string') {\n      value = value.split('');\n    } else if (typeof value === 'number' || typeof value === 'boolean') {\n      value = value.toString().split('');\n    } else if (\n      Array.isArray(value) &&\n      (typeof (value as number[])[0] === 'number' ||\n        typeof (value as boolean[])[0] === 'boolean' ||\n        typeof (value as string[])[0] === 'string')\n    ) {\n      value = (value as string[]).map((v) => v.toString());\n    } else {\n      throw new Error('unrecognized value');\n    }\n    if (isInput) {\n      value = value.concat(['stop-input', 'start-output']);\n    }\n    return this.toIndexes(value, maxThreshold);\n  }\n\n  toCharacters(indices: number[], maxThreshold = 0): string[] {\n    const result: string[] = [];\n    const { indexTable, characterTable } = this;\n\n    for (let i = 0, max = indices.length; i < max; i++) {\n      const index = indices[i];\n      if (index < maxThreshold) continue;\n      let character = characterTable[index];\n      if (character === undefined) {\n        if (indexTable.unrecognized) {\n          character = characterTable[indexTable.unrecognized];\n        } else {\n          throw new Error(`unrecognized index \"${index}\"`);\n        }\n      } else if (character !== null) {\n        result.push(character.toString());\n      }\n    }\n\n    return result;\n  }\n\n  toString(indices: number[], maxThreshold: number): string {\n    return this.toCharacters(indices, maxThreshold).join('');\n  }\n\n  addInputOutput(): void {\n    this.addSpecial('stop-input');\n    this.addSpecial('start-output');\n  }\n\n  addUnrecognized(): void {\n    this.addSpecial('unrecognized');\n  }\n\n  static fromAllPrintable(\n    maxThreshold: number,\n    values = ['\\n']\n  ): DataFormatter {\n    for (let i = 32; i <= 126; i++) {\n      values.push(String.fromCharCode(i));\n    }\n    return new DataFormatter(values, maxThreshold);\n  }\n\n  static fromAllPrintableInputOutput(\n    maxThreshold: number,\n    values = ['\\n']\n  ): DataFormatter {\n    const dataFormatter = DataFormatter.fromAllPrintable(maxThreshold, values);\n    dataFormatter.addInputOutput();\n    dataFormatter.addUnrecognized();\n    return dataFormatter;\n  }\n\n  static fromStringInputOutput(\n    string: string,\n    maxThreshold: number\n  ): DataFormatter {\n    const values = Array.from(new Set(string)).join('');\n    const dataFormatter = new DataFormatter(values.split(''), maxThreshold);\n    dataFormatter.addInputOutput();\n    dataFormatter.addUnrecognized();\n    dataFormatter.isSetup = true;\n    return dataFormatter;\n  }\n\n  static fromArrayInputOutput(\n    data: IRNNDatum[],\n    maxThreshold?: number\n  ): DataFormatter {\n    const values: Array<string | string[]> = [];\n\n    for (let i = 0; i < data.length; i++) {\n      const datum = data[i];\n      values.push(validateAndCast(datum.input), validateAndCast(datum.output));\n    }\n    const flatArray: string[] = Array.isArray(values)\n      ? (values as string[][]).flat()\n      : values;\n    const dataFormatter = new DataFormatter(\n      Array.from(new Set(flatArray)),\n      maxThreshold\n    );\n    dataFormatter.addInputOutput();\n    dataFormatter.addUnrecognized();\n    dataFormatter.isSetup = true;\n    return dataFormatter;\n  }\n\n  static fromString(string: string, maxThreshold = 0): DataFormatter {\n    const values = Array.from(new Set(string)).join('');\n    return new DataFormatter(values.split(''), maxThreshold);\n  }\n\n  toJSON(): IDataFormatterJSON {\n    return {\n      indexTable: this.indexTable,\n      characterTable: this.characterTable,\n      values: this.values as Value[],\n      characters: this.characters,\n      specialIndexes: this.specialIndexes,\n    };\n  }\n\n  /** TODO: Type better, The type of json is not \"string that is a valid JSON\", it is a POJO in the shape of DataFormatter.\n   * this method re-hydrates the the data as an instance of DataFormatter.\n   */\n  static fromJSON(json: IDataFormatterJSON): DataFormatter {\n    const dataFormatter = new DataFormatter();\n    dataFormatter.indexTable = json.indexTable;\n    dataFormatter.characterTable = json.characterTable;\n    dataFormatter.values = json.values;\n    dataFormatter.characters = json.characters;\n    dataFormatter.specialIndexes = json.specialIndexes;\n    return dataFormatter;\n  }\n\n  addSpecial(special: string | number, character = null): void {\n    const specialIndex = (this.indexTable[special] = this.characters.length);\n    this.characterTable[specialIndex] = character;\n    this.specialIndexes.push(this.characters.length);\n    this.characters.push(special);\n  }\n\n  toFunctionString(): string {\n    return `\nvar characterTable = ${JSON.stringify(this.characterTable)};\nvar indexTable = ${JSON.stringify(this.indexTable)};\nvar characters = ${JSON.stringify(this.characters)};\nvar dataFormatter = {\n  toIndexes: function ${this.toIndexes.toString()},\n  toIndexesInputOutput: function ${this.toIndexesInputOutput.toString()},\n  toCharacters: function ${this.toCharacters.toString()},\n  toIndexesValue: function ${this.toIndexesValue.toString()},\n};`;\n  }\n\n  formatDataIn(input?: Value, output?: Value): number[] {\n    if (input === undefined) return [];\n    if (Array.isArray(input) && typeof input[0] === 'number') {\n      return input as number[];\n    }\n    if (this.indexTable?.hasOwnProperty('stop-input')) {\n      return this.toIndexesInputOutput(input, output);\n    }\n    return this.toIndexes(input);\n  }\n\n  formatDataOut(input: number[], output: number[]): string {\n    return this.toCharacters(output).join('');\n  }\n\n  format(data: Array<IRNNDatum | Value>): number[][] {\n    if (\n      typeof data[0] === 'number' &&\n      !Array.isArray(data[0]) &&\n      (!data[0].hasOwnProperty('input') || !data[0].hasOwnProperty('output'))\n    ) {\n      return data as number[][];\n    }\n    const result: number[][] = [];\n    if (\n      typeof data[0] === 'string' ||\n      typeof data[0] === 'number' ||\n      Array.isArray(data[0])\n    ) {\n      if (!this.isSetup) {\n        this.setup(data);\n        for (let i = 0; i < data.length; i++) {\n          result.push(this.formatDataIn(validateAndCast(data[i] as Value)));\n        }\n      } else {\n        for (let i = 0, max = data.length; i < max; i++) {\n          result.push(this.formatDataIn(data[i] as Value));\n        }\n      }\n    } else if ((data[0] as IRNNDatum).input && (data[0] as IRNNDatum).output) {\n      if (!this.isSetup) {\n        this.setup(data);\n      }\n      for (let i = 0, max = data.length; i < max; i++) {\n        result.push(\n          this.formatDataIn(\n            validateAndCast((data[i] as IRNNDatum).input),\n            validateAndCast((data[i] as IRNNDatum).output)\n          )\n        );\n      }\n    } else {\n      throw new Error('unrecognized data');\n    }\n    return result;\n  }\n}\n\nfunction validateAndCast(value: Value): string | string[] {\n  if (typeof value === 'string') return value;\n  if (typeof value === 'number') return value.toString();\n  if (typeof value === 'boolean') return value.toString();\n  if (Array.isArray(value) && typeof value[0] === 'string')\n    return value as string[];\n  if (typeof value[0] === 'boolean') {\n    return (value as boolean[]).map((v: boolean) => v.toString());\n  }\n  if (typeof value[0] === 'number') {\n    return (value as number[]).map((v: number) => v.toString());\n  }\n  throw new Error(\n    'unrecognized value, expected string[], string, number[], number, boolean[], or boolean'\n  );\n}\n\nexport interface IDataFormatterJSON {\n  indexTable: { [key: string]: number; [key: number]: number };\n  characterTable: { [key: number]: string | number | null };\n  values: Value[];\n  characters: Array<string | number>;\n  specialIndexes: number[];\n}\n","import { Matrix } from '.';\n\nexport function copy(product: Matrix, left: Matrix): void {\n  product.rows = left.rows;\n  product.columns = left.columns;\n  product.weights = left.weights.slice(0);\n  product.deltas = left.deltas.slice(0);\n}\n","import { Matrix } from '.';\n\n/**\n * add {left} and {right} matrix weights into {into}\n */\nexport function add(product: Matrix, left: Matrix, right: Matrix): void {\n  for (let i = 0; i < left.weights.length; i++) {\n    product.weights[i] = left.weights[i] + right.weights[i];\n    product.deltas[i] = 0;\n  }\n}\n","import { Matrix } from '.';\n\n/**\n * adds {from} deltas to {left} and {right} deltas\n */\nexport function addB(product: Matrix, left: Matrix, right: Matrix): void {\n  for (let i = 0; i < product.deltas.length; i++) {\n    left.deltas[i] = product.deltas[i];\n    right.deltas[i] = product.deltas[i];\n  }\n}\n","import { Matrix } from '.';\n\n/**\n * makes matrix weights and deltas all ones\n */\nexport function allOnes(product: Matrix): void {\n  for (let i = 0; i < product.weights.length; i++) {\n    product.weights[i] = 1;\n    product.deltas[i] = 0;\n  }\n}\n","import { Matrix } from '.';\n\nexport function cloneNegative(product: Matrix, left: Matrix): void {\n  product.rows = left.rows;\n  product.columns = left.columns;\n  product.weights = left.weights.slice(0);\n  product.deltas = left.deltas.slice(0);\n\n  for (let i = 0; i < left.weights.length; i++) {\n    product.weights[i] = -left.weights[i];\n    product.deltas[i] = 0;\n  }\n}\n","import { Matrix } from '.';\n\n/**\n * multiply {left} and {right} matrix weights to {into}\n */\nexport function multiply(product: Matrix, left: Matrix, right: Matrix): void {\n  const leftRows = left.rows;\n  const leftColumns = left.columns;\n  const rightColumns = right.columns;\n\n  // loop over rows of left\n  for (let leftRow = 0; leftRow < leftRows; leftRow++) {\n    const leftRowBase = leftColumns * leftRow;\n    const rightRowBase = rightColumns * leftRow;\n\n    // loop over cols of right\n    for (let rightColumn = 0; rightColumn < rightColumns; rightColumn++) {\n      // dot product loop\n      let dot = 0;\n\n      // loop over columns of left\n      for (let leftColumn = 0; leftColumn < leftColumns; leftColumn++) {\n        const rightColumnBase = rightColumns * leftColumn;\n        const leftIndex = leftRowBase + leftColumn;\n        const rightIndex = rightColumnBase + rightColumn;\n        dot += left.weights[leftIndex] * right.weights[rightIndex];\n        left.deltas[leftIndex] = 0;\n        right.deltas[rightIndex] = 0;\n      }\n\n      product.weights[rightRowBase + rightColumn] = dot;\n    }\n  }\n}\n","import { Matrix } from '.';\n\n/**\n * multiplies {from} deltas to {left} and {right}\n */\nexport function multiplyB(product: Matrix, left: Matrix, right: Matrix): void {\n  const leftRows = left.rows;\n  const leftColumns = left.columns;\n  const rightColumns = right.columns;\n\n  // loop over rows of left\n  for (let leftRowRoot = 0; leftRowRoot < leftRows; leftRowRoot++) {\n    const leftRowBase = leftColumns * leftRowRoot;\n    const rightRowBase = rightColumns * leftRowRoot;\n\n    // loop over cols of right\n    for (let rightColumn = 0; rightColumn < rightColumns; rightColumn++) {\n      // loop over columns of left\n      for (let leftColumn = 0; leftColumn < leftColumns; leftColumn++) {\n        const rightColumnBase = rightColumns * leftColumn;\n        const leftRow = leftRowBase + leftColumn;\n        const rightRow = rightColumnBase + rightColumn;\n        const backPropagateValue = product.deltas[rightRowBase + rightColumn];\n        left.deltas[leftRow] += right.weights[rightRow] * backPropagateValue;\n        right.deltas[rightRow] += left.weights[leftRow] * backPropagateValue;\n      }\n    }\n  }\n}\n","import { Matrix } from '.';\n\nexport function multiplyElement(\n  product: Matrix,\n  left: Matrix,\n  right: Matrix\n): void {\n  const { weights } = left;\n\n  for (let i = 0; i < weights.length; i++) {\n    product.weights[i] = left.weights[i] * right.weights[i];\n    product.deltas[i] = 0;\n  }\n}\n","import { Matrix } from '.';\n\n/**\n * multiplies {left} and {right} weight by {from} deltas into {left} and {right} deltas\n */\nexport function multiplyElementB(\n  product: Matrix,\n  left: Matrix,\n  right: Matrix\n): void {\n  for (let i = 0; i < left.weights.length; i++) {\n    left.deltas[i] = right.weights[i] * product.deltas[i];\n    right.deltas[i] = left.weights[i] * product.deltas[i];\n  }\n}\n","import { Matrix } from '.';\n\n/**\n *\n * relu {m} weights to {into} weights\n */\nexport function relu(product: Matrix, left: Matrix): void {\n  for (let i = 0; i < left.weights.length; i++) {\n    product.weights[i] = Math.max(0, left.weights[i]); // relu\n    product.deltas[i] = 0;\n  }\n}\n","import { Matrix } from '.';\n\n/**\n * adds {from} deltas to {m} deltas when {m} weights are above other a threshold of 0\n */\nexport function reluB(product: Matrix, left: Matrix): void {\n  for (let i = 0; i < product.deltas.length; i++) {\n    left.deltas[i] = left.weights[i] > 0 ? product.deltas[i] : 0;\n  }\n}\n","import { Matrix } from '.';\n\nexport function rowPluck(\n  product: Matrix,\n  left: Matrix,\n  rowPluckIndex: number\n): void {\n  const { columns } = left;\n  const rowBase = columns * rowPluckIndex;\n\n  for (let column = 0; column < columns; column++) {\n    product.weights[column] = left.weights[rowBase + column];\n    product.deltas[column] = 0;\n  }\n}\n","import { Matrix } from '.';\n\n/**\n * adds {from} deltas into {m} deltas\n */\nexport function rowPluckB(\n  product: Matrix,\n  left: Matrix,\n  rowIndex: number\n): void {\n  const { columns } = left;\n  const rowBase = columns * rowIndex;\n\n  for (let column = 0; column < columns; column++) {\n    left.deltas[rowBase + column] = product.deltas[column];\n  }\n}\n","import { Matrix } from '.';\n\nexport function sigmoid(product: Matrix, left: Matrix): void {\n  // sigmoid nonlinearity\n  for (let i = 0; i < left.weights.length; i++) {\n    product.weights[i] = 1 / (1 + Math.exp(-left.weights[i]));\n    product.deltas[i] = 0;\n  }\n}\n\n// function sig(x) {\n//   // helper function for computing sigmoid\n//   return 1 / (1 + Math.exp(-x));\n// }\n","import { Matrix } from '.';\n\nexport function sigmoidB(product: Matrix, left: Matrix): void {\n  for (let i = 0; i < product.deltas.length; i++) {\n    const mwi = product.weights[i];\n    left.deltas[i] = mwi * (1 - mwi) * product.deltas[i];\n  }\n}\n","import { Matrix } from '.';\n\nexport function softmax(matrix: Matrix): Matrix {\n  // probability volume\n  const result = new Matrix(matrix.rows, matrix.columns);\n  let maxVal = -999999;\n\n  for (let i = 0; i < matrix.weights.length; i++) {\n    if (matrix.weights[i] > maxVal) {\n      maxVal = matrix.weights[i];\n    }\n  }\n\n  let s = 0;\n  for (let i = 0; i < matrix.weights.length; i++) {\n    result.weights[i] = Math.exp(matrix.weights[i] - maxVal);\n    s += result.weights[i];\n  }\n\n  for (let i = 0; i < matrix.weights.length; i++) {\n    result.weights[i] /= s;\n  }\n\n  // no backward pass here needed\n  // since we will use the computed probabilities outside\n  // to set gradients directly on m\n  return result;\n}\n","import { Matrix } from '.';\n\nexport function tanh(product: Matrix, left: Matrix): void {\n  // tanh nonlinearity\n  for (let i = 0; i < left.weights.length; i++) {\n    product.weights[i] = Math.tanh(left.weights[i]);\n    product.deltas[i] = 0;\n  }\n}\n","import { Matrix } from '.';\n\nexport function tanhB(product: Matrix, left: Matrix): void {\n  for (let i = 0; i < product.deltas.length; i++) {\n    // grad for z = tanh(x) is (1 - z^2)\n    const mwi = product.weights[i];\n    left.deltas[i] = (1 - mwi * mwi) * product.deltas[i];\n  }\n}\n","import { Matrix } from '.';\nimport { add } from './add';\nimport { addB } from './add-b';\nimport { allOnes } from './all-ones';\nimport { cloneNegative } from './clone-negative';\nimport { multiply } from './multiply';\nimport { multiplyB } from './multiply-b';\nimport { multiplyElement } from './multiply-element';\nimport { multiplyElementB } from './multiply-element-b';\nimport { relu } from './relu';\nimport { reluB } from './relu-b';\nimport { rowPluck } from './row-pluck';\nimport { rowPluckB } from './row-pluck-b';\nimport { sigmoid } from './sigmoid';\nimport { sigmoidB } from './sigmoid-b';\nimport { softmax } from './softmax';\nimport { tanh } from './tanh';\nimport { tanhB } from './tanh-b';\n\ntype PropagateIndex = (product: Matrix, left: Matrix, index: number) => void;\ntype PropagateProduct = (product: Matrix) => void;\ntype PropagateProductFromLeft = (product: Matrix, left: Matrix) => void;\ntype PropagateProductFromLeftRight = (\n  product: Matrix,\n  left: Matrix,\n  right: Matrix\n) => void;\ntype PropagateFunction =\n  | PropagateIndex\n  | PropagateProduct\n  | PropagateProductFromLeft\n  | PropagateProductFromLeftRight;\n\nexport interface IState {\n  name: string;\n  product: Matrix;\n  left?: Matrix;\n  right?: Matrix;\n  forwardFn: PropagateFunction;\n  backpropagationFn: PropagateFunction;\n}\n\nexport class Equation {\n  states: IState[] = [];\n  inputValue?: Float32Array;\n  inputRow = 0;\n\n  add(left: Matrix, right: Matrix): Matrix {\n    if (left.weights.length !== right.weights.length) {\n      throw new Error('misaligned matrices');\n    }\n\n    const product = new Matrix(left.rows, left.columns);\n\n    this.states.push({\n      name: 'add',\n      product,\n      left,\n      right,\n      forwardFn: add,\n      backpropagationFn: addB,\n    });\n\n    return product;\n  }\n\n  allOnes(rows: number, columns: number): Matrix {\n    const product = new Matrix(rows, columns);\n\n    this.states.push({\n      name: 'allOnes',\n      product,\n      left: product,\n      forwardFn: allOnes,\n      backpropagationFn: () => {},\n    });\n\n    return product;\n  }\n\n  cloneNegative(matrix: Matrix): Matrix {\n    const product = new Matrix(matrix.rows, matrix.columns);\n\n    this.states.push({\n      name: 'cloneNegative',\n      product,\n      left: matrix,\n      forwardFn: cloneNegative,\n      backpropagationFn: () => {},\n    });\n\n    return product;\n  }\n\n  /**\n   * connects two matrices together by subtract\n   */\n  subtract(left: Matrix, right: Matrix): Matrix {\n    if (left.weights.length !== right.weights.length) {\n      throw new Error('misaligned matrices');\n    }\n\n    return this.add(\n      this.add(this.allOnes(left.rows, left.columns), this.cloneNegative(left)),\n      right\n    );\n  }\n\n  /**\n   * connects two matrices together by multiply\n   */\n  multiply(left: Matrix, right: Matrix): Matrix {\n    if (left.columns !== right.rows) {\n      throw new Error('misaligned matrices');\n    }\n\n    const product = new Matrix(left.rows, right.columns);\n\n    this.states.push({\n      name: 'multiply',\n      product,\n      left,\n      right,\n      forwardFn: multiply,\n      backpropagationFn: multiplyB,\n    });\n\n    return product;\n  }\n\n  /**\n   * connects two matrices together by multiplyElement\n   */\n  multiplyElement(left: Matrix, right: Matrix): Matrix {\n    if (left.weights.length !== right.weights.length) {\n      throw new Error('misaligned matrices');\n    }\n\n    const product = new Matrix(left.rows, left.columns);\n\n    this.states.push({\n      name: 'multiplyElement',\n      product,\n      left,\n      right,\n      forwardFn: multiplyElement,\n      backpropagationFn: multiplyElementB,\n    });\n\n    return product;\n  }\n\n  /**\n   * connects a matrix to relu\n   */\n  relu(matrix: Matrix): Matrix {\n    const product = new Matrix(matrix.rows, matrix.columns);\n\n    this.states.push({\n      name: 'relu',\n      product,\n      left: matrix,\n      forwardFn: relu,\n      backpropagationFn: reluB,\n    });\n\n    return product;\n  }\n\n  /**\n   * input a matrix\n   */\n  input(input: Matrix): Matrix {\n    this.states.push({\n      name: 'input',\n      product: input,\n      forwardFn: (product: Matrix) => {\n        if (!this.inputValue) return;\n        if (this.inputValue.length !== product.weights.length) {\n          throw new Error('this.inputValue is of wrong dimensions');\n        }\n        product.weights = input.weights = this.inputValue;\n      },\n      backpropagationFn: () => {},\n    });\n\n    return input;\n  }\n\n  /**\n   * connects a matrix via a row\n   */\n  inputMatrixToRow(matrix: Matrix): Matrix {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self = this;\n    const product = new Matrix(matrix.columns, 1);\n\n    this.states.push({\n      name: 'inputMatrixToRow',\n      product,\n      left: matrix,\n      get right() {\n        return (self.inputRow as unknown) as Matrix;\n      },\n      forwardFn: rowPluck,\n      backpropagationFn: rowPluckB,\n    });\n\n    return product;\n  }\n\n  /**\n   * connects a matrix to sigmoid\n   */\n  sigmoid(matrix: Matrix): Matrix {\n    const product = new Matrix(matrix.rows, matrix.columns);\n\n    this.states.push({\n      name: 'sigmoid',\n      product,\n      left: matrix,\n      forwardFn: sigmoid,\n      backpropagationFn: sigmoidB,\n    });\n\n    return product;\n  }\n\n  /**\n   * connects a matrix to tanh\n   */\n  tanh(matrix: Matrix): Matrix {\n    const product = new Matrix(matrix.rows, matrix.columns);\n\n    this.states.push({\n      name: 'tanh',\n      product,\n      left: matrix,\n      forwardFn: tanh,\n      backpropagationFn: tanhB,\n    });\n\n    return product;\n  }\n\n  /**\n   *\n   * Observe a matrix for debugging\n   */\n  observe(matrix: Matrix): Matrix {\n    this.states.push({\n      name: 'observe',\n      product: new Matrix(),\n      forwardFn: () => {},\n      backpropagationFn: () => {},\n    });\n\n    return matrix;\n  }\n\n  /**\n   * Run index through equations via forward propagation\n   */\n  runIndex(rowIndex = 0): Matrix {\n    this.inputRow = rowIndex;\n    let state = this.states[0];\n\n    for (let i = 0, max = this.states.length; i < max; i++) {\n      state = this.states[i];\n\n      if (!state.hasOwnProperty('forwardFn')) continue;\n      (state.forwardFn as PropagateProductFromLeftRight)(\n        state.product,\n        state.left as Matrix,\n        state.right as Matrix\n      );\n    }\n\n    return state.product;\n  }\n\n  /**\n   * Run value through equations via forward propagation\n   */\n  runInput(inputValue: Float32Array): Matrix {\n    this.inputValue = inputValue;\n    let state = this.states[0];\n\n    for (let i = 0, max = this.states.length; i < max; i++) {\n      state = this.states[i];\n\n      if (!state.hasOwnProperty('forwardFn')) continue;\n      (state.forwardFn as PropagateProductFromLeftRight)(\n        state.product,\n        state.left as Matrix,\n        state.right as Matrix\n      );\n    }\n\n    return state.product;\n  }\n\n  /**\n   * Run value through equations via back propagation\n   */\n  backpropagate(): Matrix {\n    let i = this.states.length;\n    let state = this.states[0];\n\n    while (i-- > 0) {\n      state = this.states[i];\n\n      if (!state.hasOwnProperty('backpropagationFn')) continue;\n      (state.backpropagationFn as PropagateProductFromLeftRight)(\n        state.product,\n        state.left as Matrix,\n        state.right as Matrix\n      );\n    }\n\n    return state.product;\n  }\n\n  /**\n   * Run index through equations via back propagation\n   */\n  backpropagateIndex(rowIndex = 0): Matrix {\n    this.inputRow = rowIndex;\n\n    let i = this.states.length;\n    let state = this.states[0];\n\n    while (i-- > 0) {\n      state = this.states[i];\n\n      if (!state.hasOwnProperty('backpropagationFn')) continue;\n      (state.backpropagationFn as PropagateProductFromLeftRight)(\n        state.product,\n        state.left as Matrix,\n        state.right as Matrix\n      );\n    }\n\n    return state.product;\n  }\n\n  /**\n   * Predict a target value from equation\n   */\n  predictTarget(input: Float32Array, target: Float32Array): number {\n    let errorSum = 0;\n    const output = this.runInput(input);\n\n    for (let i = 0; i < output.weights.length; i++) {\n      const error = output.weights[i] - target[i];\n      // set gradients into log probabilities\n      errorSum += Math.abs(error);\n      // write gradients into log probabilities\n      output.deltas[i] = error;\n    }\n\n    return errorSum;\n  }\n\n  /**\n   * Predict a target index from equation\n   */\n  predictTargetIndex(input: number, target: number): number {\n    const output = this.runIndex(input);\n    // set gradients into log probabilities\n    const logProbabilities = output; // interpret output as log probabilities\n    const probabilities = softmax(output); // compute the softmax probabilities\n\n    // write gradients into log probabilities\n    logProbabilities.deltas = probabilities.weights.slice(0);\n    logProbabilities.deltas[target] -= 1;\n\n    // accumulate base 2 log prob and do smoothing\n    return -Math.log2(probabilities.weights[target]);\n  }\n}\n","import { Matrix } from '.';\n\nexport function maxI(matrix: Matrix): number {\n  // argmax of array w\n  const { weights } = matrix;\n  let maxv = weights[0];\n  let maxix = 0;\n\n  for (let i = 1; i < weights.length; i++) {\n    const v = weights[i];\n    if (v < maxv) continue;\n\n    maxix = i;\n    maxv = v;\n  }\n\n  return maxix;\n}\n","import { Matrix } from '.';\nimport { randomFloat } from '../../utilities/random';\n\nexport function sampleI(matrix: Matrix): number {\n  // sample argmax from w, assuming w are\n  // probabilities that sum to one\n  const r = randomFloat(0, 1);\n  const w = matrix.weights;\n  let x = 0;\n  let i = 0;\n\n  while (true) {\n    x += w[i];\n\n    if (x > r) {\n      return i;\n    }\n\n    i++;\n  }\n}\n","import { Log } from '../feed-forward';\nimport { INeuralNetworkTrainOptions } from '../neural-network';\nimport {\n  DataFormatter,\n  IDataFormatter,\n  IDataFormatterJSON,\n} from '../utilities/data-formatter';\nimport { randomFloat } from '../utilities/random';\nimport { zeros } from '../utilities/zeros';\nimport { IMatrixJSON, Matrix } from './matrix';\nimport { copy } from './matrix/copy';\nimport { Equation } from './matrix/equation';\nimport { maxI } from './matrix/max-i';\nimport { RandomMatrix } from './matrix/random-matrix';\nimport { sampleI } from './matrix/sample-i';\nimport { softmax } from './matrix/softmax';\nimport { IRNNDatum, Value } from './rnn-data-types';\n\nexport interface IRNNModel {\n  isInitialized: boolean;\n  input: Matrix;\n  hiddenLayers: IRNNHiddenLayerModel[];\n  output: Matrix;\n  equations: Equation[];\n  allMatrices: Matrix[];\n  equationConnections: Matrix[][];\n  outputConnector: RandomMatrix | Matrix;\n}\n\nexport interface IRNNOptions {\n  inputSize: number;\n  inputRange: number;\n  hiddenLayers: number[];\n  outputSize: number;\n  decayRate: number;\n  smoothEps: number;\n  regc: number;\n  clipval: number;\n  maxPredictionLength: number;\n  dataFormatter: IDataFormatter;\n  json?: IRNNJSON;\n}\n\nexport interface IRNNJSONOptions {\n  inputSize: number;\n  inputRange: number;\n  hiddenLayers: number[];\n  outputSize: number;\n  decayRate: number;\n  smoothEps: number;\n  regc: number;\n  clipval: number;\n  maxPredictionLength: number;\n  dataFormatter: IDataFormatterJSON;\n}\n\nexport interface IRNNTrainingOptions {\n  iterations: number;\n  errorThresh: number;\n  log: boolean | ((status: string) => void);\n  logPeriod: number;\n  learningRate: number;\n  callback?: (status: IRNNStatus) => void;\n  callbackPeriod: number;\n  timeout: number;\n}\n\nexport interface IRNNJSONTrainOptions {\n  iterations: number;\n  errorThresh: number;\n  log: boolean | ((status: string) => void);\n  logPeriod: number;\n  learningRate: number;\n  callback?: (status: IRNNStatus) => void;\n  callbackPeriod: number;\n  timeout: number | 'Infinity';\n}\n\nexport const trainDefaults: IRNNTrainingOptions = {\n  iterations: 20000,\n  errorThresh: 0.005,\n  log: false,\n  logPeriod: 10,\n  learningRate: 0.01,\n  callbackPeriod: 10,\n  timeout: Infinity,\n};\n\nexport interface IRNNHiddenLayer {\n  [key: string]: RandomMatrix | Matrix;\n}\n\nexport interface IRNNHiddenLayerModel extends IRNNHiddenLayer {\n  // wxh\n  weight: RandomMatrix;\n  // whh\n  transition: RandomMatrix;\n  // bhh\n  bias: Matrix;\n}\n\nexport const defaults = (): IRNNOptions => {\n  return {\n    inputSize: 20,\n    inputRange: 20,\n    hiddenLayers: [20, 20],\n    outputSize: 20,\n    decayRate: 0.999,\n    smoothEps: 1e-8,\n    regc: 0.000001,\n    clipval: 5,\n    maxPredictionLength: 100,\n    dataFormatter: new DataFormatter(),\n  };\n};\n\nexport interface IRNNStatus {\n  iterations: number;\n  error: number;\n}\n\nexport interface IRNNPreppedTrainingData {\n  status: IRNNStatus;\n  preparedData: number[][];\n  endTime: number;\n}\n\nexport class RNN {\n  options: IRNNOptions = { ...defaults() };\n  trainOpts: IRNNTrainingOptions = { ...trainDefaults };\n  stepCache: { [index: number]: Float32Array } = {};\n  runs = 0;\n  ratioClipped = 0;\n  model: IRNNModel = Object.seal({\n    isInitialized: false,\n    input: new Matrix(0, 0),\n    hiddenLayers: [],\n    output: new Matrix(0, 0),\n    equations: [],\n    allMatrices: [],\n    equationConnections: [],\n    outputConnector: new RandomMatrix(0, 0, 0.08),\n  });\n\n  initialLayerInputs: Matrix[] = [];\n\n  constructor(options: Partial<IRNNOptions & IRNNTrainingOptions> = {}) {\n    this.options = { ...this.options, ...options };\n    this.updateTrainingOptions({\n      ...trainDefaults,\n      // ...options,\n    });\n\n    if (options.json) {\n      this.fromJSON(options.json);\n    }\n  }\n\n  initialize(): void {\n    const { dataFormatter } = this.options;\n    if (dataFormatter?.characters.length) {\n      this.options.inputSize = this.options.inputRange = this.options.outputSize =\n        dataFormatter.characters.length;\n    }\n    this.model = this.mapModel();\n  }\n\n  createHiddenLayers(): IRNNHiddenLayer[] {\n    const { hiddenLayers, inputSize } = this.options;\n    const hiddenLayersModel: IRNNHiddenLayer[] = [];\n    // 0 is end, so add 1 to offset\n    hiddenLayersModel.push(this.getHiddenLayer(hiddenLayers[0], inputSize));\n    let prevSize = hiddenLayers[0];\n\n    for (let d = 1; d < hiddenLayers.length; d++) {\n      // loop over depths\n      const hiddenSize = hiddenLayers[d];\n      hiddenLayersModel.push(this.getHiddenLayer(hiddenSize, prevSize));\n      prevSize = hiddenSize;\n    }\n    return hiddenLayersModel;\n  }\n\n  getHiddenLayer(hiddenSize: number, prevSize: number): IRNNHiddenLayer {\n    return {\n      // wxh\n      weight: new RandomMatrix(hiddenSize, prevSize, 0.08),\n      // whh\n      transition: new RandomMatrix(hiddenSize, hiddenSize, 0.08),\n      // bhh\n      bias: new Matrix(hiddenSize, 1),\n    };\n  }\n\n  getEquation(\n    equation: Equation,\n    inputMatrix: Matrix,\n    previousResult: Matrix,\n    hiddenLayer: IRNNHiddenLayer\n  ): Matrix {\n    if (!hiddenLayer.weight || !hiddenLayer.transition || !hiddenLayer.bias) {\n      throw new Error('hiddenLayer does not have expected properties');\n    }\n    const relu = equation.relu.bind(equation);\n    const add = equation.add.bind(equation);\n    const multiply = equation.multiply.bind(equation);\n\n    return relu(\n      add(\n        add(\n          multiply(hiddenLayer.weight, inputMatrix),\n          multiply(hiddenLayer.transition, previousResult)\n        ),\n        hiddenLayer.bias\n      )\n    );\n  }\n\n  createInputMatrix(): RandomMatrix {\n    const { inputRange, inputSize } = this.options;\n    if (inputRange < 1)\n      throw new Error('this.options.inputRange not an expected number');\n    if (inputSize < 1)\n      throw new Error('this.options.inputSize not an expected number');\n\n    // 0 is end, so add 1 to offset\n    return new RandomMatrix(inputRange + 1, inputSize, 0.08);\n  }\n\n  createOutputMatrices(): { outputConnector: RandomMatrix; output: Matrix } {\n    const { outputSize, hiddenLayers } = this.options;\n    const lastHiddenSize = last(hiddenLayers);\n\n    // 0 is end, so add 1 to offset\n    return {\n      // whd\n      outputConnector: new RandomMatrix(outputSize + 1, lastHiddenSize, 0.08),\n      // 0 is end, so add 1 to offset\n      // bd\n      output: new Matrix(outputSize + 1, 1),\n    };\n  }\n\n  bindEquation(): void {\n    const { model } = this;\n    const { hiddenLayers } = this.options;\n    const equation = new Equation();\n    const outputs: Matrix[] = [];\n    const equationConnection =\n      model.equationConnections.length > 0\n        ? last(model.equationConnections)\n        : this.initialLayerInputs;\n    // 0 index\n    let output = this.getEquation(\n      equation,\n      equation.inputMatrixToRow(model.input),\n      equationConnection[0],\n      model.hiddenLayers[0]\n    );\n    outputs.push(output);\n    // 1+ indices\n    for (let i = 1, max = hiddenLayers.length; i < max; i++) {\n      if (!equationConnection[i]) {\n        throw new Error(`Cannot find equation at index ${i}`);\n      }\n      output = this.getEquation(\n        equation,\n        output,\n        equationConnection[i],\n        model.hiddenLayers[i]\n      );\n      outputs.push(output);\n    }\n\n    model.equationConnections.push(outputs);\n    equation.add(\n      equation.multiply(model.outputConnector, output),\n      model.output\n    );\n    model.equations.push(equation);\n  }\n\n  mapModel(): IRNNModel {\n    const allMatrices: Matrix[] = [];\n    this.initialLayerInputs = this.options.hiddenLayers.map(\n      (size) => new Matrix(size, 1)\n    );\n\n    const input = this.createInputMatrix();\n    allMatrices.push(input);\n\n    const hiddenLayers = this.createHiddenLayers() as IRNNHiddenLayerModel[];\n    if (!hiddenLayers.length) throw new Error('net.hiddenLayers not set');\n    for (let i = 0, max = hiddenLayers.length; i < max; i++) {\n      const hiddenMatrix: IRNNHiddenLayerModel = hiddenLayers[i];\n      for (const property in hiddenMatrix) {\n        if (!hiddenMatrix.hasOwnProperty(property)) continue;\n        allMatrices.push(hiddenMatrix[property]);\n      }\n    }\n\n    const { output, outputConnector } = this.createOutputMatrices();\n    allMatrices.push(outputConnector);\n    allMatrices.push(output);\n\n    return Object.seal({\n      isInitialized: true,\n      input,\n      hiddenLayers,\n      output,\n      equations: [],\n      allMatrices,\n      equationConnections: [],\n      outputConnector,\n    });\n  }\n\n  trainInput(input: number[]): number {\n    this.runs++;\n    const { model } = this;\n    const max = input.length;\n    let log2ppl = 0;\n    let equation;\n    while (model.equations.length <= input.length + 1) {\n      // last is zero\n      this.bindEquation();\n    }\n    for (\n      let inputIndex = -1, inputMax = input.length;\n      inputIndex < inputMax;\n      inputIndex++\n    ) {\n      // start and end tokens are zeros\n      const equationIndex = inputIndex + 1;\n      equation = model.equations[equationIndex];\n\n      const source = inputIndex === -1 ? 0 : input[inputIndex] + 1; // first step: start with START token\n      const target = inputIndex === max - 1 ? 0 : input[inputIndex + 1] + 1; // last step: end with END token\n      log2ppl += equation.predictTargetIndex(source, target);\n    }\n    return Math.pow(2, log2ppl / (max - 1)) / 100;\n  }\n\n  backpropagate(input: number[]): void {\n    let i = input.length;\n    const { model } = this;\n    const { equations } = model;\n    while (i > 0) {\n      equations[i].backpropagateIndex(input[i - 1] + 1);\n      i--;\n    }\n    equations[0].backpropagateIndex(0);\n  }\n\n  adjustWeights(): void {\n    const { regc, clipval, decayRate, smoothEps } = this.options;\n    const { trainOpts, model, stepCache } = this;\n    const { learningRate } = trainOpts;\n    const { allMatrices } = model;\n    let numClipped = 0;\n    let numTot = 0;\n    for (let matrixIndex = 0; matrixIndex < allMatrices.length; matrixIndex++) {\n      const matrix = allMatrices[matrixIndex];\n      const { weights, deltas } = matrix;\n      if (!(matrixIndex in stepCache)) {\n        stepCache[matrixIndex] = zeros(matrix.rows * matrix.columns);\n      }\n      const cache = stepCache[matrixIndex];\n      for (let i = 0; i < weights.length; i++) {\n        let r = deltas[i];\n        const w = weights[i];\n        // rmsprop adaptive learning rate\n        cache[i] = cache[i] * decayRate + (1 - decayRate) * r * r;\n        // gradient clip\n        if (r > clipval) {\n          r = clipval;\n          numClipped++;\n        } else if (r < -clipval) {\n          r = -clipval;\n          numClipped++;\n        }\n        numTot++;\n        // update (and regularize)\n        weights[i] =\n          w + (-learningRate * r) / Math.sqrt(cache[i] + smoothEps) - regc * w;\n      }\n    }\n    this.ratioClipped = numClipped / numTot;\n  }\n\n  get isRunnable(): boolean {\n    if (this.model && this.model.equations.length === 0) {\n      console.error(`No equations bound, did you run train()?`);\n      return false;\n    }\n\n    return true;\n  }\n\n  checkRunnable(): void {\n    if (!this.isRunnable) {\n      throw new Error('Network not runnable');\n    }\n  }\n\n  run(rawInput: Value = [], isSampleI = false, temperature = 1): string {\n    const maxPredictionLength: number =\n      this.options.maxPredictionLength +\n      (rawInput !== null ? (rawInput as string).length : 0) +\n      (this.options.dataFormatter\n        ? this.options.dataFormatter.specialIndexes.length\n        : 0);\n\n    this.checkRunnable();\n\n    const input: number[] =\n      this.options.dataFormatter && (rawInput as string).length > 0\n        ? this.options.dataFormatter.formatDataIn(rawInput)\n        : (rawInput as number[]);\n    const { model } = this;\n    const output = [];\n    let i = 0;\n    while (true) {\n      const previousIndex =\n        i === 0 ? 0 : i < input.length ? input[i - 1] + 1 : output[i - 1];\n      while (model.equations.length <= i) {\n        this.bindEquation();\n      }\n      const equation = model.equations[i];\n      // sample predicted letter\n      const outputMatrix = equation.runIndex(previousIndex);\n      const logProbabilities = new Matrix(\n        model.output.rows,\n        model.output.columns\n      );\n      copy(logProbabilities, outputMatrix);\n      if (temperature !== 1 && isSampleI) {\n        /**\n         * scale log probabilities by temperature and re-normalize\n         * if temperature is high, logProbabilities will go towards zero\n         * and the softmax outputs will be more diffuse. if temperature is\n         * very low, the softmax outputs will be more peaky\n         */\n        for (let j = 0, max = logProbabilities.weights.length; j < max; j++) {\n          logProbabilities.weights[j] /= temperature;\n        }\n      }\n\n      const probs = softmax(logProbabilities);\n      const nextIndex = isSampleI ? sampleI(probs) : maxI(probs);\n\n      i++;\n      if (nextIndex === 0) {\n        // END token predicted, break out\n        break;\n      }\n      if (i >= maxPredictionLength) {\n        // something is wrong\n        break;\n      }\n\n      output.push(nextIndex);\n    }\n\n    /**\n     * we slice the input length here, not because output contains it, but it will be erroneous as we are sending the\n     * network what is contained in input, so the data is essentially guessed by the network what could be next, till it\n     * locks in on a value.\n     * Kind of like this, values are from input:\n     * 0 -> 4 (or in English: \"beginning on input\" -> \"I have no idea? I'll guess what they want next!\")\n     * 2 -> 2 (oh how interesting, I've narrowed down values...)\n     * 1 -> 9 (oh how interesting, I've now know what the values are...)\n     * then the output looks like: [4, 2, 9,...]\n     * so we then remove the erroneous data to get our true output\n     */\n    return this.options.dataFormatter.formatDataOut(\n      input,\n      output.slice(input.length).map((value) => value - 1)\n    );\n  }\n\n  /**\n   *\n   * Verifies network sizes are initialized\n   * If they are not it will initialize them\n   */\n  verifyIsInitialized(): void {\n    if (!this.model.isInitialized) {\n      this.initialize();\n    }\n  }\n\n  /**\n   *\n   * @param options\n   *    Supports all `trainDefaults` properties\n   *    also supports:\n   *       learningRate: (number),\n   *       momentum: (number),\n   *       activation: 'sigmoid', 'relu', 'leaky-relu', 'tanh'\n   */\n  updateTrainingOptions(options: Partial<IRNNTrainingOptions>): void {\n    this.trainOpts = { ...trainDefaults, ...options };\n    this.validateTrainingOptions(this.trainOpts as INeuralNetworkTrainOptions);\n    this.setLogMethod(options.log ?? this.trainOpts.log);\n    // TODO: Remove this?\n    // this.activation = options.activation || this.activation;\n  }\n\n  validateTrainingOptions(options: INeuralNetworkTrainOptions): void {\n    const validations: { [fnName: string]: () => boolean } = {\n      iterations: () => {\n        const val = options.iterations;\n        return typeof val === 'number' && val > 0;\n      },\n      errorThresh: () => {\n        const val = options.errorThresh;\n        return typeof val === 'number' && val > 0 && val < 1;\n      },\n      log: () => {\n        const val = options.log;\n        return typeof val === 'function' || typeof val === 'boolean';\n      },\n      logPeriod: () => {\n        const val = options.logPeriod;\n        return typeof val === 'number' && val > 0;\n      },\n      learningRate: () => {\n        const val = options.learningRate;\n        return typeof val === 'number' && val > 0 && val < 1;\n      },\n      callback: () => {\n        const val = options.callback;\n        return typeof val === 'function' || val === undefined;\n      },\n      callbackPeriod: () => {\n        const val = options.callbackPeriod;\n        return typeof val === 'number' && val > 0;\n      },\n      timeout: () => {\n        const val = options.timeout;\n        return typeof val === 'number' && val > 0;\n      },\n    };\n    for (const p in validations) {\n      const v = (options as unknown) as { [v: string]: string };\n      if (!validations[p]()) {\n        throw new Error(\n          `[${p}, ${v[p]}] is out of normal training range, your network will probably not train.`\n        );\n      }\n    }\n  }\n\n  setLogMethod(log: Log | undefined | boolean): void {\n    if (typeof log === 'function') {\n      this.trainOpts.log = log;\n    } else if (log) {\n      this.trainOpts.log = console.log;\n    } else {\n      this.trainOpts.log = false;\n    }\n  }\n\n  protected prepTraining(\n    data: Array<Value | IRNNDatum>,\n    options: Partial<IRNNTrainingOptions>\n  ): IRNNPreppedTrainingData {\n    this.updateTrainingOptions(options);\n    const preparedData = this.options.dataFormatter.format(data);\n    const endTime = Date.now() + (this.trainOpts.timeout ?? 0);\n\n    const status = {\n      error: 1,\n      iterations: 0,\n    };\n\n    this.verifyIsInitialized();\n\n    return {\n      preparedData,\n      status,\n      endTime,\n    };\n  }\n\n  train(\n    data: Array<Value | IRNNDatum>,\n    trainOpts: Partial<IRNNTrainingOptions> = {}\n  ): IRNNStatus {\n    this.trainOpts = trainOpts = {\n      ...trainDefaults,\n      ...trainOpts,\n    };\n    const {\n      iterations,\n      errorThresh,\n      logPeriod,\n      callback,\n      callbackPeriod,\n    } = this.trainOpts;\n    const log = trainOpts.log === true ? console.log : trainOpts.log;\n    let error = Infinity;\n    let i;\n\n    let inputs: number[][];\n    if (this.options?.dataFormatter) {\n      inputs = this.options.dataFormatter.format(data);\n    } else if (\n      Array.isArray(data) &&\n      Array.isArray(data[0]) &&\n      typeof (data as number[][])[0][0] === 'number'\n    ) {\n      inputs = data as number[][];\n    } else {\n      throw new Error('training not in expected format of number[][]');\n    }\n\n    this.verifyIsInitialized();\n\n    for (i = 0; i < iterations && error > errorThresh; i++) {\n      let sum = 0;\n      for (let j = 0; j < inputs.length; j++) {\n        const err = this.trainPattern(inputs[j], true);\n        sum += err;\n      }\n      error = sum / data.length;\n\n      if (isNaN(error)) {\n        throw new Error(\n          'Network error rate is unexpected NaN, check network configurations and try again. Most probably input format is not correct or training data is not enough. '\n        );\n      }\n      if (log && i % logPeriod === 0) {\n        log(`iterations: ${i}, training error: ${error}`);\n      }\n      if (callback && i % callbackPeriod === 0) {\n        callback({ error, iterations: i });\n      }\n    }\n\n    return {\n      error,\n      iterations: i,\n    };\n  }\n\n  addFormat(): void {\n    throw new Error('not yet implemented');\n  }\n\n  toJSON(): IRNNJSON {\n    if (!this.model.isInitialized) {\n      this.initialize();\n    }\n    const { model, options } = this;\n\n    return {\n      type: this.constructor.name,\n      options: { ...options, dataFormatter: options.dataFormatter.toJSON() },\n      trainOpts: {\n        ...this.trainOpts,\n        timeout:\n          this.trainOpts.timeout === Infinity\n            ? 'Infinity'\n            : this.trainOpts.timeout,\n      },\n      input: model.input.toJSON(),\n      hiddenLayers: model.hiddenLayers.map((hiddenLayer) => {\n        const layers: { [index: string]: IMatrixJSON } = {};\n        for (const p in hiddenLayer) {\n          if (!hiddenLayer.hasOwnProperty(p)) continue;\n          layers[p] = hiddenLayer[p].toJSON();\n        }\n        return layers;\n      }),\n      outputConnector: this.model.outputConnector.toJSON(),\n      output: this.model.output.toJSON(),\n    };\n  }\n\n  fromJSON(json: IRNNJSON): this {\n    const { options } = json;\n    const allMatrices = [];\n    const input = Matrix.fromJSON(json.input);\n    allMatrices.push(input);\n    const hiddenLayers: IRNNHiddenLayerModel[] = [];\n\n    json.hiddenLayers.forEach((hiddenLayer) => {\n      const layers: { [index: string]: Matrix } = {};\n      for (const p in hiddenLayer) {\n        layers[p] = Matrix.fromJSON(hiddenLayer[p]);\n        allMatrices.push(layers[p]);\n      }\n      hiddenLayers.push(layers as IRNNHiddenLayerModel);\n    });\n\n    const outputConnector = Matrix.fromJSON(json.outputConnector);\n    allMatrices.push(outputConnector);\n    const output = Matrix.fromJSON(json.output);\n    allMatrices.push(output);\n\n    if (options.dataFormatter) {\n      this.options = {\n        ...defaults(),\n        ...options,\n        dataFormatter: DataFormatter.fromJSON(options.dataFormatter),\n      };\n    } else {\n      this.options = {\n        ...defaults(),\n        ...options,\n        dataFormatter: new DataFormatter(),\n      };\n    }\n\n    this.model = Object.seal({\n      isInitialized: true,\n      input,\n      hiddenLayers,\n      output,\n      allMatrices,\n      outputConnector,\n      equations: [],\n      equationConnections: [],\n    });\n    this.initialLayerInputs = this.options.hiddenLayers.map(\n      (size) => new Matrix(size, 1)\n    );\n    this.bindEquation();\n    return this;\n  }\n\n  toFunction(cb?: (src: string) => string): RNNFunction {\n    const { model } = this;\n    const { equations } = this.model;\n    const equation = equations[1];\n    const { states } = equation;\n    const jsonString = JSON.stringify(this.toJSON());\n\n    function previousConnectionIndex(m: Matrix): number {\n      const connection = model.equationConnections[0];\n      const { states } = equations[0];\n      for (let i = 0, max = states.length; i < max; i++) {\n        if (states[i].product === m) {\n          return i;\n        }\n      }\n      return connection.indexOf(m);\n    }\n\n    function matrixOrigin(m: Matrix, stateIndex: number): string {\n      for (let i = 0, max = states.length; i < max; i++) {\n        const state = states[i];\n\n        if (i === stateIndex) {\n          const j = previousConnectionIndex(m);\n          if (j > -1 && (m === state.left || m === state.right)) {\n            return `typeof prevStates[${j}] === 'object' ? prevStates[${j}].product : new Matrix(${m.rows}, ${m.columns})`;\n          }\n          return `new Matrix(${m.rows}, ${m.columns})`;\n        }\n\n        if (m === state.product) return `states[${i}].product`;\n        if (m === state.right) return `states[${i}].right`;\n        if (m === state.left) return `states[${i}].left`;\n      }\n      return '';\n    }\n\n    function matrixToString(m: Matrix, stateIndex: number): string {\n      if (!m || !m.rows || !m.columns) return 'null';\n\n      if (m === model.input) return `json.input`;\n      if (m === model.outputConnector) return `json.outputConnector`;\n      if (m === model.output) return `json.output`;\n\n      for (let i = 0, max = model.hiddenLayers.length; i < max; i++) {\n        const hiddenLayer = model.hiddenLayers[i];\n        for (const p in hiddenLayer) {\n          if (!hiddenLayer.hasOwnProperty(p)) continue;\n          if (hiddenLayer[p] !== m) continue;\n          return `json.hiddenLayers[${i}].${p}`;\n        }\n      }\n\n      return matrixOrigin(m, stateIndex);\n    }\n\n    function toInner(fnString: string): string {\n      // crude, but should be sufficient for now\n      // function() { body }\n      const fnParts = fnString.toString().split('{');\n      fnParts.shift();\n      // body }\n      const fnBodyString = fnParts.join('{');\n      const fnBodyParts = fnBodyString.split('}');\n      fnBodyParts.pop();\n      // body\n      return fnBodyParts\n        .join('}')\n        .split('\\n')\n        .join('\\n        ')\n        .replace('product.deltas[i] = 0;', '')\n        .replace('product.deltas[column] = 0;', '')\n        .replace('left.deltas[leftIndex] = 0;', '')\n        .replace('right.deltas[rightIndex] = 0;', '')\n        .replace('product.deltas = left.deltas.slice(0);', '');\n    }\n\n    function fileName(fnName: string): string {\n      return `src/recurrent/matrix/${fnName.replace(/[A-Z]/g, function (value) {\n        return `-${value.toLowerCase()}`;\n      })}.js`;\n    }\n\n    const statesRaw = [];\n    const usedFunctionNames: { [methodName: string]: boolean } = {};\n    const innerFunctionsSwitch = [];\n    for (let i = 0, max = states.length; i < max; i++) {\n      const state = states[i];\n      statesRaw.push(`states[${i}] = {\n      name: '${state.forwardFn.name}',\n      left: ${state.left ? matrixToString(state.left, i) : 'undefined'},\n      right: ${state.right ? matrixToString(state.right, i) : 'undefined'},\n      product: ${matrixToString(state.product, i)}\n    }`);\n\n      const fnName = state.forwardFn.name;\n      if (!usedFunctionNames[fnName]) {\n        usedFunctionNames[fnName] = true;\n        innerFunctionsSwitch.push(\n          `        case '${fnName}': //compiled from ${fileName(fnName)}\n          ${toInner(state.forwardFn.toString())}\n          break;`\n        );\n      }\n    }\n\n    const src = `\n  if (typeof rawInput === 'undefined') rawInput = [];\n  if (typeof isSampleI === 'undefined') isSampleI = false;\n  if (typeof temperature === 'undefined') temperature = 1;\n  var json = ${jsonString};\n  ${\n    this.options.dataFormatter\n      ? `${this.options.dataFormatter.toFunctionString()};\n  Object.assign(dataFormatter, json.options.dataFormatter);`\n      : ''\n  }\n  ${\n    this.options.dataFormatter &&\n    typeof this.options.dataFormatter.formatDataIn === 'function'\n      ? `const formatDataIn = function (input, output) { ${toInner(\n          this.options.dataFormatter.formatDataIn.toString()\n        )} }.bind(dataFormatter);`\n      : ''\n  }\n  ${\n    this.options.dataFormatter !== null &&\n    typeof this.options.dataFormatter.formatDataOut === 'function'\n      ? `const formatDataOut = function formatDataOut(input, output) { ${toInner(\n          this.options.dataFormatter.formatDataOut.toString()\n        )} }.bind(dataFormatter);`\n      : ''\n  }\n  var maxPredictionLength =\n    ${this.options.maxPredictionLength} +\n    rawInput.length +\n    ${\n      this.options.dataFormatter\n        ? this.options.dataFormatter.specialIndexes.length\n        : 0\n    };\n  var input = ${\n    this.options.dataFormatter &&\n    typeof this.options.dataFormatter.formatDataIn === 'function'\n      ? 'formatDataIn(rawInput)'\n      : 'rawInput'\n  };\n  var _i = 0;\n  var output = [];\n  var states = [];\n  var prevStates;\n  while (true) {\n    var previousIndex = (_i === 0\n        ? 0\n        : _i < input.length\n          ? input[_i - 1] + 1\n          : output[_i - 1])\n          ;\n    var rowPluckIndex = previousIndex;\n    prevStates = states;\n    states = [];\n    ${statesRaw.join(';\\n    ')};\n    for (var stateIndex = 0, stateMax = ${\n      statesRaw.length\n    }; stateIndex < stateMax; stateIndex++) {\n      var state = states[stateIndex];\n      var product = state.product;\n      var left = state.left;\n      var right = state.right;\n      switch (state.name) {\n${innerFunctionsSwitch.join('\\n')}\n      }\n    }\n\n    var logProbabilities = state.product;\n    if (temperature !== 1 && isSampleI) {\n      for (var q = 0, nq = logProbabilities.weights.length; q < nq; q++) {\n        logProbabilities.weights[q] /= temperature;\n      }\n    }\n\n    var probs = softmax(logProbabilities);\n    var nextIndex = isSampleI ? sampleI(probs) : maxI(probs);\n\n    _i++;\n    if (nextIndex === 0) {\n      break;\n    }\n    if (_i >= maxPredictionLength) {\n      break;\n    }\n\n    output.push(nextIndex);\n  }\n  ${\n    this.options.dataFormatter &&\n    typeof this.options.dataFormatter.formatDataOut === 'function'\n      ? 'return formatDataOut(input, output.slice(input.length).map(function(value) { return value - 1; }))'\n      : 'return output.slice(input.length).map(function(value) { return value - 1; })'\n  };\n  function Matrix(rows, columns) {\n    this.rows = rows;\n    this.columns = columns;\n    this.weights = zeros(rows * columns);\n  }\n  ${zeros.toString()}\n  ${softmax.toString().replace('_1.Matrix', 'Matrix')}\n  ${randomFloat.toString()}\n  ${sampleI.toString()}\n  ${maxI.toString()}`;\n    // eslint-disable-next-line\n    return new Function(\n      'rawInput',\n      'isSampleI',\n      'temperature',\n      cb ? cb(src) : src\n    ) as RNNFunction;\n  }\n\n  trainPattern(input: number[], logErrorRate?: boolean): number {\n    const error = this.trainInput(input);\n    this.backpropagate(input);\n    this.adjustWeights();\n\n    if (logErrorRate) {\n      return error;\n    }\n    return 0;\n  }\n}\n\nexport interface IRNNJSON {\n  type: string;\n  options: IRNNJSONOptions;\n  trainOpts: IRNNJSONTrainOptions;\n  input: IMatrixJSON;\n  hiddenLayers: Array<{ [index: string]: IMatrixJSON }>;\n  outputConnector: IMatrixJSON;\n  output: IMatrixJSON;\n}\n\nexport function last<T>(values: T[]): T {\n  return values[values.length - 1];\n}\n\nexport type RNNFunction = (\n  rawInput?: Array<Value | IRNNDatum> | string,\n  isSampleI?: boolean,\n  temperature?: number\n) => string;\n","import { Matrix } from './matrix';\nimport { Equation } from './matrix/equation';\nimport { RandomMatrix } from './matrix/random-matrix';\nimport { IRNNHiddenLayer, RNN } from './rnn';\n\nexport interface IGRUHiddenLayer extends IRNNHiddenLayer {\n  updateGateInputMatrix: RandomMatrix;\n  updateGateHiddenMatrix: RandomMatrix;\n  updateGateBias: Matrix;\n  resetGateInputMatrix: RandomMatrix;\n  resetGateHiddenMatrix: RandomMatrix;\n  resetGateBias: Matrix;\n  cellWriteInputMatrix: RandomMatrix;\n  cellWriteHiddenMatrix: RandomMatrix;\n  cellWriteBias: Matrix;\n}\n\nexport class GRU extends RNN {\n  getHiddenLayer(hiddenSize: number, prevSize: number): IRNNHiddenLayer {\n    return getGRUHiddenLayer(hiddenSize, prevSize);\n  }\n\n  getEquation(\n    equation: Equation,\n    inputMatrix: Matrix,\n    previousResult: Matrix,\n    hiddenLayer: IRNNHiddenLayer\n  ): Matrix {\n    return getGRUEquation(\n      equation,\n      inputMatrix,\n      previousResult,\n      hiddenLayer as IGRUHiddenLayer\n    );\n  }\n}\n\nexport function getGRUHiddenLayer(\n  hiddenSize: number,\n  prevSize: number\n): IGRUHiddenLayer {\n  return {\n    // update Gate\n    // wzxh\n    updateGateInputMatrix: new RandomMatrix(hiddenSize, prevSize, 0.08), // wzhh\n    updateGateHiddenMatrix: new RandomMatrix(hiddenSize, hiddenSize, 0.08), // bz\n    updateGateBias: new Matrix(hiddenSize, 1),\n    // reset Gate\n    // wrxh\n    resetGateInputMatrix: new RandomMatrix(hiddenSize, prevSize, 0.08), // wrhh\n    resetGateHiddenMatrix: new RandomMatrix(hiddenSize, hiddenSize, 0.08), // br\n    resetGateBias: new Matrix(hiddenSize, 1),\n    // cell write parameters\n    // wcxh\n    cellWriteInputMatrix: new RandomMatrix(hiddenSize, prevSize, 0.08), // wchh\n    cellWriteHiddenMatrix: new RandomMatrix(hiddenSize, hiddenSize, 0.08), // bc\n    cellWriteBias: new Matrix(hiddenSize, 1),\n  };\n}\n\nexport function getGRUEquation(\n  equation: Equation,\n  inputMatrix: Matrix,\n  previousResult: Matrix,\n  hiddenLayer: IGRUHiddenLayer\n): Matrix {\n  if (\n    !hiddenLayer.updateGateInputMatrix ||\n    !hiddenLayer.updateGateHiddenMatrix ||\n    !hiddenLayer.updateGateBias ||\n    !hiddenLayer.resetGateInputMatrix ||\n    !hiddenLayer.resetGateHiddenMatrix ||\n    !hiddenLayer.resetGateBias ||\n    !hiddenLayer.cellWriteInputMatrix ||\n    !hiddenLayer.cellWriteHiddenMatrix ||\n    !hiddenLayer.cellWriteBias\n  ) {\n    throw new Error('hiddenLayer does not have expected properties');\n  }\n\n  const sigmoid = equation.sigmoid.bind(equation);\n  const add = equation.add.bind(equation);\n  const multiply = equation.multiply.bind(equation);\n  const multiplyElement = equation.multiplyElement.bind(equation);\n  const tanh = equation.tanh.bind(equation);\n  const allOnes = equation.allOnes.bind(equation);\n  const cloneNegative = equation.cloneNegative.bind(equation);\n\n  // update gate\n  const updateGate = sigmoid(\n    add(\n      add(\n        multiply(hiddenLayer.updateGateInputMatrix, inputMatrix),\n        multiply(hiddenLayer.updateGateHiddenMatrix, previousResult)\n      ),\n      hiddenLayer.updateGateBias\n    )\n  );\n\n  // reset gate\n  const resetGate = sigmoid(\n    add(\n      add(\n        multiply(hiddenLayer.resetGateInputMatrix, inputMatrix),\n        multiply(hiddenLayer.resetGateHiddenMatrix, previousResult)\n      ),\n      hiddenLayer.resetGateBias\n    )\n  );\n\n  // cell\n  const cell = tanh(\n    add(\n      add(\n        multiply(hiddenLayer.cellWriteInputMatrix, inputMatrix),\n        multiply(\n          hiddenLayer.cellWriteHiddenMatrix,\n          multiplyElement(resetGate, previousResult)\n        )\n      ),\n      hiddenLayer.cellWriteBias\n    )\n  );\n\n  // compute hidden state as gated, saturated cell activations\n  // negate updateGate\n  return add(\n    multiplyElement(\n      add(\n        allOnes(updateGate.rows, updateGate.columns),\n        cloneNegative(updateGate)\n      ),\n      cell\n    ),\n    multiplyElement(previousResult, updateGate)\n  );\n}\n","export class ArrayLookupTable {\n  length = 0;\n  table: { [key: string]: number } = {};\n\n  constructor(\n    data: Array<{\n      input: Array<Record<string, number>>;\n      output: Array<Record<string, number>>;\n    }>,\n    public prop: 'input' | 'output'\n  ) {\n    for (let i = 0; i < data.length; i++) {\n      const datum = data[i];\n      const ioValue = datum[prop];\n      for (let j = 0; j < ioValue.length; j++) {\n        const value = ioValue[j];\n        for (const p in value) {\n          if (!value.hasOwnProperty(p)) continue;\n          if (this.table.hasOwnProperty(p)) continue;\n          this.table[p] = this.length++;\n        }\n      }\n    }\n  }\n}\n","import {\n  FormattableData,\n  InputOutputValue,\n  INumberArray,\n  INumberHash,\n  ITrainingDatum,\n  lookup,\n} from '../lookup';\nimport { ArrayLookupTable } from '../utilities/array-lookup-table';\nimport {\n  arraysToFloat32Arrays,\n  arrayToFloat32Arrays,\n  inputOutputArraysToFloat32Arrays,\n  inputOutputArrayToFloat32Arrays,\n  inputOutputObjectsToFloat32Arrays,\n  inputOutputObjectToFloat32Arrays,\n  objectToFloat32Array,\n  objectToFloat32Arrays,\n} from '../utilities/cast';\nimport { LookupTable } from '../utilities/lookup-table';\nimport { randomFloat } from '../utilities/random';\nimport { zeros } from '../utilities/zeros';\nimport { IMatrixJSON, Matrix } from './matrix';\nimport { Equation } from './matrix/equation';\nimport { maxI } from './matrix/max-i';\nimport { RandomMatrix } from './matrix/random-matrix';\nimport { sampleI } from './matrix/sample-i';\nimport { softmax } from './matrix/softmax';\nimport {\n  defaults as rnnDefaults,\n  IRNNHiddenLayer,\n  IRNNHiddenLayerModel,\n  IRNNOptions,\n  IRNNStatus,\n  IRNNTrainingOptions,\n  last,\n  RNN,\n  trainDefaults as rnnTrainDefaults,\n} from './rnn';\n\nexport type ValuesOf<\n  T extends InputOutputValue | InputOutputValue[]\n> = T[number];\n\nexport interface IRNNTimeStepOptions extends IRNNTimeStepJSONOptions {\n  inputSize: number;\n  inputRange: number;\n  hiddenLayers: number[];\n  outputSize: number;\n  decayRate: number;\n  smoothEps: number;\n  regc: number;\n  clipval: number;\n  maxPredictionLength: number;\n  json?: IRNNTimeStepJSON;\n}\n\nexport interface IRNNTimeStepJSONOptions {\n  inputSize: number;\n  inputRange: number;\n  hiddenLayers: number[];\n  outputSize: number;\n  decayRate: number;\n  smoothEps: number;\n  regc: number;\n  clipval: number;\n  maxPredictionLength: number;\n}\n\nexport interface IRNNTimeStepJSON {\n  type: string;\n  options: IRNNTimeStepJSONOptions;\n  hiddenLayers: Array<{ [index: string]: IMatrixJSON }>;\n  outputConnector: IMatrixJSON;\n  output: IMatrixJSON;\n  inputLookup: INumberHash | null;\n  inputLookupLength: number;\n  outputLookup: INumberHash | null;\n  outputLookupLength: number;\n}\n\nexport interface IMisclass {\n  value: FormattableData;\n  actual: FormattableData;\n}\n\nexport interface ITestResults {\n  misclasses: IMisclass[];\n  error: number;\n  total: number;\n}\n\nexport interface IRNNTimeStepModel {\n  isInitialized: boolean;\n  hiddenLayers: IRNNHiddenLayer[];\n  output: Matrix;\n  equations: Equation[];\n  allMatrices: Matrix[];\n  equationConnections: Matrix[][];\n  outputConnector: RandomMatrix | Matrix;\n}\n\nexport const defaults = (): IRNNOptions => {\n  return {\n    ...rnnDefaults(),\n    inputSize: 1,\n    hiddenLayers: [20],\n    outputSize: 1,\n    inputRange: 0,\n  };\n};\n\nexport class RNNTimeStep extends RNN {\n  inputLookupLength = 0;\n  inputLookup: INumberHash | null = null;\n  outputLookup: INumberHash | null = null;\n  outputLookupLength = 0;\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error\n  model: IRNNTimeStepModel = Object.seal({\n    isInitialized: false,\n    hiddenLayers: [],\n    output: new Matrix(0, 0),\n    equations: [],\n    allMatrices: [],\n    equationConnections: [],\n    outputConnector: new RandomMatrix(0, 0, 0.08),\n  });\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error\n  options: IRNNTimeStepOptions = defaults();\n  constructor(\n    options: Partial<IRNNTimeStepOptions & IRNNTrainingOptions> = {}\n  ) {\n    super();\n    this.options = { ...this.options, ...options };\n    this.updateTrainingOptions({\n      ...trainDefaults,\n      ...options,\n    });\n\n    if (options.json) {\n      this.fromJSON(options.json);\n    }\n  }\n\n  createInputMatrix(): RandomMatrix {\n    throw new Error('Input Matrices do not exist on RNNTimeStep');\n  }\n\n  createOutputMatrices(): { outputConnector: RandomMatrix; output: Matrix } {\n    const { outputSize } = this.options;\n    const lastHiddenSize = last(this.options.hiddenLayers);\n\n    // whd\n    const outputConnector = new RandomMatrix(outputSize, lastHiddenSize, 0.08);\n    // bd\n    const output = new RandomMatrix(outputSize, 1, 0.08);\n    return { output, outputConnector };\n  }\n\n  bindEquation(): void {\n    const { model, options } = this;\n    const { hiddenLayers, inputSize } = options;\n    const layers = model.hiddenLayers;\n    const equation = new Equation();\n    const outputs = [];\n    const equationConnection =\n      model.equationConnections.length > 0\n        ? model.equationConnections[model.equationConnections.length - 1]\n        : this.initialLayerInputs;\n    // 0 index\n    let output = this.getEquation(\n      equation,\n      equation.input(new Matrix(inputSize, 1)),\n      equationConnection[0],\n      layers[0]\n    );\n    outputs.push(output);\n    // 1+ indices\n    for (let i = 1, max = hiddenLayers.length; i < max; i++) {\n      output = this.getEquation(\n        equation,\n        output,\n        equationConnection[i],\n        layers[i]\n      );\n      outputs.push(output);\n    }\n\n    model.equationConnections.push(outputs);\n    equation.add(\n      equation.multiply(model.outputConnector, output),\n      model.output\n    );\n    model.equations.push(equation);\n  }\n\n  initialize(): void {\n    this.model = this.mapModel();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error\n  mapModel(): IRNNTimeStepModel {\n    const allMatrices: Matrix[] = [];\n    this.initialLayerInputs = this.options.hiddenLayers.map(\n      (size) => new Matrix(size, 1)\n    );\n\n    const hiddenLayers = this.createHiddenLayers();\n    for (let i = 0, max = hiddenLayers.length; i < max; i++) {\n      const hiddenMatrix = hiddenLayers[i];\n      for (const property in hiddenMatrix) {\n        if (!hiddenMatrix.hasOwnProperty(property)) continue;\n        allMatrices.push(hiddenMatrix[property]);\n      }\n    }\n\n    const { outputConnector, output } = this.createOutputMatrices();\n\n    allMatrices.push(outputConnector);\n    allMatrices.push(output);\n    return Object.seal({\n      isInitialized: true,\n      hiddenLayers,\n      output,\n      equations: [],\n      allMatrices,\n      equationConnections: [],\n      outputConnector,\n    });\n  }\n\n  backpropagate(): void {\n    for (let i = this.model.equations.length - 1; i > -1; i--) {\n      this.model.equations[i].backpropagate();\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error\n  run<InputType extends InputOutputValue | InputOutputValue[]>(\n    rawInput: InputType\n  ): ValuesOf<InputType> {\n    const shape = lookup.dataShape(rawInput).join(',');\n    switch (shape) {\n      case 'array,number':\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-expect-error\n        return this.runArray(rawInput as Float32Array);\n      case 'array,array,number':\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-expect-error\n        return this.runArrayOfArray(rawInput as Float32Array[]);\n      case 'object,number':\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-expect-error\n        return this.runObject(rawInput as INumberHash); // Backward compatibility, will be result of `unknown` and need casting.  Better to just use net.runObject() directly\n      case 'array,object,number':\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-expect-error\n        return this.runArrayOfObject(rawInput as INumberHash[]);\n      default:\n        throw new Error(`Unrecognized data shape ${shape}`);\n    }\n  }\n\n  forecast<InputType extends InputOutputValue | InputOutputValue[]>(\n    rawInput: InputType,\n    count = 1\n  ): InputType {\n    const shape = lookup.dataShape(rawInput).join(',');\n    switch (shape) {\n      case 'array,number':\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-expect-error\n        return this.forecastArray(rawInput as Float32Array, count);\n      case 'array,array,number':\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-expect-error\n        return this.forecastArrayOfArray(rawInput as Float32Array[], count);\n      case 'object,number':\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-expect-error\n        return this.runObject(rawInput as INumberHash);\n      case 'array,object,number':\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-expect-error\n        return this.forecastArrayOfObject(rawInput as INumberHash[], count);\n      default:\n        throw new Error(`Unrecognized data shape ${shape}`);\n    }\n  }\n\n  forecastArray(input: Float32Array, count = 1): Float32Array {\n    this.checkRunnable();\n    const { model } = this;\n    const { equations } = model;\n    const length = input.length + count;\n    while (equations.length <= length) {\n      this.bindEquation();\n    }\n    let lastOutput;\n    let equationIndex = 0;\n    if (this.options.inputSize === 1) {\n      for (let i = 0; i < input.length; i++) {\n        lastOutput = equations[equationIndex++].runInput(\n          Float32Array.from([input[i]])\n        );\n      }\n    } else {\n      for (let i = 0; i < input.length; i++) {\n        lastOutput = equations[equationIndex++].runInput(Float32Array.from([]));\n      }\n    }\n    if (!lastOutput) {\n      throw new Error('lastOutput not set');\n    }\n    const result = [lastOutput.weights[0]];\n    for (let i = 0, max = count - 1; i < max; i++) {\n      lastOutput = equations[equationIndex++].runInput(lastOutput.weights);\n      result.push(lastOutput.weights[0]);\n    }\n    this.end();\n    return Float32Array.from(result);\n  }\n\n  forecastArrayOfArray(input: Float32Array[], count = 1): Float32Array[] {\n    this.checkRunnable();\n    const { model } = this;\n    const { equations } = model;\n    const length = input.length + count;\n    while (equations.length <= length) {\n      this.bindEquation();\n    }\n    let lastOutput;\n    let equationIndex = 0;\n    for (let i = 0; i < input.length; i++) {\n      lastOutput = equations[equationIndex++].runInput(input[i]);\n    }\n    if (!lastOutput) {\n      throw new Error('lastOutput not set');\n    }\n    const result = [Float32Array.from(lastOutput.weights)];\n    for (let i = 0, max = count - 1; i < max; i++) {\n      lastOutput = equations[equationIndex++].runInput(lastOutput.weights);\n      result.push(Float32Array.from(lastOutput.weights.slice(0)));\n    }\n    this.end();\n    return result;\n  }\n\n  forecastArrayOfObject(input: INumberHash[], count = 1): INumberHash[] {\n    if (!this.inputLookup) {\n      throw new Error('this.inputLookup not set');\n    }\n    if (!this.outputLookup) {\n      throw new Error('this.outputLookup not set');\n    }\n    const formattedData = input.map((value) =>\n      lookup.toArray(\n        this.inputLookup as INumberHash,\n        value,\n        this.inputLookupLength\n      )\n    );\n    return this.forecastArrayOfArray(formattedData, count).map((value) =>\n      lookup.toObject(this.outputLookup as INumberHash, value)\n    );\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error\n  train(\n    data: FormattableData[],\n    trainOpts: Partial<IRNNTrainingOptions> = {}\n  ): IRNNStatus {\n    this.trainOpts = trainOpts = {\n      ...rnnTrainDefaults,\n      ...trainOpts,\n    };\n    // Don't destructure here because this.setSize() can reset this.options.\n    if (this.options.inputSize === 1 && this.options.outputSize === 1) {\n      this.setSize(data);\n    }\n    this.verifySize();\n\n    const formattedData = this.formatData(data);\n    let error = Infinity;\n    let i;\n\n    this.verifyIsInitialized();\n    const {\n      iterations,\n      errorThresh,\n      logPeriod,\n      callback,\n      callbackPeriod,\n    } = this.trainOpts;\n    const log = trainOpts.log === true ? console.log : trainOpts.log;\n    for (i = 0; i < iterations && error > errorThresh; i++) {\n      let sum = 0;\n      for (let j = 0; j < formattedData.length; j++) {\n        const err = this.trainPattern(formattedData[j], true);\n        sum += err;\n      }\n      error = sum / formattedData.length;\n\n      if (isNaN(error))\n        throw new Error(\n          'Network error rate is unexpected NaN, check network configurations and try again. Most probably input format is not correct or training data is not enough. '\n        );\n      if (log && i % logPeriod === 0) {\n        log(`iterations: ${i}, training error: ${error}`);\n      }\n      if (callback && i % callbackPeriod === 0) {\n        callback({ error, iterations: i });\n      }\n    }\n\n    return {\n      error,\n      iterations: i,\n    };\n  }\n\n  trainArrayOfArray(input: Float32Array[]): number {\n    if (input.length < 2) {\n      throw new Error('input must be an array of 2 or more');\n    }\n    const { equations } = this.model;\n    while (equations.length < input.length) {\n      this.bindEquation();\n    }\n    let errorSum = 0;\n    for (let i = 0, max = input.length - 1; i < max; i++) {\n      errorSum += equations[i].predictTarget(input[i], input[i + 1]);\n    }\n    this.end();\n    return errorSum / input.length;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error\n  trainPattern(input: Float32Array[], logErrorRate?: boolean): number {\n    const error = this.trainArrayOfArray(input);\n    this.backpropagate();\n    this.adjustWeights();\n\n    if (logErrorRate) {\n      return error;\n    }\n    return 0;\n  }\n\n  setSize(data: FormattableData[]): void {\n    let size = 0;\n    const dataShape = lookup.dataShape(data).join(',');\n    switch (dataShape) {\n      case 'array,array,number':\n      case 'array,object,number':\n      case 'array,datum,array,number':\n      case 'array,datum,object,number':\n        size = 1;\n        // probably 1\n        break;\n      case 'array,array,array,number':\n        size = (data as number[][][])[0][0].length;\n        break;\n      case 'array,array,object,number':\n        // inputs and outputs should match\n        size = Object.keys(lookup.toTable2D(data as INumberHash[][])).length;\n        break;\n      case 'array,datum,array,array,number':\n        size = ((data as unknown) as Array<{\n          [key: string]: number[][];\n        }>)[0].input[0].length;\n        break;\n      case 'array,datum,array,object,number':\n        size = Object.keys(\n          lookup.toInputTable2D(\n            data as Array<{ input: Array<{ [key: string]: number }> }>\n          )\n        ).length;\n        break;\n      default:\n        throw new Error('unknown data shape or configuration');\n    }\n    this.options = Object.seal({\n      ...this.options,\n      inputSize: size,\n      outputSize: size,\n    });\n  }\n\n  verifySize(): void {\n    if (this.options.inputSize || this.options.outputSize) {\n      if (this.options.inputSize !== this.options.outputSize) {\n        throw new Error('manually set inputSize and outputSize mismatch');\n      }\n    }\n  }\n\n  runArray(input: Float32Array): number {\n    this.checkRunnable();\n    const { equations } = this.model;\n    while (equations.length <= input.length) {\n      this.bindEquation();\n    }\n    let lastOutput;\n    for (let i = 0; i < input.length; i++) {\n      lastOutput = equations[i].runInput(new Float32Array([input[i]]));\n    }\n    this.end();\n    return (lastOutput as Matrix).weights[0];\n  }\n\n  runArrayOfArray(input: Float32Array[]): Float32Array {\n    this.checkRunnable();\n    const { model } = this;\n    const { equations } = model;\n    while (equations.length <= input.length) {\n      this.bindEquation();\n    }\n    let lastOutput;\n    for (let i = 0; i < input.length; i++) {\n      const outputMatrix = equations[i].runInput(input[i]);\n      lastOutput = outputMatrix.weights;\n    }\n    this.end();\n    return lastOutput ?? Float32Array.from([]);\n  }\n\n  runObject(input: INumberHash): INumberHash {\n    if (!this.inputLookup) {\n      throw new Error('this.inputLookup not set');\n    }\n    if (!this.outputLookup) {\n      throw new Error('this.outputLookup not set');\n    }\n    if (!this.outputLookupLength) {\n      throw new Error('this.outputLookupLength not set');\n    }\n    if (this.inputLookup === this.outputLookup) {\n      const inputArray = lookup.toArrayShort(this.inputLookup, input);\n      return lookup.toObjectPartial(\n        this.outputLookup,\n        this.forecastArray(\n          inputArray,\n          this.outputLookupLength - inputArray.length\n        ),\n        inputArray.length\n      );\n    }\n    return lookup.toObject(\n      this.outputLookup,\n      this.forecastArray(\n        lookup.toArray(this.inputLookup, input, this.inputLookupLength),\n        this.outputLookupLength\n      )\n    );\n  }\n\n  runArrayOfObject(input: INumberHash[]): INumberHash {\n    if (this.inputLookup === null) {\n      throw new Error('this.inputLookup not set');\n    }\n    if (this.outputLookup === null) {\n      throw new Error('this.outputLookup not set');\n    }\n    const formattedInput = input.map((value) =>\n      lookup.toArray(\n        this.inputLookup as INumberHash,\n        value,\n        this.inputLookupLength\n      )\n    );\n    return this.forecastArrayOfArray(formattedInput, 1).map((value) =>\n      lookup.toObject(this.outputLookup as INumberHash, value)\n    )[0];\n  }\n\n  runArrayOfObjectOfArray(input: INumberHash[]): INumberHash {\n    if (!this.inputLookup) {\n      throw new Error('this.inputLookup not set');\n    }\n    if (!this.outputLookup) {\n      throw new Error('this.outputLookup not set');\n    }\n    return lookup.toObject(\n      this.outputLookup,\n      this.runArrayOfArray(\n        lookup.toArrays(this.inputLookup, input, this.inputLookupLength)\n      )\n    );\n  }\n\n  end(): void {\n    this.model.equations[this.model.equations.length - 1].runInput(\n      new Float32Array(this.options.outputSize)\n    );\n  }\n\n  requireInputOutputOfOne(): void {\n    if (this.options.inputSize !== 1) {\n      throw new Error('inputSize must be 1 for this data size');\n    }\n    if (this.options.outputSize !== 1) {\n      throw new Error('outputSize must be 1 for this data size');\n    }\n  }\n\n  // Handles data shape of 'array,number'\n  formatArray(data: number[]): Float32Array[][] {\n    const result = [];\n    this.requireInputOutputOfOne();\n    for (let i = 0; i < data.length; i++) {\n      result.push(Float32Array.from([data[i]]));\n    }\n    return [result];\n  }\n\n  // Handles data shape of 'array,array,number'\n  formatArrayOfArray(data: number[][]): Float32Array[][] {\n    const result = [];\n    const { inputSize, outputSize } = this.options;\n    if (inputSize === 1 && outputSize === 1) {\n      for (let i = 0; i < data.length; i++) {\n        result.push(arrayToFloat32Arrays(data[i]));\n      }\n      return result;\n    }\n    if (inputSize !== data[0].length) {\n      throw new Error('inputSize must match data input size');\n    }\n    if (outputSize !== data[0].length) {\n      throw new Error('outputSize must match data output size');\n    }\n    for (let i = 0; i < data.length; i++) {\n      result.push(Float32Array.from(data[i]));\n    }\n    return [result];\n  }\n\n  // Handles data shape of 'array,object,number'\n  formatArrayOfObject(data: INumberHash[]): Float32Array[][] {\n    this.requireInputOutputOfOne();\n    if (!this.inputLookup) {\n      const lookupTable = new LookupTable(data);\n      this.inputLookup = this.outputLookup = lookupTable.table;\n      this.inputLookupLength = this.outputLookupLength = lookupTable.length;\n    }\n    const result = [];\n    for (let i = 0; i < data.length; i++) {\n      result.push(objectToFloat32Arrays(data[i]));\n    }\n    return result;\n  }\n\n  // Handles data shape of 'array,object,number' when this.options.inputSize > 1\n  formatArrayOfObjectMulti(data: INumberHash[]): Float32Array[][] {\n    if (!this.inputLookup) {\n      const lookupTable = new LookupTable(data);\n      this.inputLookup = this.outputLookup = lookupTable.table;\n      this.inputLookupLength = this.outputLookupLength = lookupTable.length;\n    }\n    const result = [];\n    for (let i = 0; i < data.length; i++) {\n      result.push([\n        objectToFloat32Array(data[i], this.inputLookup, this.inputLookupLength),\n      ]);\n    }\n    return result;\n  }\n\n  // Handles data shape of 'array,datum,array,number'\n  formatArrayOfDatumOfArray(data: ITrainingDatum[]): Float32Array[][] {\n    const result = [];\n    this.requireInputOutputOfOne();\n    for (let i = 0; i < data.length; i++) {\n      const datum = data[i];\n      result.push(\n        inputOutputArrayToFloat32Arrays(\n          datum.input as number[],\n          datum.output as number[]\n        )\n      );\n    }\n    return result;\n  }\n\n  // Handles data shape of 'array,datum,object,number'\n  formatArrayOfDatumOfObject(data: ITrainingDatum[]): Float32Array[][] {\n    this.requireInputOutputOfOne();\n    if (!this.inputLookup) {\n      const inputLookup = new LookupTable(data, 'input');\n      this.inputLookup = inputLookup.table;\n      this.inputLookupLength = inputLookup.length;\n    }\n    if (!this.outputLookup) {\n      const outputLookup = new LookupTable(data, 'output');\n      this.outputLookup = outputLookup.table;\n      this.outputLookupLength = outputLookup.length;\n    }\n    const result = [];\n    for (let i = 0; i < data.length; i++) {\n      const datum = data[i];\n      result.push(\n        inputOutputObjectToFloat32Arrays(\n          datum.input as INumberHash,\n          datum.output as INumberHash\n        )\n      );\n    }\n    return result;\n  }\n\n  // Handles data shape of 'array,array,array,number'\n  formatArrayOfArrayOfArray(data: number[][][]): Float32Array[][] {\n    const result = [];\n    for (let i = 0; i < data.length; i++) {\n      result.push(arraysToFloat32Arrays(data[i]));\n    }\n    return result;\n  }\n\n  // Handles data shape of 'array,array,object,number'\n  formatArrayOfArrayOfObject(data: INumberHash[][]): Float32Array[][] {\n    if (!this.inputLookup) {\n      const lookupTable = new LookupTable(data);\n      this.inputLookup = this.outputLookup = lookupTable.table;\n      this.inputLookupLength = this.outputLookupLength = lookupTable.length;\n    }\n    const result = [];\n    for (let i = 0; i < data.length; i++) {\n      const array = [];\n      for (let j = 0; j < data[i].length; j++) {\n        array.push(\n          objectToFloat32Array(\n            data[i][j],\n            this.inputLookup,\n            this.inputLookupLength\n          )\n        );\n      }\n      result.push(array);\n    }\n    return result;\n  }\n\n  // Handles data shape of 'array,datum,array,array,number'\n  formatArrayOfDatumOfArrayOfArray(data: ITrainingDatum[]): Float32Array[][] {\n    const result = [];\n    const { inputSize, outputSize } = this.options;\n    if (inputSize !== (data[0].input as INumberArray[][])[0].length) {\n      throw new Error('inputSize must match data input size');\n    }\n    if (outputSize !== (data[0].output as INumberArray[][])[0].length) {\n      throw new Error('outputSize must match data output size');\n    }\n    for (let i = 0; i < data.length; i++) {\n      const datum = data[i];\n      result.push(\n        inputOutputArraysToFloat32Arrays(\n          datum.input as number[][],\n          datum.output as number[][]\n        )\n      );\n    }\n    return result;\n  }\n\n  // 'Handles data shape of array,datum,array,object,number'\n  formatArrayOfDatumOfArrayOfObject(\n    data: Array<{\n      input: Array<Record<string, number>>;\n      output: Array<Record<string, number>>;\n    }>\n  ): Float32Array[][] {\n    if (!this.inputLookup) {\n      const inputLookup = new ArrayLookupTable(data, 'input');\n      this.inputLookup = inputLookup.table;\n      this.inputLookupLength = inputLookup.length;\n    }\n    if (!this.outputLookup) {\n      const outputLookup = new ArrayLookupTable(data, 'output');\n      this.outputLookup = outputLookup.table;\n      this.outputLookupLength = outputLookup.length;\n    }\n    if (!this.outputLookupLength) {\n      throw new Error('this.outputLookupLength not set to usable number');\n    }\n    const result = [];\n    for (let i = 0; i < data.length; i++) {\n      const datum = data[i];\n      result.push(\n        inputOutputObjectsToFloat32Arrays(\n          datum.input,\n          datum.output,\n          this.inputLookup,\n          this.outputLookup,\n          this.inputLookupLength,\n          this.outputLookupLength\n        )\n      );\n    }\n    return result;\n  }\n\n  formatData(data: FormattableData[]): Float32Array[][] {\n    const dataShape = lookup.dataShape(data).join(',');\n    switch (dataShape) {\n      case 'array,number':\n        return this.formatArray(data as number[]);\n      case 'array,array,number':\n        return this.formatArrayOfArray(data as number[][]);\n      case 'array,object,number':\n        if (this.options.inputSize === 1) {\n          return this.formatArrayOfObject(data as INumberHash[]);\n        } else {\n          return this.formatArrayOfObjectMulti(data as INumberHash[]);\n        }\n      case 'array,datum,array,number':\n        return this.formatArrayOfDatumOfArray(data as ITrainingDatum[]);\n      case 'array,datum,object,number':\n        return this.formatArrayOfDatumOfObject(data as ITrainingDatum[]);\n      case 'array,array,array,number':\n        return this.formatArrayOfArrayOfArray(data as number[][][]);\n      case 'array,array,object,number':\n        return this.formatArrayOfArrayOfObject(data as INumberHash[][]);\n      case 'array,datum,array,array,number':\n        return this.formatArrayOfDatumOfArrayOfArray(data as ITrainingDatum[]);\n      case 'array,datum,array,object,number':\n        return this.formatArrayOfDatumOfArrayOfObject(\n          data as Array<{\n            input: Array<Record<string, number>>;\n            output: Array<Record<string, number>>;\n          }>\n        );\n      default:\n        throw new Error('unknown data shape or configuration');\n    }\n  }\n\n  test(data: FormattableData[]): ITestResults {\n    // for classification problems\n    const misclasses = [];\n    // run each pattern through the trained network and collect\n    // error and misclassification statistics\n    let errorSum = 0;\n    const formattedData = this.formatData(data);\n    for (let i = 0; i < formattedData.length; i++) {\n      const input = formattedData[i];\n      const output = this.run(input.splice(0, input.length - 1));\n      const target = input[input.length - 1];\n      let errors = 0;\n      let errorCount = 0;\n      for (let j = 0; j < output.length; j++) {\n        errorCount++;\n        const error = target[j] - output[j];\n        // mse\n        errors += error * error;\n      }\n      errorSum += errors / errorCount;\n      const errorsAbs = Math.abs(errors);\n      if (errorsAbs > this.trainOpts.errorThresh) {\n        const misclass = (data as number[][][])[i];\n        misclasses.push({\n          value: misclass,\n          actual: output,\n        });\n      }\n    }\n    return {\n      error: errorSum / formattedData.length,\n      misclasses,\n      total: formattedData.length,\n    };\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error\n  addFormat(value: FormattableData): void {\n    const dataShape = lookup.dataShape(value).join(',');\n    switch (dataShape) {\n      case 'array,array,number':\n      case 'datum,array,array,number':\n      case 'array,number':\n      case 'datum,array,number':\n        return;\n      case 'datum,object,number': {\n        this.inputLookup = lookup.addKeys(\n          (value as ITrainingDatum).input as INumberHash,\n          this.inputLookup ?? {}\n        );\n        if (this.inputLookup) {\n          this.inputLookupLength = Object.keys(this.inputLookup).length;\n        }\n        this.outputLookup = lookup.addKeys(\n          (value as ITrainingDatum).output as INumberHash,\n          this.outputLookup ?? {}\n        );\n        if (this.outputLookup) {\n          this.outputLookupLength = Object.keys(this.outputLookup).length;\n        }\n        break;\n      }\n      case 'object,number': {\n        this.inputLookup = this.outputLookup = lookup.addKeys(\n          value as INumberHash,\n          this.inputLookup ?? {}\n        );\n        if (this.inputLookup) {\n          this.inputLookupLength = this.outputLookupLength = Object.keys(\n            this.inputLookup\n          ).length;\n        }\n        break;\n      }\n      case 'array,object,number': {\n        const typedValue = value as INumberHash[];\n        for (let i = 0; i < typedValue.length; i++) {\n          this.inputLookup = this.outputLookup = lookup.addKeys(\n            typedValue[i],\n            this.inputLookup ?? {}\n          );\n          if (this.inputLookup) {\n            this.inputLookupLength = this.outputLookupLength = Object.keys(\n              this.inputLookup\n            ).length;\n          }\n        }\n        break;\n      }\n      case 'datum,array,object,number': {\n        const typedValue = value as ITrainingDatum;\n        const typedInput = typedValue.input as INumberHash[];\n        for (let i = 0; i < typedInput.length; i++) {\n          this.inputLookup = lookup.addKeys(\n            typedInput[i],\n            this.inputLookup ?? {}\n          );\n          if (this.inputLookup) {\n            this.inputLookupLength = Object.keys(this.inputLookup).length;\n          }\n        }\n        const typedOutput = typedValue.output as INumberHash[];\n        for (let i = 0; i < typedOutput.length; i++) {\n          this.outputLookup = lookup.addKeys(\n            typedOutput[i],\n            this.outputLookup ?? {}\n          );\n          if (this.outputLookup) {\n            this.outputLookupLength = Object.keys(this.outputLookup).length;\n          }\n        }\n        break;\n      }\n\n      default:\n        throw new Error('unknown data shape or configuration');\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error\n  toJSON(): IRNNTimeStepJSON {\n    if (!this.model) {\n      this.initialize();\n    }\n    const { model } = this;\n    const options = { ...this.options, ...rnnDefaults };\n\n    return {\n      type: this.constructor.name,\n      options,\n      hiddenLayers: model.hiddenLayers.map((hiddenLayer) => {\n        const layers: { [index: string]: IMatrixJSON } = {};\n        for (const p in hiddenLayer) {\n          if (!hiddenLayer.hasOwnProperty(p)) continue;\n          layers[p] = hiddenLayer[p].toJSON();\n        }\n        return layers;\n      }),\n      outputConnector: model.outputConnector.toJSON(),\n      output: model.output.toJSON(),\n      inputLookup: this.inputLookup,\n      inputLookupLength: this.inputLookupLength,\n      outputLookup: this.outputLookup,\n      outputLookupLength: this.outputLookupLength,\n    };\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error\n  fromJSON(json: IRNNTimeStepJSON): this {\n    const { options } = json;\n    const allMatrices = [];\n    const hiddenLayers: IRNNHiddenLayerModel[] = [];\n\n    // backward compatibility for hiddenSizes\n    json.hiddenLayers.forEach((hiddenLayer) => {\n      const layers: { [index: string]: Matrix } = {};\n      for (const p in hiddenLayer) {\n        layers[p] = Matrix.fromJSON(hiddenLayer[p]);\n        allMatrices.push(layers[p]);\n      }\n      hiddenLayers.push(layers as IRNNHiddenLayerModel);\n    });\n\n    const outputConnector = Matrix.fromJSON(json.outputConnector);\n    allMatrices.push(outputConnector);\n    const output = Matrix.fromJSON(json.output);\n    allMatrices.push(output);\n\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-expect-error\n    this.options = { ...defaults(), ...options };\n    this.inputLookup = json.inputLookup;\n    this.inputLookupLength = json.inputLookupLength;\n    this.outputLookup = json.outputLookup;\n    this.outputLookupLength = json.outputLookupLength;\n\n    this.model = Object.seal({\n      isInitialized: true,\n      hiddenLayers,\n      output,\n      allMatrices,\n      outputConnector,\n      equations: [],\n      equationConnections: [],\n    });\n    this.initialLayerInputs = options.hiddenLayers.map(\n      (size) => new Matrix(size, 1)\n    );\n    this.bindEquation();\n    return this;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error\n  toFunction(cb?: (src: string) => string): RNNTimeStepFunction {\n    const {\n      model,\n      inputLookup,\n      inputLookupLength,\n      outputLookup,\n      outputLookupLength,\n    } = this;\n    const { inputSize } = this.options;\n    const { equations } = model;\n    const equation = equations[1];\n    const { states } = equation;\n    const jsonString = JSON.stringify(this.toJSON());\n\n    function previousConnectionIndex(m: Matrix) {\n      const connection = model.equationConnections[0];\n      const { states } = equations[0];\n      for (let i = 0, max = states.length; i < max; i++) {\n        if (states[i].product === m) {\n          return i;\n        }\n      }\n      return connection.indexOf(m);\n    }\n\n    function matrixOrigin(m: Matrix, stateIndex: number): string {\n      for (let i = 0, max = states.length; i < max; i++) {\n        const state = states[i];\n\n        if (i === stateIndex) {\n          const j = previousConnectionIndex(m);\n          switch (m) {\n            case state.left:\n              if (j > -1) {\n                return `typeof prevStates[${j}] === 'object' ? prevStates[${j}].product : new Matrix(${m.rows}, ${m.columns})`;\n              }\n            // eslint-disable-next-line no-fallthrough\n            case state.right:\n              if (j > -1) {\n                return `typeof prevStates[${j}] === 'object' ? prevStates[${j}].product : new Matrix(${m.rows}, ${m.columns})`;\n              }\n            // eslint-disable-next-line no-fallthrough\n            case state.product:\n              return `new Matrix(${m.rows}, ${m.columns})`;\n            default:\n              throw Error('unknown state');\n          }\n        }\n\n        if (m === state.product) return `states[${i}].product`;\n        if (m === state.right) return `states[${i}].right`;\n        if (m === state.left) return `states[${i}].left`;\n      }\n      return '';\n    }\n\n    function matrixToString(m: Matrix, stateIndex: number): string {\n      if (!m || !m.rows || !m.columns) return 'null';\n      if (m === model.outputConnector) return `json.outputConnector`;\n      if (m === model.output) return `json.output`;\n\n      for (let i = 0, max = model.hiddenLayers.length; i < max; i++) {\n        const hiddenLayer = model.hiddenLayers[i];\n        for (const p in hiddenLayer) {\n          if (!hiddenLayer.hasOwnProperty(p)) continue;\n          if (hiddenLayer[p] !== m) continue;\n          return `json.hiddenLayers[${i}].${p}`;\n        }\n      }\n\n      return matrixOrigin(m, stateIndex);\n    }\n\n    function formatInputData() {\n      if (!inputLookup) return '';\n      if (inputSize === 1) {\n        if (inputLookup === outputLookup) {\n          return `function lookupInput(input) {\n            var table = ${JSON.stringify(inputLookup)};\n            var result = [];\n            for (var p in table) {\n              if (!input.hasOwnProperty(p)) break;\n              result.push(Float32Array.from([input[p]]));\n            }\n            return result;\n          }`;\n        }\n        return `function lookupInput(input) {\n          var table = ${JSON.stringify(inputLookup)};\n          var result = [];\n          for (var p in table) {\n            result.push(Float32Array.from([input[p]]));\n          }\n          return result;\n        }`;\n      }\n      return `function lookupInput(rawInputs) {\n        var table = ${JSON.stringify(inputLookup)};\n        var result = [];\n        for (var i = 0; i < rawInputs.length; i++) {\n          var rawInput = rawInputs[i];\n          var input = new Float32Array(${inputLookupLength});\n          for (var p in table) {\n            input[table[p]] = rawInput.hasOwnProperty(p) ? rawInput[p] : 0;\n          }\n          result.push(input);\n        }\n        return result;\n      }`;\n    }\n\n    function formatOutputData() {\n      if (!outputLookup) return '';\n      if (inputSize === 1) {\n        if (inputLookup === outputLookup) {\n          return `function lookupOutputPartial(output, input) {\n            var table = ${JSON.stringify(outputLookup)};\n            var offset = input.length;\n            var result = {};\n            var i = 0;\n            for (var p in table) {\n              if (i++ < offset) continue;\n              result[p] = output[table[p] - offset][0];\n            }\n            return result;\n          }`;\n        }\n        return `function lookupOutput(output) {\n          var table = ${JSON.stringify(outputLookup)};\n          var result = {};\n          for (var p in table) {\n            result[p] = output[table[p]][0];\n          }\n          return result;\n        }`;\n      }\n      return `function lookupOutput(output) {\n        var table = ${JSON.stringify(outputLookup)};\n        var result = {};\n        for (var p in table) {\n          result[p] = output[table[p]];\n        }\n        return result;\n      }`;\n    }\n\n    function toInner(fnString: string) {\n      // crude, but should be sufficient for now\n      // function() { body }\n      // crude, but should be sufficient for now\n      // function() { body }\n      const fnParts = fnString.toString().split('{');\n      fnParts.shift();\n      // body }\n      const fnBodyString = fnParts.join('{');\n      const fnBodyParts = fnBodyString.split('}');\n      fnBodyParts.pop();\n      // body\n      return fnBodyParts\n        .join('}')\n        .split('\\n')\n        .join('\\n        ')\n        .replace('product.deltas[i] = 0;', '')\n        .replace('product.deltas[column] = 0;', '')\n        .replace('left.deltas[leftIndex] = 0;', '')\n        .replace('right.deltas[rightIndex] = 0;', '')\n        .replace('product.deltas = left.deltas.slice(0);', '');\n    }\n\n    function fileName(fnName: string) {\n      return `src/recurrent/matrix/${fnName.replace(/[A-Z]/g, function (value) {\n        return `-${value.toLowerCase()}`;\n      })}.js`;\n    }\n\n    const statesRaw = [];\n    const usedFunctionNames: { [methodName: string]: boolean } = {};\n    const innerFunctionsSwitch = [];\n    for (let i = 0, max = states.length; i < max; i++) {\n      const state = states[i];\n      statesRaw.push(`states[${i}] = {\n      name: '${state.forwardFn.name}',\n      left: ${state.left ? matrixToString(state.left, i) : 'undefined'},\n      right: ${state.right ? matrixToString(state.right, i) : 'undefined'},\n      product: ${matrixToString(state.product, i)}\n    }`);\n\n      const fnName = state.forwardFn.name;\n      if (!usedFunctionNames[fnName]) {\n        usedFunctionNames[fnName] = true;\n        if (state.name === 'input') {\n          innerFunctionsSwitch.push(`case '${fnName}':`);\n          innerFunctionsSwitch.push(\n            inputLookup && inputSize === 1\n              ? 'product.weights = _i < input.length ? input[_i]: prevStates[prevStates.length - 1].product.weights;'\n              : inputSize === 1\n              ? 'product.weights = [input[_i]];'\n              : 'product.weights = input[_i];'\n          );\n          innerFunctionsSwitch.push('break;');\n        } else {\n          innerFunctionsSwitch.push(\n            `        case '${fnName}':${\n              fnName !== 'forwardFn'\n                ? ` //compiled from ${fileName(fnName)}`\n                : ''\n            }\n          ${toInner(state.forwardFn.toString())}\n          break;`\n          );\n        }\n      }\n    }\n\n    const forceForecast = inputSize === 1 && this.outputLookup;\n    const src = `\n  var input = ${this.inputLookup ? 'lookupInput(rawInput)' : 'rawInput'};\n  var json = ${jsonString};\n  var output = [];\n  var states = [];\n  var prevStates;\n  var state;\n  var max = ${\n    forceForecast\n      ? inputLookup === outputLookup\n        ? inputLookupLength\n        : `input.length + ${outputLookupLength - 1}`\n      : 'input.length'\n  };\n  for (var _i = 0; _i < max; _i++) {\n    prevStates = states;\n    states = [];\n    ${statesRaw.join(';\\n    ')};\n    for (var stateIndex = 0, stateMax = ${\n      statesRaw.length\n    }; stateIndex < stateMax; stateIndex++) {\n      state = states[stateIndex];\n      var product = state.product;\n      var left = state.left;\n      var right = state.right;\n\n      switch (state.name) {\n${innerFunctionsSwitch.join('\\n')}\n      }\n    }\n    ${\n      inputSize === 1 && inputLookup\n        ? 'if (_i >= input.length - 1) { output.push(state.product.weights); }'\n        : 'output = state.product.weights;'\n    }\n  }\n  ${\n    outputLookup\n      ? outputLookup === inputLookup\n        ? 'return lookupOutputPartial(output, input)'\n        : 'return lookupOutput(output)'\n      : inputSize === 1\n      ? 'return output[0]'\n      : 'return output'\n  };\n  ${formatInputData()}\n  ${formatOutputData()}\n\n  function Matrix(rows, columns) {\n    this.rows = rows;\n    this.columns = columns;\n    this.weights = zeros(rows * columns);\n  }\n  ${zeros.toString()}\n  ${softmax.toString().replace('_2.default', 'Matrix')}\n  ${randomFloat.toString()}\n  ${sampleI.toString()}\n  ${maxI.toString()}`;\n    // eslint-disable-next-line\n    return new Function('rawInput', cb ? cb(src) : src) as RNNTimeStepFunction;\n  }\n}\n\nexport type RNNTimeStepFunction = <\n  InputType extends InputOutputValue | InputOutputValue[]\n>(\n  rawInput?: InputType,\n  isSampleI?: boolean,\n  temperature?: number\n) => ValuesOf<InputType>;\n\nexport const trainDefaults = { ...rnnTrainDefaults };\n","import { getGRUHiddenLayer, getGRUEquation, IGRUHiddenLayer } from './gru';\nimport { Matrix } from './matrix';\nimport { Equation } from './matrix/equation';\nimport { RNNTimeStep } from './rnn-time-step';\nimport { IRNNHiddenLayer } from './rnn';\n\nexport class GRUTimeStep extends RNNTimeStep {\n  getHiddenLayer(hiddenSize: number, prevSize: number): IRNNHiddenLayer {\n    return getGRUHiddenLayer(hiddenSize, prevSize);\n  }\n\n  getEquation(\n    equation: Equation,\n    inputMatrix: Matrix,\n    previousResult: Matrix,\n    hiddenLayer: IRNNHiddenLayer\n  ): Matrix {\n    return getGRUEquation(\n      equation,\n      inputMatrix,\n      previousResult,\n      hiddenLayer as IGRUHiddenLayer\n    );\n  }\n}\n","import { Matrix } from './matrix';\nimport { Equation } from './matrix/equation';\nimport { RandomMatrix } from './matrix/random-matrix';\nimport { IRNNHiddenLayer, RNN } from './rnn';\n\nexport interface ILSTMHiddenLayer extends IRNNHiddenLayer {\n  inputMatrix: Matrix;\n  inputHidden: Matrix;\n  inputBias: Matrix;\n  forgetMatrix: Matrix;\n  forgetHidden: Matrix;\n  forgetBias: Matrix;\n  outputMatrix: Matrix;\n  outputHidden: Matrix;\n  outputBias: Matrix;\n  cellActivationMatrix: Matrix;\n  cellActivationHidden: Matrix;\n  cellActivationBias: Matrix;\n}\n\nexport class LSTM extends RNN {\n  getHiddenLayer(hiddenSize: number, prevSize: number): IRNNHiddenLayer {\n    return getHiddenLSTMLayer(hiddenSize, prevSize);\n  }\n\n  getEquation(\n    equation: Equation,\n    inputMatrix: Matrix,\n    previousResult: Matrix,\n    hiddenLayer: IRNNHiddenLayer\n  ): Matrix {\n    return getLSTMEquation(\n      equation,\n      inputMatrix,\n      previousResult,\n      hiddenLayer as ILSTMHiddenLayer\n    );\n  }\n}\n\nexport function getHiddenLSTMLayer(\n  hiddenSize: number,\n  prevSize: number\n): ILSTMHiddenLayer {\n  return {\n    // gates parameters\n    // wix\n    inputMatrix: new RandomMatrix(hiddenSize, prevSize, 0.08), // wih\n    inputHidden: new RandomMatrix(hiddenSize, hiddenSize, 0.08), // bi\n    inputBias: new Matrix(hiddenSize, 1),\n    // wfx\n    forgetMatrix: new RandomMatrix(hiddenSize, prevSize, 0.08), // wfh\n    forgetHidden: new RandomMatrix(hiddenSize, hiddenSize, 0.08), // bf\n    forgetBias: new Matrix(hiddenSize, 1),\n    // wox\n    outputMatrix: new RandomMatrix(hiddenSize, prevSize, 0.08), // woh\n    outputHidden: new RandomMatrix(hiddenSize, hiddenSize, 0.08), // bo\n    outputBias: new Matrix(hiddenSize, 1),\n    // cell write params\n    // wcx\n    cellActivationMatrix: new RandomMatrix(hiddenSize, prevSize, 0.08), // wch\n    cellActivationHidden: new RandomMatrix(hiddenSize, hiddenSize, 0.08), // bc\n    cellActivationBias: new Matrix(hiddenSize, 1),\n  };\n}\n\nexport function getLSTMEquation(\n  equation: Equation,\n  inputMatrix: Matrix,\n  previousResult: Matrix,\n  hiddenLayer: ILSTMHiddenLayer\n): Matrix {\n  if (\n    !hiddenLayer.inputMatrix ||\n    !hiddenLayer.inputHidden ||\n    !hiddenLayer.inputBias ||\n    !hiddenLayer.forgetMatrix ||\n    !hiddenLayer.forgetHidden ||\n    !hiddenLayer.forgetBias ||\n    !hiddenLayer.outputMatrix ||\n    !hiddenLayer.outputHidden ||\n    !hiddenLayer.outputBias ||\n    !hiddenLayer.cellActivationMatrix ||\n    !hiddenLayer.cellActivationHidden ||\n    !hiddenLayer.cellActivationBias\n  ) {\n    throw new Error('hiddenLayer does not have expected properties');\n  }\n\n  const sigmoid = equation.sigmoid.bind(equation);\n  const add = equation.add.bind(equation);\n  const multiply = equation.multiply.bind(equation);\n  const multiplyElement = equation.multiplyElement.bind(equation);\n  const tanh = equation.tanh.bind(equation);\n\n  const inputGate = sigmoid(\n    add(\n      add(\n        multiply(hiddenLayer.inputMatrix, inputMatrix),\n        multiply(hiddenLayer.inputHidden, previousResult)\n      ),\n      hiddenLayer.inputBias\n    )\n  );\n\n  const forgetGate = sigmoid(\n    add(\n      add(\n        multiply(hiddenLayer.forgetMatrix, inputMatrix),\n        multiply(hiddenLayer.forgetHidden, previousResult)\n      ),\n      hiddenLayer.forgetBias\n    )\n  );\n\n  // output gate\n  const outputGate = sigmoid(\n    add(\n      add(\n        multiply(hiddenLayer.outputMatrix, inputMatrix),\n        multiply(hiddenLayer.outputHidden, previousResult)\n      ),\n      hiddenLayer.outputBias\n    )\n  );\n\n  // write operation on cells\n  const cellWrite = tanh(\n    add(\n      add(\n        multiply(hiddenLayer.cellActivationMatrix, inputMatrix),\n        multiply(hiddenLayer.cellActivationHidden, previousResult)\n      ),\n      hiddenLayer.cellActivationBias\n    )\n  );\n\n  // compute new cell activation\n  const retainCell = multiplyElement(forgetGate, previousResult); // what do we keep from cell\n  const writeCell = multiplyElement(inputGate, cellWrite); // what do we write to cell\n  const cell = add(retainCell, writeCell); // new cell contents\n\n  // compute hidden state as gated, saturated cell activations\n  return multiplyElement(outputGate, tanh(cell));\n}\n","import { getHiddenLSTMLayer, getLSTMEquation, ILSTMHiddenLayer } from './lstm';\nimport { Matrix } from './matrix';\nimport { Equation } from './matrix/equation';\nimport { RNNTimeStep } from './rnn-time-step';\nimport { IRNNHiddenLayer } from './rnn';\n\nexport class LSTMTimeStep extends RNNTimeStep {\n  getHiddenLayer(hiddenSize: number, prevSize: number): IRNNHiddenLayer {\n    return getHiddenLSTMLayer(hiddenSize, prevSize);\n  }\n\n  getEquation(\n    equation: Equation,\n    inputMatrix: Matrix,\n    previousResult: Matrix,\n    hiddenLayer: IRNNHiddenLayer\n  ): Matrix {\n    return getLSTMEquation(\n      equation,\n      inputMatrix,\n      previousResult,\n      hiddenLayer as ILSTMHiddenLayer\n    );\n  }\n}\n","/**\n *\n * @param start\n * @param end\n * @returns {Array}\n */\nexport function range(start: number, end: number): number[] {\n  const result: number[] = [];\n  for (; start < end; start++) {\n    result.push(start);\n  }\n  return result;\n}\n","export function toArray(\n  values: number[] | Float32Array | { [key: string]: number }\n): Float32Array {\n  if (Array.isArray(values)) {\n    return Float32Array.from(values);\n  }\n\n  return Float32Array.from(Object.values(values));\n}\n","import { FeedForward, IFeedForwardJSON } from '../feed-forward';\nimport { recurrentZeros } from '../layer/recurrent-zeros';\nimport { Recurrent } from '../recurrent';\nimport { IRNNJSON, RNN } from '../recurrent/rnn';\nimport { INeuralNetworkJSON, NeuralNetwork } from '../neural-network';\nimport { GRU } from '../recurrent/gru';\nimport { LSTM } from '../recurrent/lstm';\nimport { NeuralNetworkGPU } from '../neural-network-gpu';\nimport { IRNNTimeStepJSON, RNNTimeStep } from '../recurrent/rnn-time-step';\nimport { LSTMTimeStep } from '../recurrent/lstm-time-step';\nimport { GRUTimeStep } from '../recurrent/gru-time-step';\nimport { ILayer } from '../layer';\n\ninterface LineDrawInfo {\n  className: string;\n  color: string;\n  width: number;\n}\n\ninterface NodeDrawInfo {\n  className: string;\n  color: string;\n}\n\ninterface BaseDrawArgs {\n  pixelX: number;\n  pixelY: number;\n  radius: number;\n  row: number;\n  column: number;\n}\n\ninterface InputDrawArgs extends BaseDrawArgs {\n  line: LineDrawInfo;\n  inputs: NodeDrawInfo & { labels?: string[] | null };\n  fontSize: string;\n  fontClassName: string;\n}\n\nexport function drawInput({\n  pixelX,\n  pixelY,\n  radius,\n  inputs,\n  row,\n  line,\n  fontSize,\n  fontClassName,\n}: InputDrawArgs): string {\n  let svg = `<rect\n              x=\"${pixelX / 2 - radius}\"\n              y=\"${pixelY / 2 + row * pixelY - radius}\"\n              width=\"${2 * radius}\"\n              height=\"${2 * radius}\"\n              stroke=\"black\"\n              stroke-width=\"1\"\n              fill=\"${inputs.color}\"\n              class=\"${inputs.className}\" />\n            <line\n              x1=\"${pixelX / 4}\"\n              y1=\"${pixelY / 2 + row * pixelY}\"\n              x2=\"${pixelX / 2 - radius}\"\n              y2=\"${pixelY / 2 + row * pixelY}\"\n              style=\"stroke:${line.color};stroke-width:${line.width}\"\n              class=\"${line.className}\" />`;\n  if (inputs.labels) {\n    svg += `<text\n              x=\"${pixelX / 8}\"\n              y=\"${pixelY / 2 + row * pixelY - 5}\"\n              fill=\"black\"\n              font-size=\"${fontSize}\"\n              class=\"${fontClassName}\">${inputs.labels[row]}</text>`;\n  }\n  return svg;\n}\n\nexport interface NeuronDrawArgs extends BaseDrawArgs {\n  column: number;\n  hidden: NodeDrawInfo;\n}\n\nexport function drawNeuron({\n  pixelX,\n  pixelY,\n  row,\n  column,\n  radius,\n  hidden,\n}: NeuronDrawArgs): string {\n  return `<circle\n            cx=\"${pixelX / 2 + column * pixelX}\"\n            cy=\"${pixelY / 2 + row * pixelY}\"\n            r=\"${radius}\"\n            stroke=\"black\"\n            stroke-width=\"1\"\n            fill=\"${hidden.color}\"\n            class=\"${hidden.className}\" />`;\n}\n\nexport interface OutputDrawArgs extends BaseDrawArgs {\n  column: number;\n  line: LineDrawInfo;\n  outputs: NodeDrawInfo;\n}\n\nexport function drawOutput({\n  pixelX,\n  pixelY,\n  row,\n  column,\n  line,\n  outputs,\n  radius,\n}: OutputDrawArgs): string {\n  return `<circle\n            cx=\"${pixelX / 2 + column * pixelX}\"\n            cy=\"${pixelY / 2 + row * pixelY}\"\n            r=\"${radius}\"\n            stroke=\"black\"\n            stroke-width=\"1\"\n            fill=\"${outputs.color}\"\n            class=\"${outputs.className}\" />\n          <line\n            x1=\"${pixelX / 2 + column * pixelX + radius}\"\n            y1=\"${pixelY / 2 + row * pixelY}\"\n            x2=\"${pixelX / 2 + column * pixelX + pixelX / 4}\"\n            y2=\"${pixelY / 2 + row * pixelY}\"\n            style=\"stroke:${line.color};stroke-width:${line.width}\"\n            class=\"${line.className}\" />`;\n}\n\nexport interface BackwardConnectionsDrawArgs extends BaseDrawArgs {\n  column: number;\n  lineY: number;\n  previousConnectionIndex: number;\n  line: LineDrawInfo;\n}\n\nexport function drawBackwardConnections({\n  pixelX,\n  pixelY,\n  row,\n  column,\n  radius,\n  lineY,\n  line,\n  previousConnectionIndex,\n}: BackwardConnectionsDrawArgs): string {\n  return `<line\n            x1=\"${pixelX / 2 + (column - 1) * pixelX + radius}\"\n            y1=\"${lineY / 2 + previousConnectionIndex * lineY}\"\n            x2=\"${pixelX / 2 + column * pixelX - radius}\"\n            y2=\"${pixelY / 2 + row * pixelY}\"\n            style=\"stroke:${line.color};stroke-width:${line.width}\"\n            class=\"${line.className}\" />`;\n}\n\nexport interface NeuralNetworkDrawOptions {\n  sizes: number[];\n  height: number;\n  width: number;\n  radius: number;\n  line: LineDrawInfo;\n  inputs: NodeDrawInfo & { labels?: string[] | null };\n  hidden: NodeDrawInfo;\n  outputs: NodeDrawInfo;\n  fontSize: string;\n  fontClassName: string;\n}\n\nexport function neuralNetworkToInnerSVG(\n  options: NeuralNetworkDrawOptions\n): string {\n  const { sizes, height, width } = options;\n  let svg = '';\n  const pixelX = width / sizes.length;\n  for (let column = 0; column < sizes.length; column++) {\n    const size = sizes[column];\n    const pixelY = height / size;\n    for (let row = 0; row < size; row++) {\n      if (column === 0) {\n        svg += drawInput({ pixelX, pixelY, row, column, ...options });\n      } else {\n        if (column === sizes.length - 1) {\n          svg += drawOutput({ pixelX, pixelY, row, column, ...options });\n        } else {\n          svg += drawNeuron({ pixelX, pixelY, row, column, ...options });\n        }\n        const previousSize = sizes[column - 1];\n        const lineY = height / previousSize;\n        for (\n          let previousConnectionIndex = 0;\n          previousConnectionIndex < previousSize;\n          previousConnectionIndex++\n        ) {\n          svg += drawBackwardConnections({\n            pixelX,\n            pixelY,\n            row,\n            column,\n            lineY,\n            previousConnectionIndex,\n            ...options,\n          });\n        }\n      }\n    }\n  }\n  return svg;\n}\n\nexport interface RecurrentConnectionsDrawArgs extends BaseDrawArgs {\n  column: number;\n  recurrentLine: LineDrawInfo;\n}\n\nexport function drawRecurrentConnections({\n  pixelX,\n  pixelY,\n  row,\n  column,\n  radius,\n  recurrentLine,\n}: RecurrentConnectionsDrawArgs): string {\n  const moveX = pixelX / 2 + column * pixelX + radius + 1;\n  const moveY = pixelY / 2 + row * pixelY;\n  const x = moveX - radius * 2 - 2;\n  const y = moveY;\n  const x1 = x + 100;\n  const y1 = y + 50;\n  const x2 = moveX - 100;\n  const y2 = moveY + 50;\n  return `<path\n              d=\"M ${moveX} ${moveY} C ${x1} ${y1}, ${x2} ${y2}, ${x} ${y}\"\n              stroke=\"${recurrentLine.color}\"\n              stroke-width=\"${recurrentLine.width}\"\n              fill=\"transparent\"\n              stroke-linecap=\"round\"\n              marker-end=\"url(#arrow)\"\n              class=\"${recurrentLine.className}\" />`;\n}\n\nexport interface RecurrentNeuralNetworkDrawOptions\n  extends NeuralNetworkDrawOptions {\n  recurrentLine: LineDrawInfo;\n}\n\nexport function rnnToInnerSVG(\n  options: RecurrentNeuralNetworkDrawOptions\n): string {\n  const { width, height, recurrentLine, sizes, radius } = options;\n  const pixelX = width / sizes.length;\n  let svg = `<defs>\n              <marker id=\"arrow\" markerWidth=\"10\" markerHeight=\"10\" refX=\"8\" refY=\"3\" orient=\"auto\" markerUnits=\"strokeWidth\">\n                <path d=\"M0,0 L0,6 L9,3 z\" fill=\"${recurrentLine.color}\" />\n              </marker>\n            </defs>`;\n  svg += neuralNetworkToInnerSVG(options);\n  for (let column = 1; column < sizes.length; column++) {\n    const size = sizes[column];\n    const pixelY = height / size;\n    for (let row = 0; row < size; row++) {\n      svg += drawRecurrentConnections({\n        pixelX,\n        pixelY,\n        row,\n        column,\n        radius,\n        recurrentLine,\n      });\n    }\n  }\n  return svg;\n}\n\nexport function getFeedForwardLayers(network: FeedForward): ISimpleNet {\n  const { options } = network;\n  if (!options) {\n    throw new Error('options not defined');\n  }\n  if (!options.inputLayer) {\n    throw new Error('options.inputLater not defined');\n  }\n  if (!options.hiddenLayers) {\n    throw new Error('options.hiddenLayers not defined');\n  }\n  if (options.hiddenLayers.length < 1) {\n    throw new Error('options.hiddenLayers is empty');\n  }\n  if (!options.outputLayer) {\n    throw new Error('options.outputLayer not defined');\n  }\n  const inputLayer = options.inputLayer();\n  const hiddenLayers = [];\n  hiddenLayers.push(options.hiddenLayers[0](inputLayer, 0));\n  for (let i = 1; i < options.hiddenLayers.length; i++) {\n    hiddenLayers.push(options.hiddenLayers[i](hiddenLayers[i - 1], i));\n  }\n  const outputLayer = options.outputLayer(\n    hiddenLayers[hiddenLayers.length - 1],\n    hiddenLayers.length\n  );\n  return {\n    inputSize: inputLayer.height,\n    hiddenLayers: hiddenLayers.map((hiddenLayer: ILayer) => hiddenLayer.height),\n    outputSize: outputLayer.height,\n  };\n}\n\nexport function getRecurrentLayers(network: Recurrent): ISimpleNet {\n  const hiddenLayers: ILayer[] = [];\n  const { options } = network;\n  if (!options.inputLayer) {\n    throw new Error('inputLayer not defined');\n  }\n  if (!options.outputLayer) {\n    throw new Error('outputLayer not defined');\n  }\n  const inputLayer = options.inputLayer();\n  hiddenLayers.push(options.hiddenLayers[0](inputLayer, recurrentZeros(), 0));\n  for (let i = 1; i < options.hiddenLayers.length; i++) {\n    hiddenLayers.push(\n      options.hiddenLayers[i](hiddenLayers[i - 1], recurrentZeros(), i)\n    );\n  }\n  const outputLayer = options.outputLayer(\n    hiddenLayers[hiddenLayers.length - 1],\n    -1\n  );\n  return {\n    inputSize: inputLayer.height,\n    hiddenLayers: hiddenLayers.map((hiddenLayer: ILayer) => hiddenLayer.height),\n    outputSize: outputLayer.height,\n  };\n}\n\nexport function wrapOuterSVG(\n  svgBody: string,\n  width: number,\n  height: number\n): string {\n  // language=html\n  return `<svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n            version=\"1.1\"\n            width=\"${width}\"\n            height=\"${height}\">${svgBody}</svg>`;\n}\n\nexport function getNeuralNetworkJSONSizes(json: INeuralNetworkJSON): number[] {\n  return json.sizes;\n}\n\nexport function getNeuralNetworkSizes<InputType, OutputType>(\n  net:\n    | NeuralNetwork<InputType, OutputType>\n    | NeuralNetworkGPU<InputType, OutputType>\n): number[] {\n  const { options, sizes } = net;\n  const { inputSize, outputSize, hiddenLayers } = options;\n  if (!sizes) {\n    if (typeof inputSize === 'number' && inputSize < 1) {\n      throw new Error('inputSize not set');\n    }\n    if (typeof outputSize === 'number' && outputSize < 1) {\n      throw new Error('outputSize not set');\n    }\n    if (hiddenLayers?.some((v) => v < 1)) {\n      throw new Error('hiddenLayers not set');\n    }\n  }\n  return typeof inputSize === 'number' &&\n    Array.isArray(hiddenLayers) &&\n    typeof outputSize === 'number'\n    ? [inputSize].concat(hiddenLayers).concat([outputSize])\n    : sizes;\n}\n\nexport function getRNNSizes(\n  net: RNN | LSTM | GRU | RNNTimeStep | LSTMTimeStep | GRUTimeStep | IRNNJSON\n): number[] {\n  const { options } = net;\n  const { inputSize, outputSize, hiddenLayers } = options;\n  return [inputSize].concat(hiddenLayers).concat([outputSize]);\n}\n\nexport function defaultOptions(): RecurrentNeuralNetworkDrawOptions {\n  return {\n    line: {\n      width: 0.5,\n      color: 'black',\n      className: 'connection',\n    },\n    recurrentLine: {\n      width: 1,\n      color: 'red',\n      className: 'recurrence',\n    },\n    inputs: {\n      color: 'rgba(0, 128, 0, 0.5)',\n      labels: null,\n      className: 'input',\n    },\n    outputs: {\n      color: 'rgba(100, 149, 237, 0.5)',\n      className: 'output',\n    },\n    hidden: {\n      color: 'rgba(255, 127, 80, 0.5)',\n      className: 'hidden-neuron',\n    },\n    fontSize: '14px',\n    fontClassName: 'label',\n    radius: 8,\n    width: 400,\n    height: 250,\n    sizes: [],\n  };\n}\n\nexport interface ISimpleNet {\n  inputSize: number;\n  hiddenLayers: number[];\n  outputSize: number;\n}\nexport interface ISizes {\n  sizes: number[];\n}\n\nexport function toSVG<\n  T extends\n    | ISimpleNet\n    | ISizes\n    | Recurrent\n    | FeedForward\n    | IFeedForwardJSON\n    | RNNTimeStep\n    | IRNNTimeStepJSON\n    | LSTMTimeStep\n    | GRUTimeStep\n    | RNN\n    | IRNNJSON\n    | GRU\n    | LSTM\n    | NeuralNetwork<InputType, OutputType>\n    | INeuralNetworkJSON\n    | NeuralNetworkGPU<InputType, OutputType>,\n  InputType,\n  OutputType\n>(\n  net: T,\n  options?:\n    | Partial<RecurrentNeuralNetworkDrawOptions>\n    | Partial<NeuralNetworkDrawOptions>\n): string {\n  const mergedOptions = { ...defaultOptions(), ...options };\n  const { width, height, inputs } = mergedOptions;\n\n  // Get network size array for NeuralNetwork or NeuralNetworkGPU\n  let sizes: number[] = [];\n  if (net instanceof NeuralNetwork || net instanceof NeuralNetworkGPU) {\n    sizes = getNeuralNetworkSizes(net);\n  }\n  // get network size for Recurrent\n  else if (net instanceof Recurrent) {\n    const { inputSize, hiddenLayers, outputSize } = getRecurrentLayers(net);\n    sizes = [inputSize].concat(hiddenLayers).concat([outputSize]);\n  }\n  // get network size for FeedForward\n  else if (net instanceof FeedForward) {\n    const { inputSize, hiddenLayers, outputSize } = getFeedForwardLayers(net);\n    sizes = [inputSize].concat(hiddenLayers).concat([outputSize]);\n  }\n  // handle json, recurrent first\n  else if (\n    net instanceof RNN ||\n    net instanceof LSTM ||\n    net instanceof GRU ||\n    net instanceof RNNTimeStep ||\n    net instanceof LSTMTimeStep ||\n    net instanceof GRUTimeStep\n  ) {\n    return wrapOuterSVG(\n      rnnToInnerSVG({\n        ...mergedOptions,\n        sizes: checkSizes(\n          getRNNSizes(\n            (net as unknown) as\n              | RNN\n              | LSTM\n              | GRU\n              | RNNTimeStep\n              | LSTMTimeStep\n              | GRUTimeStep\n          ),\n          inputs.labels\n        ),\n      }),\n      width,\n      height\n    );\n  }\n  // handle json, NeuralNetwork\n  else if (net.hasOwnProperty('type')) {\n    switch ((net as INeuralNetworkJSON).type) {\n      case 'NeuralNetwork':\n      case 'NeuralNetworkGPU':\n        return wrapOuterSVG(\n          neuralNetworkToInnerSVG({\n            ...mergedOptions,\n            sizes: checkSizes(\n              getNeuralNetworkJSONSizes(net as INeuralNetworkJSON),\n              inputs.labels\n            ),\n          }),\n          width,\n          height\n        );\n      case 'RNN':\n      case 'GRU':\n      case 'LSTM':\n      case 'RNNTimeStep':\n      case 'GRUTimeStep':\n      case 'LSTMTimeStep':\n        return wrapOuterSVG(\n          rnnToInnerSVG({\n            ...mergedOptions,\n            sizes: checkSizes(getRNNSizes(net as IRNNJSON), inputs.labels),\n          }),\n          width,\n          height\n        );\n      default:\n        throw new Error('unrecognized network');\n    }\n  } else if (\n    net.hasOwnProperty('inputSize') &&\n    net.hasOwnProperty('hiddenLayers') &&\n    net.hasOwnProperty('outputSize')\n  ) {\n    const { inputSize, hiddenLayers, outputSize } = net as ISimpleNet;\n    sizes = [inputSize, ...hiddenLayers, outputSize];\n  } else if (net.hasOwnProperty('sizes')) {\n    sizes = (net as ISizes).sizes;\n  } else {\n    throw new Error('unrecognized network');\n  }\n  return wrapOuterSVG(\n    neuralNetworkToInnerSVG({\n      ...mergedOptions,\n      sizes: checkSizes(sizes, inputs.labels),\n    }),\n    width,\n    height\n  );\n}\n\nexport function checkSizes(\n  sizes: number[],\n  labels: string[] | null | undefined\n): number[] {\n  if (!sizes) {\n    throw new Error('sizes not set');\n  }\n  if (sizes.some((size: number) => size < 1)) {\n    throw new Error('sizes not set correctly');\n  }\n  if (labels && labels.length !== sizes[0]) {\n    throw new Error('not enough labels for inputs');\n  }\n  return sizes;\n}\n","import * as activation from './activation';\nimport CrossValidate from './cross-validate';\nimport { FeedForward } from './feed-forward';\nimport * as layer from './layer';\nimport { layerTypes } from './layer';\nimport { likely } from './likely';\nimport { lookup } from './lookup';\nimport { NeuralNetwork } from './neural-network';\nimport { NeuralNetworkGPU } from './neural-network-gpu';\nimport * as praxis from './praxis';\nimport { Recurrent } from './recurrent';\nimport { GRU } from './recurrent/gru';\nimport { GRUTimeStep } from './recurrent/gru-time-step';\nimport { LSTM } from './recurrent/lstm';\nimport { LSTMTimeStep } from './recurrent/lstm-time-step';\nimport { RNN } from './recurrent/rnn';\nimport { RNNTimeStep } from './recurrent/rnn-time-step';\nimport { DataFormatter } from './utilities/data-formatter';\nimport { max } from './utilities/max';\nimport { mse } from './utilities/mse';\nimport { ones, ones2D } from './utilities/ones';\nimport * as random from './utilities/random';\nimport { randomWeight } from './utilities/random-weight';\nimport { randos } from './utilities/randos';\nimport { range } from './utilities/range';\nimport { toArray } from './utilities/to-array';\nimport { toSVG } from './utilities/to-svg';\nimport { zeros } from './utilities/zeros';\n\nconst recurrent = {\n  RNNTimeStep,\n  LSTMTimeStep,\n  GRUTimeStep,\n  RNN,\n  LSTM,\n  GRU,\n};\n\nconst utilities = {\n  max,\n  mse,\n  ones,\n  ones2D,\n  random,\n  randomWeight,\n  randos,\n  range,\n  toArray,\n  DataFormatter,\n  zeros,\n  toSVG,\n};\n\nexport {\n  activation,\n  CrossValidate,\n  likely,\n  layer,\n  layerTypes,\n  lookup,\n  praxis,\n  FeedForward,\n  NeuralNetwork,\n  NeuralNetworkGPU,\n  Recurrent,\n  recurrent,\n  utilities,\n};\n"],"names":["activate","measure","GPU","Input","Texture","zeros","compare2D","update","defaultSettings","defaults","predict","add","multiply","predict2D","predict3D","compare3D","sigmoid","compareFilterDeltas","compareInputDeltas","compareBiases","compare","multiplyElement","ones","tanh","relu","praxis.momentumRootMeanSquaredPropagation","trainDefaults","this","mse","Thaw","alias","utils","rnnDefaults","rnnTrainDefaults","random"],"mappings":"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"}