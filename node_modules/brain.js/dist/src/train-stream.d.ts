/// <reference types="node" />
import { Writable } from 'stream';
import { INeuralNetworkTrainOptions } from './neural-network';
import { INeuralNetworkState } from './neural-network-types';
export interface ITrainStreamTrainOptions {
    iterations: number;
    errorThresh: number;
    log: boolean;
    logPeriod: number;
    callbackPeriod: number;
    callback: (status: {
        iterations: number;
        error: number;
    }) => void;
}
export interface ITrainStreamNetwork<InputType, FormattedType, TrainOptsType extends Partial<ITrainStreamTrainOptions>> {
    trainOpts: TrainOptsType;
    updateTrainingOptions: (trainOpts: Partial<TrainOptsType>) => void;
    addFormat: (data: InputType) => void;
    formatData: (data: InputType[]) => FormattedType[];
    trainPattern: (value: FormattedType, logErrorRate?: boolean) => number | null;
    verifyIsInitialized: (data: FormattedType[]) => void;
}
interface ITrainStreamOptions<Network> extends INeuralNetworkTrainOptions {
    neuralNetwork: Network;
    floodCallback?: () => void;
    doneTrainingCallback?: (stats: {
        error: number;
        iterations: number;
    }) => void;
}
export declare class TrainStream<Network extends ITrainStreamNetwork<Parameters<Network['addFormat']>[0], Parameters<Network['trainPattern']>[0], Network['trainOpts']>> extends Writable {
    neuralNetwork: Network;
    dataFormatDetermined: boolean;
    i: number;
    size: number;
    count: number;
    sum: number;
    floodCallback?: () => void;
    doneTrainingCallback?: (stats: {
        error: number;
        iterations: number;
    }) => void;
    iterations: number;
    errorThresh: number;
    log: boolean | ((status: INeuralNetworkState) => void);
    logPeriod: number;
    callbackPeriod: number;
    callback?: (status: {
        iterations: number;
        error: number;
    }) => void;
    firstDatum: Array<Parameters<Network['addFormat']>[0]> | undefined;
    constructor(options: Partial<ITrainStreamOptions<Network>>);
    endInputs(): void;
    _write(chunk: Array<Parameters<Network['addFormat']>[0]>, enc: BufferEncoding, next: (error?: Error | null) => void): void;
    finishStreamIteration(): void;
}
export {};
//# sourceMappingURL=train-stream.d.ts.map